/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_KColor swig_types[0]
#define SWIGTYPE_p_KConsole swig_types[1]
#define SWIGTYPE_p_KEventHandler swig_types[2]
#define SWIGTYPE_p_KKey swig_types[3]
#define SWIGTYPE_p_KPosition swig_types[4]
#define SWIGTYPE_p_KProjection swig_types[5]
#define SWIGTYPE_p_KQuaternion swig_types[6]
#define SWIGTYPE_p_KSize swig_types[7]
#define SWIGTYPE_p_KVector swig_types[8]
#define SWIGTYPE_p_KWindow swig_types[9]
#define SWIGTYPE_p_KikiAction swig_types[10]
#define SWIGTYPE_p_KikiActionObject swig_types[11]
#define SWIGTYPE_p_KikiAtom swig_types[12]
#define SWIGTYPE_p_KikiBomb swig_types[13]
#define SWIGTYPE_p_KikiBot swig_types[14]
#define SWIGTYPE_p_KikiBotFume swig_types[15]
#define SWIGTYPE_p_KikiBotStatus swig_types[16]
#define SWIGTYPE_p_KikiBullet swig_types[17]
#define SWIGTYPE_p_KikiCellText swig_types[18]
#define SWIGTYPE_p_KikiColumnMenu swig_types[19]
#define SWIGTYPE_p_KikiController swig_types[20]
#define SWIGTYPE_p_KikiEvent swig_types[21]
#define SWIGTYPE_p_KikiFace swig_types[22]
#define SWIGTYPE_p_KikiGUI swig_types[23]
#define SWIGTYPE_p_KikiGate swig_types[24]
#define SWIGTYPE_p_KikiGear swig_types[25]
#define SWIGTYPE_p_KikiGenerator swig_types[26]
#define SWIGTYPE_p_KikiLight swig_types[27]
#define SWIGTYPE_p_KikiMenu swig_types[28]
#define SWIGTYPE_p_KikiMotorCylinder swig_types[29]
#define SWIGTYPE_p_KikiMotorGear swig_types[30]
#define SWIGTYPE_p_KikiMovesAtom swig_types[31]
#define SWIGTYPE_p_KikiMutant swig_types[32]
#define SWIGTYPE_p_KikiObject swig_types[33]
#define SWIGTYPE_p_KikiPageText swig_types[34]
#define SWIGTYPE_p_KikiPlayback swig_types[35]
#define SWIGTYPE_p_KikiPlayer swig_types[36]
#define SWIGTYPE_p_KikiPos swig_types[37]
#define SWIGTYPE_p_KikiPyAction swig_types[38]
#define SWIGTYPE_p_KikiPython swig_types[39]
#define SWIGTYPE_p_KikiPythonWidget swig_types[40]
#define SWIGTYPE_p_KikiScreenText swig_types[41]
#define SWIGTYPE_p_KikiScrollMenu swig_types[42]
#define SWIGTYPE_p_KikiSound swig_types[43]
#define SWIGTYPE_p_KikiSpikes swig_types[44]
#define SWIGTYPE_p_KikiStatusDisplay swig_types[45]
#define SWIGTYPE_p_KikiStone swig_types[46]
#define SWIGTYPE_p_KikiSwitch swig_types[47]
#define SWIGTYPE_p_KikiText swig_types[48]
#define SWIGTYPE_p_KikiValueAtom swig_types[49]
#define SWIGTYPE_p_KikiValve swig_types[50]
#define SWIGTYPE_p_KikiWall swig_types[51]
#define SWIGTYPE_p_KikiWire swig_types[52]
#define SWIGTYPE_p_KikiWireStone swig_types[53]
#define SWIGTYPE_p_KikiWorld swig_types[54]
#define SWIGTYPE_p_char swig_types[55]
#define SWIGTYPE_p_std__string swig_types[56]
#define SWIGTYPE_ptrdiff_t swig_types[57]
#define SWIGTYPE_size_t swig_types[58]
#define SWIGTYPE_std__ptrdiff_t swig_types[59]
#define SWIGTYPE_std__size_t swig_types[60]
static swig_type_info *swig_types[61];
static swig_module_info swig_module = {swig_types, 61, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _kiki.so
  ------------------------------------------------*/
#define SWIG_init    init_kiki

#define SWIG_name    "_kiki"


#include "Kiki.h"



#include <string>


#include <limits.h>


SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


  /*@c:\\Dokumente und Einstellungen\\kodi\\Eigene Dateien\\projects\\kiki\\win32-vc\\deps\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return SWIG_NewPointerObj((char *)(carray), 
			      SWIG_TypeQuery("char *"), 0);
  } else {
    return PyString_FromStringAndSize(carray, (int)(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }

static bool KikiPos___eq__(KikiPos *self,KikiPos const &p){ return (self->x==p.x && self->y==p.y && self->z==p.z); }

SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}

static bool KikiPos___ne__(KikiPos *self,KikiPos const &p){ return (self->x!=p.x || self->y!=p.y || self->z!=p.z); }
static char *KikiPos___str__(KikiPos *self){
                                                static char temp[256];
                                                sprintf(temp,"[ %d, %d, %d ]", self->x,self->y,self->z);
                                                return &temp[0];
                                            }

SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


#include <float.h>
SWIGINTERN int
  SWIG_CheckDoubleInRange(double value, double min_value, 
			  double max_value, const char* errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is less than %s minimum %g", 
		   value, errmsg, min_value);
    }
    return 0;
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is greater than %s maximum %g", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_float(PyObject *obj, float *val)
{
  const char* errmsg = val ? "float" : (char*)0;
  double v;
  if (SWIG_AsVal_double(obj, &v)) {
    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
      if (val) *val = (float)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE float
SWIG_As_float(PyObject* obj)
{
  float v;
  if (!SWIG_AsVal_float(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(float));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_float(PyObject* obj)
{
  return SWIG_AsVal_float(obj, (float*)0);
}


  /*@c:\\Dokumente und Einstellungen\\kodi\\Eigene Dateien\\projects\\kiki\\win32-vc\\deps\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_float PyFloat_FromDouble
/*@@*/

static bool KVector___getitem__(KVector *self,int key){ return (*self)[key]; }
static char *KVector___str__(KVector *self){
                                                static char temp[256];
                                                sprintf(temp,"(%f, %f, %f)", (*self)[0],(*self)[1],(*self)[2]);
                                                return &temp[0];
                                            }
static char *KQuaternion___str__(KQuaternion *self){
                static char temp[256];
                sprintf(temp,"[ %f: %f, %f, %f ]", self->w, self->x, self->y, self->z);
                return &temp[0];
            }
static char *KColor___str__(KColor *self){
                static char temp[256];
                sprintf (temp,"( r:%f g:%f b:%f a:%f)", self->getRed(), self->getGreen(), 
                                                        self->getBlue(), self->getAlpha());
                return &temp[0];
            }

/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }


  /*@c:\\Dokumente und Einstellungen\\kodi\\Eigene Dateien\\projects\\kiki\\win32-vc\\deps\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


#if UINT_MAX < LONG_MAX
/*@c:\\Dokumente und Einstellungen\\kodi\\Eigene Dateien\\projects\\kiki\\win32-vc\\deps\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@c:\\Dokumente und Einstellungen\\kodi\\Eigene Dateien\\projects\\kiki\\win32-vc\\deps\\swigwin-1.3.25\\Lib\\python\\pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif


SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}

static KikiPos KikiWorld_getPickedPos(KikiWorld *self){    
                                            if (self->getPickedPickable())
                                            {
                                                return ((KikiObject*)self->getPickedPickable())->getPos(); 
                                            }
                                            return KikiPos ();
                                        }
extern KikiController Controller;

    const char * replaceTabs	( const std::string & str, int tabWidth )
    {
        static std::string tmpStr;
        tmpStr = str;
        kStringReplaceTabs (tmpStr, tabWidth);
        return tmpStr.c_str();
    } 



    KikiWire *		kikiObjectToWire ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiWire*>(o);
                        }



    KikiGear *		kikiObjectToGear ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiGear*>(o);
                        }



    KikiValve *		kikiObjectToValve ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiValve*>(o);
                        }



    KikiLight *		kikiObjectToLight ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiLight*>(o);
                        }


    KikiCellText *	kikiObjectToCellText ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiCellText*>(o);
                        }


    KikiStone *	kikiObjectToStone ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiStone*>(o);
                        }


    KikiWireStone *	kikiObjectToWireStone ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiWireStone*>(o);
                        }


    KikiWall *	kikiObjectToWall ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiWall*>(o);
                        }


    KikiBomb *	kikiObjectToBomb ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiBomb*>(o);
                        }


    KikiSwitch *	kikiObjectToSwitch ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiSwitch*>(o);
                        }


    KikiGate * 		kikiObjectToGate ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiGate*>(o);
                        }


    KikiSpikes *	kikiObjectToSpikes ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiSpikes*>(o);
                        }

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_KikiPos_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->x);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->y);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int) ((arg1)->z);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiPos")) goto fail;
    result = (KikiPos *)new KikiPos();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiPos",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KikiPos *)new KikiPos(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiPos",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiPos *)new KikiPos(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = 0 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiPos",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiPos *)new KikiPos((KikiPos const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = 0 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiPos",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiPos *)new KikiPos((KVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiPos__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiPos, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KikiPos__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KikiPos__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_KikiPos__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_KikiPos__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiPos'");
    return NULL;
}


static PyObject *_wrap_KikiPos___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KikiPos const *)arg1)->operator -((KikiPos const &)*arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KikiPos const *)arg1)->operator +((KikiPos const &)*arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        KikiPos &_result_ref = (arg1)->operator +=((KikiPos const &)*arg2);
        result = (KikiPos *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        KikiPos &_result_ref = (arg1)->operator -=((KikiPos const &)*arg2);
        result = (KikiPos *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_getString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_getString",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiPos const *)arg1)->getString();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)KikiPos___eq__(arg1,(KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___ne__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)KikiPos___ne__(arg1,(KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___str__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)KikiPos___str__(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KikiPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPos *arg1 = (KikiPos *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KikiPos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPos_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPos, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KVector__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KVector")) goto fail;
    result = (KVector *)new KVector();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KVector",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (float const)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float const)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float const)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KVector *)new KVector(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KVector",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (float const)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float const)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KVector *)new KVector(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KVector",&obj0,&obj1)) goto fail;
    {
        arg1 = (float const)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KVector *)new KVector(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = 0 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KVector",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KVector *)new KVector((KVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KVector__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KVector__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_new_KVector__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_new_KVector__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_float(argv[3]);
                    if (_v) {
                        return _wrap_new_KVector__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KVector'");
    return NULL;
}


static PyObject *_wrap_KVector_reset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_reset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        KVector &_result_ref = (arg1)->reset();
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_normalize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_normalize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        KVector &_result_ref = (arg1)->normalize();
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___iadd__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___iadd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        KVector &_result_ref = (arg1)->operator +=((KVector const &)*arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___isub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___isub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        KVector &_result_ref = (arg1)->operator -=((KVector const &)*arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___imul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___imul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        KVector &_result_ref = (arg1)->operator *=(arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___idiv__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___idiv__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        KVector &_result_ref = (arg1)->operator /=(arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_cross(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_cross",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->cross((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___mul____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (float)((KVector const *)arg1)->operator *((KVector const &)*arg2);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___sub__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->operator -((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___add__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->operator +((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___mul____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->operator *(arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___mul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_KVector___mul____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_KVector___mul____SWIG_1(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_KVector___div__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___div__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->operator /(arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_perpendicular(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_perpendicular",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->perpendicular((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_parallel(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_parallel",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->parallel((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_reflect(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_reflect",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KVector const *)arg1)->reflect((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_normal(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_normal",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KVector const *)arg1)->normal();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KVector const *)arg1)->length();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_angle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_angle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (float)((KVector const *)arg1)->angle((KVector const &)*arg2);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_xyangle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    float result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_xyangle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (float)((KVector const *)arg1)->xyangle((KVector const &)*arg2);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_xyperp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_xyperp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KVector const *)arg1)->xyperp();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_round(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_round",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KVector const *)arg1)->round();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_glVertex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_glVertex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((KVector const *)arg1)->glVertex();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)KVector___getitem__(arg1,arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___str__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)KVector___str__(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = (KVector *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KVector",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KVector_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KVector, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KQuaternion_w_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_w_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->w = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_w_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_w_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->w);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_x_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_x_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_x_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_x_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->x);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_y_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_y_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_y_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_y_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->y);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_z_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_z_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_z_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_z_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float) ((arg1)->z);
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KQuaternion",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KQuaternion *)new KQuaternion(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KQuaternion",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KQuaternion *)new KQuaternion(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KQuaternion",&obj0,&obj1)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KQuaternion *)new KQuaternion(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KQuaternion",&obj0)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KQuaternion *)new KQuaternion(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KQuaternion")) goto fail;
    result = (KQuaternion *)new KQuaternion();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = 0 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KQuaternion",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("KQuaternion");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KQuaternion *)new KQuaternion((KQuaternion const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KVector *arg1 = 0 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KQuaternion",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KQuaternion *)new KQuaternion((KVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KQuaternion__SWIG_4(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KQuaternion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KQuaternion__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KQuaternion__SWIG_6(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            return _wrap_new_KQuaternion__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_new_KQuaternion__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_new_KQuaternion__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_float(argv[3]);
                    if (_v) {
                        return _wrap_new_KQuaternion__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KQuaternion'");
    return NULL;
}


static PyObject *_wrap_KQuaternion_rotationAroundVector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    KVector *arg2 = 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_rotationAroundVector",&obj0,&obj1)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = KQuaternion::rotationAroundVector(arg1,(KVector const &)*arg2);
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_rotate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_rotate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KQuaternion const *)arg1)->rotate((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_normalize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_normalize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        KQuaternion &_result_ref = (arg1)->normalize();
        result = (KQuaternion *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_invert(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_invert",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        KQuaternion &_result_ref = (arg1)->invert();
        result = (KQuaternion *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_conjugate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_conjugate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        KQuaternion &_result_ref = (arg1)->conjugate();
        result = (KQuaternion *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KQuaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_getNormal(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_getNormal",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KQuaternion const *)arg1)->getNormal();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_getConjugate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_getConjugate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KQuaternion const *)arg1)->getConjugate();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_getInverse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_getInverse",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KQuaternion const *)arg1)->getInverse();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KQuaternion const *)arg1)->length();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_glRotate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_glRotate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((KQuaternion const *)arg1)->glRotate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_slerp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *arg2 = 0 ;
    float arg3 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KQuaternion_slerp",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KQuaternion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((KQuaternion const *)arg1)->slerp((KQuaternion const &)*arg2,arg3);
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion___mul__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *arg2 = 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KQuaternion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KQuaternion const *)arg1)->operator *((KQuaternion const &)*arg2);
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion___str__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)KQuaternion___str__(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KQuaternion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KQuaternion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KQuaternion_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KQuaternion, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KColor__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KColor")) goto fail;
    result = (KColor *)new KColor();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = 0 ;
    KColor *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KColor",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KColor *)new KColor((KColor const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    KColor *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KColor",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KColor *)new KColor(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    KColor *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KColor",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KColor *)new KColor(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KColor__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KColor, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_KColor__SWIG_1(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_new_KColor__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_float(argv[3]);
                    if (_v) {
                        return _wrap_new_KColor__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KColor'");
    return NULL;
}


static PyObject *_wrap_KColor_setValues__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:KColor_setValues",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float const)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float const)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float const)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->setValues(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setValues__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KColor_setValues",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float const)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float const)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->setValues(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setValues(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KColor, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_float(argv[3]);
                    if (_v) {
                        return _wrap_KColor_setValues__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KColor, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_float(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_float(argv[4]);
                        if (_v) {
                            return _wrap_KColor_setValues__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KColor_setValues'");
    return NULL;
}


static PyObject *_wrap_KColor_setRed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KColor_setRed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setRed(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setGreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KColor_setGreen",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setGreen(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setBlue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KColor_setBlue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setBlue(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setAlpha(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KColor_setAlpha",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float const)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setAlpha(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getRed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getRed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KColor const *)arg1)->getRed();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getGreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getGreen",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KColor const *)arg1)->getGreen();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getBlue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getBlue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KColor const *)arg1)->getBlue();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getAlpha(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getAlpha",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KColor const *)arg1)->getAlpha();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_glColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_glColor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((KColor const *)arg1)->glColor();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor___str__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor___str__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)KColor___str__(arg1);
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KColor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KColor_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KColor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KProjection_focusOn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KProjection *arg1 = (KProjection *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KProjection_focusOn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KProjection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->focusOn((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_setFov(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KProjection *arg1 = (KProjection *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KProjection_setFov",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KProjection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setFov(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_getFov(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KProjection *arg1 = (KProjection *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KProjection_getFov",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KProjection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KProjection const *)arg1)->getFov();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_setViewport(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KProjection *arg1 = (KProjection *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:KProjection_setViewport",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KProjection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (float)(SWIG_As_float(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (float)(SWIG_As_float(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    (arg1)->setViewport(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_setPosition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KProjection *arg1 = (KProjection *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KProjection_setPosition",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KProjection, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setPosition((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KProjection_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KProjection, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KKey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    KKey *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KKey",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    result = (KKey *)new KKey(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KKey, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_name_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KKey *arg1 = (KKey *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KKey_name_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KKey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__string, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->name = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_name_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KKey *arg1 = (KKey *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KKey_name_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KKey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (std::string *)& ((arg1)->name);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_getUnmodifiedName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KKey *arg1 = (KKey *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KKey_getUnmodifiedName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KKey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KKey const *)arg1)->getUnmodifiedName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_getModifierName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KKey *arg1 = (KKey *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KKey_getModifierName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KKey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KKey const *)arg1)->getModifierName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KKey_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KKey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiAction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    int arg4 ;
    int arg5 ;
    KikiAction *result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_KikiAction",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (KikiAction *)new KikiAction(arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 1);
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_KikiAction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    int arg4 ;
    KikiAction *result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KikiAction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KikiAction *)new KikiAction(arg1,arg2,(std::string const &)*arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 1);
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_KikiAction__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    KikiAction *result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiAction",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = (KikiAction *)new KikiAction(arg1,arg2,(std::string const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 1);
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_KikiAction__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    int arg2 ;
    KikiAction *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiAction *)new KikiAction(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiAction__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiAction *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiAction",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiAction *)new KikiAction(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KikiAction__SWIG_4(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_KikiAction__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_new_KikiAction__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_KikiAction__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_new_KikiAction__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiAction'");
    return NULL;
}


static PyObject *_wrap_KikiAction_getId(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAction *arg1 = (KikiAction *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getId",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiAction const *)arg1)->getId();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAction *arg1 = (KikiAction *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string const &_result_ref = ((KikiAction const *)arg1)->getName();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getRelativeTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAction *arg1 = (KikiAction *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getRelativeTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)(arg1)->getRelativeTime();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getRelativeDelta(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAction *arg1 = (KikiAction *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getRelativeDelta",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)(arg1)->getRelativeDelta();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getDuration(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAction *arg1 = (KikiAction *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getDuration",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiAction const *)arg1)->getDuration();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_setDuration(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAction *arg1 = (KikiAction *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiAction_setDuration",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDuration(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiAction_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiPyAction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    std::string *arg3 = 0 ;
    int arg4 ;
    int arg5 ;
    KikiPyAction *result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_KikiPyAction",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    arg1 = obj0;
    arg2 = obj1;
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        arg5 = (int)(SWIG_As_int(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = (KikiPyAction *)new KikiPyAction(arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPyAction, 1);
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_KikiPyAction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    std::string *arg3 = 0 ;
    int arg4 ;
    KikiPyAction *result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KikiPyAction",&obj0,&obj1,&obj2,&obj3)) goto fail;
    arg1 = obj0;
    arg2 = obj1;
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KikiPyAction *)new KikiPyAction(arg1,arg2,(std::string const &)*arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPyAction, 1);
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_KikiPyAction__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    PyObject *arg1 = (PyObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    std::string *arg3 = 0 ;
    KikiPyAction *result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiPyAction",&obj0,&obj1,&obj2)) goto fail;
    arg1 = obj0;
    arg2 = obj1;
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = (KikiPyAction *)new KikiPyAction(arg1,arg2,(std::string const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPyAction, 1);
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_KikiPyAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            _v = (argv[1] != 0);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_new_KikiPyAction__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            _v = (argv[1] != 0);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_KikiPyAction__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = (argv[0] != 0);
        if (_v) {
            _v = (argv[1] != 0);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        _v = SWIG_Check_int(argv[4]);
                        if (_v) {
                            return _wrap_new_KikiPyAction__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiPyAction'");
    return NULL;
}


static PyObject *_wrap_delete_KikiPyAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPyAction *arg1 = (KikiPyAction *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KikiPyAction",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPyAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPyAction_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPyAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiEvent(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    std::string *arg2 = 0 ;
    KikiEvent *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiEvent",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (KikiEvent *)new KikiEvent(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiEvent, 1);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiEvent_addAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_addAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->addAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_removeAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->removeAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeAllActions(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiEvent_removeAllActions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->removeAllActions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeActionsOfObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_removeActionsOfObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->removeActionsOfObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeActionWithName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_removeActionWithName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->removeActionWithName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiEvent_triggerActions(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiEvent_triggerActions",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->triggerActions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_getTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiEvent_getTime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((KikiEvent const *)arg1)->getTime();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiEvent_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiEvent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiActionObject_addAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_addAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->addAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_removeAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_removeAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->removeAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_startTimedAction__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiActionObject_startTimedAction",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->startTimedAction(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_startTimedAction__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_startTimedAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->startTimedAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_startTimedAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiActionObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_KikiAction, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_KikiActionObject_startTimedAction__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiActionObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_KikiAction, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_KikiActionObject_startTimedAction__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiActionObject_startTimedAction'");
    return NULL;
}


static PyObject *_wrap_KikiActionObject_startTimer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiActionObject_startTimer",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->startTimer(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getActionWithName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_getActionWithName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (KikiAction *)(arg1)->getActionWithName((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getActionWithId(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    int arg2 ;
    KikiAction *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_getActionWithId",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiAction *)(arg1)->getActionWithId(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiAction, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_addEventWithName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_addEventWithName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (int)(arg1)->addEventWithName((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getEventWithName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    std::string *arg2 = 0 ;
    KikiEvent *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_getEventWithName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (KikiEvent *)(arg1)->getEventWithName((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiEvent, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getEventWithId(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    int arg2 ;
    KikiEvent *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_getEventWithId",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiEvent *)(arg1)->getEventWithId(arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiEvent, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getClassName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiActionObject_getClassName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiActionObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((KikiActionObject const *)arg1)->getClassName();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiActionObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiActionObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiObject_setName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiObject_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiObject const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getPos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiObject const *)arg1)->getPos();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_setPosition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setPosition",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setPosition((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getPosition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KVector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getPosition",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiObject const *)arg1)->getPosition();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_setOrientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setOrientation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KQuaternion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setOrientation((KQuaternion const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getOrientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getOrientation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiObject const *)arg1)->getOrientation();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_setCurrentOrientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setCurrentOrientation",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KQuaternion, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KQuaternion");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCurrentOrientation((KQuaternion const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getCurrentOrientation(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getCurrentOrientation",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiObject const *)arg1)->getCurrentOrientation();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_isSpaceEgoistic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_isSpaceEgoistic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiObject const *)arg1)->isSpaceEgoistic();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getClassName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getClassName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((KikiObject const *)arg1)->getClassName();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiObject_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiBotStatus_getMoves(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBotStatus_getMoves",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBotStatus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiBotStatus const *)arg1)->getMoves();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_setMoves(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBotStatus_setMoves",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBotStatus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setMoves(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_addMoves(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBotStatus_addMoves",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBotStatus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->addMoves(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_getMinMoves(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBotStatus_getMinMoves",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBotStatus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiBotStatus const *)arg1)->getMinMoves();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_setMinMoves(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBotStatus_setMinMoves",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBotStatus, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setMinMoves(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBotStatus_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBotStatus, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiBotFume_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBotFume_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiBotFume::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBotFume_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBotFume, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiBot_isDead(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBot *arg1 = (KikiBot *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_isDead",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBot, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiBot const *)arg1)->isDead();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getDown(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getDown",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBot, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDown();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getUp(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getUp",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBot, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getUp();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getDir(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getDir",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBot, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getDir();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_setMove(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBot *arg1 = (KikiBot *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBot_setMove",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBot, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setMove(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getStatus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiBotStatus *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getStatus",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiBot, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiBotStatus *)(arg1)->getStatus();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiBotStatus, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBot_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBot, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiStatusDisplay_show(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiStatusDisplay *arg1 = (KikiStatusDisplay *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiStatusDisplay_show",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiStatusDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->show();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiStatusDisplay_hide(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiStatusDisplay *arg1 = (KikiStatusDisplay *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiStatusDisplay_hide",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiStatusDisplay, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->hide();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiStatusDisplay_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiStatusDisplay, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPlayback_start(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayback_start",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        int res = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *ptr;
        if (res == SWIG_NEWOBJ) delete ptr;
    }
    KikiPlayback::start(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayback_stop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    
    if(!PyArg_ParseTuple(args,(char *)":KikiPlayback_stop")) goto fail;
    KikiPlayback::stop();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPlayback_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPlayback, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPlayer_die(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_die",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->die();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_reborn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_reborn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->reborn();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_reset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_reset",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_startRecorder(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_startRecorder",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->startRecorder((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPlayer_saveRecorder(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_saveRecorder",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->saveRecorder();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_getProjection(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    KProjection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_getProjection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KProjection *)(arg1)->getProjection();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KProjection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_handleKey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    KKey *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_handleKey",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KKey, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KKey");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->handleKey((KKey const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_handleKeyRelease(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    KKey *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_handleKeyRelease",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KKey, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KKey");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)(arg1)->handleKeyRelease((KKey const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_recordKeyForAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_recordKeyForAction",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->recordKeyForAction((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPlayer_getActionForKey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_getActionForKey",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = KikiPlayer::getActionForKey((std::string const &)*arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KikiPlayer_getKeyForAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_getKeyForAction",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = KikiPlayer::getKeyForAction((std::string const &)*arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KikiPlayer_setKeyForAction(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    int res1 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_setKeyForAction",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    KikiPlayer::setKeyForAction((std::string const &)*arg1,(std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPlayer_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiPlayer::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPlayer_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPlayer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiMutant(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMutant *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiMutant")) goto fail;
    result = (KikiMutant *)new KikiMutant();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMutant, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMutant_die(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMutant *arg1 = (KikiMutant *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiMutant_die",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMutant, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->die();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMutant_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMutant_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiMutant::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMutant_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMutant, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiSound_toggleMute(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSound_toggleMute",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->toggleMute();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_setMute(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSound_setMute",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setMute(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_isMute(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSound_isMute",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiSound const *)arg1)->isMute();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_setSoundVolume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSound_setSoundVolume",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setSoundVolume(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_getSoundVolume(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSound_getSoundVolume",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiSound const *)arg1)->getSoundVolume();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_playSound__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    float arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KikiSound_playSound",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->playSound(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_playSound__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    float arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiSound_playSound",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->playSound(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_playSound__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSound_playSound",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->playSound(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_playSound(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiSound, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_KikiSound_playSound__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiSound, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_KikiSound_playSound__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiSound, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_KikiSound_playSound__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiSound_playSound'");
    return NULL;
}


static PyObject *_wrap_KikiSound_playSoundAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiSound_playSoundAtPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->playSoundAtPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiSound_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiSound, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiWorld_setSize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KikiWorld_setSize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->setSize(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setSize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_setSize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setSize(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setSize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiWorld, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_KikiWorld_setSize__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiWorld, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_KikiWorld_setSize__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiWorld_setSize'");
    return NULL;
}


static PyObject *_wrap_KikiWorld_getSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiSize result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiWorld const *)arg1)->getSize();
    
    {
        KikiSize * resultptr;
        resultptr = new KikiSize((KikiSize &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiWorld_getName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getName",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiWorld const *)arg1)->getName();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_init(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_init",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->init();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setDisplayShadows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setDisplayShadows",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDisplayShadows(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setDisplayRaster(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setDisplayRaster",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDisplayRaster(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setDisplayBorder(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setDisplayBorder",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDisplayBorder(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setRasterSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setRasterSize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setRasterSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiWorld::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_changeCameraMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_changeCameraMode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->changeCameraMode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getCameraMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getCameraMode",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiWorld const *)arg1)->getCameraMode();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setCameraMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setCameraMode",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCameraMode(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getProjection(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KProjection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getProjection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KProjection *)(arg1)->getProjection();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KProjection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_addObjectAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_addObjectAtPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->addObjectAtPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setObjectAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_setObjectAtPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setObjectAtPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_unsetObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_unsetObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->unsetObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_removeObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_removeObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->removeObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_deleteObject(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_deleteObject",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    (arg1)->deleteObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_deleteAllObjects(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_deleteAllObjects",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->deleteAllObjects();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_deleteObjectsWithClassName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_deleteObjectsWithClassName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->deleteObjectsWithClassName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiWorld_getObjectWithName(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string *arg2 = 0 ;
    KikiObject *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getObjectWithName",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (KikiObject *)(arg1)->getObjectWithName((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiObject, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiWorld_moveObjectToPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_moveObjectToPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->moveObjectToPos(arg2,(KikiPos const &)*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_objectWillMoveToPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KikiWorld_objectWillMoveToPos",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->objectWillMoveToPos(arg2,(KikiPos const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_objectMovedFromPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_objectMovedFromPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->objectMovedFromPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getBotAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiBot *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getBotAtPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiBot *)((KikiWorld const *)arg1)->getBotAtPos((KikiPos const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiBot, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getOccupantAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getOccupantAtPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiObject *)((KikiWorld const *)arg1)->getOccupantAtPos((KikiPos const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getRealOccupantAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getRealOccupantAtPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiObject *)((KikiWorld const *)arg1)->getRealOccupantAtPos((KikiPos const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getNearestValidPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getNearestValidPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KikiWorld const *)arg1)->getNearestValidPos((KikiPos const &)*arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isInvalidPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isInvalidPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((KikiWorld const *)arg1)->isInvalidPos((KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isValidPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isValidPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((KikiWorld const *)arg1)->isValidPos((KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isUnoccupiedPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isUnoccupiedPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((KikiWorld const *)arg1)->isUnoccupiedPos((KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isOccupiedPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isOccupiedPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((KikiWorld const *)arg1)->isOccupiedPos((KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_posToIndex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_posToIndex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)((KikiWorld const *)arg1)->posToIndex((KikiPos const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_indexToPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_indexToPos",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((KikiWorld const *)arg1)->indexToPos(arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getPickedPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getPickedPos",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = KikiWorld_getPickedPos(arg1);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWorld_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWorld, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KEventHandler_quit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KEventHandler_quit",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KEventHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->quit();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getMouseState(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getMouseState")) goto fail;
    result = (int)KEventHandler::getMouseState();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getMousePos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KPosition result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getMousePos")) goto fail;
    result = KEventHandler::getMousePos();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->x));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->y));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getMouseDelta(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KPosition result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getMouseDelta")) goto fail;
    result = KEventHandler::getMouseDelta();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->x));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->y));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getScreenSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KSize result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getScreenSize")) goto fail;
    result = KEventHandler::getScreenSize();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->w));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->h));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setScreenSize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    bool arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KEventHandler_setScreenSize",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)KEventHandler::setScreenSize(arg1,arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setScreenSize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KEventHandler_setScreenSize",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)KEventHandler::setScreenSize(arg1,arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setScreenSize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_KEventHandler_setScreenSize__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_KEventHandler_setScreenSize__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KEventHandler_setScreenSize'");
    return NULL;
}


static PyObject *_wrap_KEventHandler_getFullscreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getFullscreen")) goto fail;
    result = (bool)KEventHandler::getFullscreen();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setFullscreen(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KEventHandler_setFullscreen",&obj0)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    KEventHandler::setFullscreen(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getTime")) goto fail;
    result = (unsigned int)KEventHandler::getTime();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setWireframeMode(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KEventHandler_setWireframeMode",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KEventHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setWireframeMode(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setDisplayFps(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KEventHandler_setDisplayFps",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KEventHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setDisplayFps(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getDisplayFps(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KEventHandler_getDisplayFps",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KEventHandler, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KEventHandler const *)arg1)->getDisplayFps();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KEventHandler_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KEventHandler, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiController_gui_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiGUI *arg2 = (KikiGUI *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_gui_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiGUI, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->gui = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_gui_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiGUI *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_gui_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiGUI *) ((arg1)->gui);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGUI, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_sound_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiSound *arg2 = (KikiSound *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_sound_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiSound, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->sound = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_sound_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiSound *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_sound_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiSound *) ((arg1)->sound);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSound, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_world_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiWorld *arg2 = (KikiWorld *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_world_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiWorld, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->world = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_world_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiWorld *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_world_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiWorld *) ((arg1)->world);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWorld, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPlayer *arg2 = (KikiPlayer *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_player_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPlayer, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->player = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPlayer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_player_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPlayer *) ((arg1)->player);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPlayer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_python_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPython *arg2 = (KikiPython *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_python_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->python = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_python_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPython *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_python_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPython *) ((arg1)->python);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPython, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_status_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiStatusDisplay *arg2 = (KikiStatusDisplay *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_player_status_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiStatusDisplay, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->player_status = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_status_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiStatusDisplay *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_player_status_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiStatusDisplay *) ((arg1)->player_status);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiStatusDisplay, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_timer_event_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiEvent *arg2 = (KikiEvent *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_timer_event_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiEvent, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->timer_event = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_timer_event_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiEvent *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_timer_event_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiEvent *) ((arg1)->timer_event);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiEvent, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getPlayer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPlayer *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getPlayer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPlayer *)(arg1)->getPlayer();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPlayer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_unmapMsTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_unmapMsTime",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->unmapMsTime(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_mapMsTime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_mapMsTime",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)(arg1)->mapMsTime(arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_setSpeed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_setSpeed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setSpeed(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getSpeed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getSpeed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiController const *)arg1)->getSpeed();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getKikiHome(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getKikiHome",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->getKikiHome();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_setGamma(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_setGamma",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setGamma(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getGamma(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getGamma",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiController const *)arg1)->getGamma();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_changeScreenSize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    int arg3 ;
    bool arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KikiController_changeScreenSize",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)(arg1)->changeScreenSize(arg2,arg3,arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_changeScreenSize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    int arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiController_changeScreenSize",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (bool)(arg1)->changeScreenSize(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_changeScreenSize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiController, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_KikiController_changeScreenSize__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiController, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_KikiController_changeScreenSize__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiController_changeScreenSize'");
    return NULL;
}


static PyObject *_wrap_KikiController_displayText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiController_displayText",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->displayText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiController_getLocalizedString(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_getLocalizedString",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (arg1)->getLocalizedString((std::string const &)*arg2);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiController_isDebugVersion(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiController *arg1 = (KikiController *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_isDebugVersion",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)(arg1)->isDebugVersion();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiController_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiController, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Controller_set(PyObject *_val) {
    {
        KikiController * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'Controller'");
            return 1;
        }
        Controller = *((KikiController *) temp);
    }
    return 0;
}


static PyObject *_wrap_Controller_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&Controller), SWIGTYPE_p_KikiController, 0);
    return pyobj;
}


static PyObject *_wrap_replaceTabs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    int arg2 ;
    char *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:replaceTabs",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (char *)replaceTabs((std::string const &)*arg1,arg2);
    
    resultobj = SWIG_FromCharPtr(result);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KWindow_isVisible(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_isVisible",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KWindow const *)arg1)->isVisible();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_setVisibility(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KWindow_setVisibility",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setVisibility(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_toggleVisibility(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_toggleVisibility",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->toggleVisibility();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_maximize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_maximize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->maximize();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_show(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_show",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->show();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_hide(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_hide",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->hide();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_close(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_close",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_setSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    KSize arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KWindow_setSize",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = KSize(PyInt_AsLong(PyTuple_GetItem(obj1, 0)), PyInt_AsLong(PyTuple_GetItem(obj1, 1)));
        if (PyErr_Occurred()) return NULL;
    }
    (arg1)->setSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_setPosition(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KWindow *arg1 = (KWindow *) 0 ;
    KPosition *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KWindow_setPosition",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KWindow, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = new KPosition(PyInt_AsLong(PyTuple_GetItem(obj1, 0)), PyInt_AsLong(PyTuple_GetItem(obj1, 1)));
        if (PyErr_Occurred()) return NULL;
    }
    (arg1)->setPosition((KPosition const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (arg2) delete arg2;
    }
    return NULL;
}


static PyObject * KWindow_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KWindow, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    bool arg2 ;
    int arg3 ;
    KikiText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiText",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KikiText *)new KikiText((std::string const &)*arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    bool arg2 ;
    KikiText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiText",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiText *)new KikiText((std::string const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiText__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    KikiText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiText",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (KikiText *)new KikiText((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiText__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiText")) goto fail;
    result = (KikiText *)new KikiText();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiText, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiText__SWIG_3(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_KikiText__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_KikiText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_KikiText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiText'");
    return NULL;
}


static PyObject *_wrap_KikiText_setText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiText_setText",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiText_setText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setText((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiText_setText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_KikiText_setText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_KikiText_setText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiText_setText'");
    return NULL;
}


static PyObject *_wrap_KikiText_getText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getText",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string const &_result_ref = ((KikiText const *)arg1)->getText();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = SWIG_From_std_string((std::string)(*result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_isEmpty(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_isEmpty",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiText const *)arg1)->isEmpty();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_addText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *arg2 = 0 ;
    float arg3 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiText_addText",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->addText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiText_addText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_addText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->addText((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiText_addText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_KikiText_addText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_KikiText_addText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiText_addText'");
    return NULL;
}


static PyObject *_wrap_KikiText_getColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    KColor *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getColor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        KColor const &_result_ref = ((KikiText const *)arg1)->getColor();
        result = (KColor *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KColor, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setColor",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setColor((KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setAlpha(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setAlpha",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setAlpha(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_isAnimated(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_isAnimated",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiText const *)arg1)->isAnimated();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setAnimated(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setAnimated",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setAnimated(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_isCentered(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_isCentered",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiText const *)arg1)->isCentered();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setCentered(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setCentered",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCentered(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_getWidth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getWidth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KikiText const *)arg1)->getWidth();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_getHeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiText *arg1 = (KikiText *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getHeight",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KikiText const *)arg1)->getHeight();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiText::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiText_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * KikiGUI_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGUI, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiScreenText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiScreenText")) goto fail;
    result = (KikiScreenText *)new KikiScreenText();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiScreenText, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScreenText_addText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    std::string *arg2 = 0 ;
    float arg3 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiScreenText_addText",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScreenText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->addText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScreenText_addText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiScreenText_addText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScreenText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->addText((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScreenText_addText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScreenText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_KikiScreenText_addText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScreenText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_KikiScreenText_addText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiScreenText_addText'");
    return NULL;
}


static PyObject *_wrap_KikiScreenText_setText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiScreenText_setText",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScreenText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScreenText_setText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiScreenText_setText",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScreenText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setText((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScreenText_setText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScreenText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_KikiScreenText_setText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScreenText, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_KikiScreenText_setText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiScreenText_setText'");
    return NULL;
}


static PyObject *_wrap_KikiScreenText_show(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiScreenText_show",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScreenText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->show();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScreenText_getProjection(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    KProjection *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiScreenText_getProjection",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScreenText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KProjection *)(arg1)->getProjection();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KProjection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiScreenText_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiScreenText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiMenu__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiMenu *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiMenu",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiMenu *)new KikiMenu(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMenu__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiMenu")) goto fail;
    result = (KikiMenu *)new KikiMenu();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMenu(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiMenu__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiMenu__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiMenu'");
    return NULL;
}


static PyObject *_wrap_KikiMenu_addItem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *arg3 = (KikiAction *) 0 ;
    bool arg4 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KikiMenu_addItem",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->addItem((std::string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiMenu_addItem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *arg3 = (KikiAction *) 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiMenu_addItem",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->addItem((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiMenu_addItem__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMenu_addItem",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->addItem((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiMenu_addItem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_KikiMenu_addItem__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_KikiAction, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_KikiMenu_addItem__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_KikiAction, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_KikiMenu_addItem__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiMenu_addItem'");
    return NULL;
}


static PyObject *_wrap_KikiMenu_setCurrentIndex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMenu_setCurrentIndex",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setCurrentIndex(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMenu_setEscapeActive__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMenu_setEscapeActive",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setEscapeActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMenu_setEscapeActive__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiMenu_setEscapeActive",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setEscapeActive();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMenu_setEscapeActive(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_KikiMenu_setEscapeActive__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_KikiMenu_setEscapeActive__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiMenu_setEscapeActive'");
    return NULL;
}


static PyObject *_wrap_KikiMenu_circular_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMenu_circular_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    if (arg1) (arg1)->circular = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMenu_circular_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiMenu_circular_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool) ((arg1)->circular);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMenu_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMenu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiColumnMenu__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    KikiColumnMenu *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiColumnMenu",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiColumnMenu *)new KikiColumnMenu(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiColumnMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiColumnMenu__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiColumnMenu *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiColumnMenu",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiColumnMenu *)new KikiColumnMenu(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiColumnMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiColumnMenu__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiColumnMenu *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiColumnMenu")) goto fail;
    result = (KikiColumnMenu *)new KikiColumnMenu();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiColumnMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiColumnMenu(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiColumnMenu__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiColumnMenu__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_KikiColumnMenu__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiColumnMenu'");
    return NULL;
}


static PyObject * KikiColumnMenu_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiColumnMenu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiScrollMenu__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    int arg3 ;
    KikiScrollMenu *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiScrollMenu",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KikiScrollMenu *)new KikiScrollMenu(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiScrollMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiScrollMenu__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    KikiScrollMenu *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiScrollMenu",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiScrollMenu *)new KikiScrollMenu(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiScrollMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiScrollMenu__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiScrollMenu *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiScrollMenu",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiScrollMenu *)new KikiScrollMenu(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiScrollMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiScrollMenu__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScrollMenu *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiScrollMenu")) goto fail;
    result = (KikiScrollMenu *)new KikiScrollMenu();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiScrollMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiScrollMenu(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiScrollMenu__SWIG_3(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiScrollMenu__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_KikiScrollMenu__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_KikiScrollMenu__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiScrollMenu'");
    return NULL;
}


static PyObject *_wrap_KikiScrollMenu_getCurrentIndex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScrollMenu *arg1 = (KikiScrollMenu *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiScrollMenu_getCurrentIndex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScrollMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)(arg1)->getCurrentIndex();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScrollMenu_addItem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScrollMenu *arg1 = (KikiScrollMenu *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *arg3 = (KikiAction *) 0 ;
    bool arg4 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:KikiScrollMenu_addItem",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScrollMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    (arg1)->addItem((std::string const &)*arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScrollMenu_addItem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScrollMenu *arg1 = (KikiScrollMenu *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *arg3 = (KikiAction *) 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiScrollMenu_addItem",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScrollMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiAction, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    (arg1)->addItem((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScrollMenu_addItem__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiScrollMenu *arg1 = (KikiScrollMenu *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiScrollMenu_addItem",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiScrollMenu, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->addItem((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiScrollMenu_addItem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScrollMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_KikiScrollMenu_addItem__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScrollMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_KikiAction, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_KikiScrollMenu_addItem__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiScrollMenu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_KikiAction, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_KikiScrollMenu_addItem__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiScrollMenu_addItem'");
    return NULL;
}


static PyObject * KikiScrollMenu_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiScrollMenu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiPageText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    bool arg2 ;
    bool arg3 ;
    KikiPageText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiPageText",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KikiPageText *)new KikiPageText((std::string const &)*arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPageText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiPageText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    bool arg2 ;
    KikiPageText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiPageText",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiPageText *)new KikiPageText((std::string const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPageText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiPageText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_KikiPageText__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_KikiPageText__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiPageText'");
    return NULL;
}


static PyObject * KikiPageText_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPageText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * KikiFace_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiFace, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiWire__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    int arg2 ;
    KikiWire *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiWire",&obj0,&obj1)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiWire *)new KikiWire(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWire, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWire__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiWire *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiWire",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiWire *)new KikiWire(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWire, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWire__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWire *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiWire")) goto fail;
    result = (KikiWire *)new KikiWire();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWire, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWire(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiWire__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiWire__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_new_KikiWire__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiWire'");
    return NULL;
}


static PyObject *_wrap_KikiWire_setActive__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWire *arg1 = (KikiWire *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWire_setActive",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWire, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWire_setActive__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWire *arg1 = (KikiWire *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWire_setActive",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiWire, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setActive();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWire_setActive(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiWire, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_KikiWire_setActive__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiWire, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_KikiWire_setActive__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiWire_setActive'");
    return NULL;
}


static PyObject *_wrap_KikiWire_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWire_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiWire::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWire_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWire, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToWire(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiWire *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToWire",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiWire *)kikiObjectToWire(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWire, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGear__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiGear *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiGear",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiGear *)new KikiGear(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGear, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGear__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiGear *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiGear")) goto fail;
    result = (KikiGear *)new KikiGear();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGear, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGear(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiGear__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiGear__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiGear'");
    return NULL;
}


static PyObject *_wrap_KikiGear_setActive__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiGear *arg1 = (KikiGear *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiGear_setActive",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiGear, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGear_setActive__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiGear *arg1 = (KikiGear *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiGear_setActive",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiGear, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->setActive();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGear_setActive(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiGear, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_KikiGear_setActive__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KikiGear, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_KikiGear_setActive__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KikiGear_setActive'");
    return NULL;
}


static PyObject *_wrap_KikiGear_updateActive(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiGear *arg1 = (KikiGear *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiGear_updateActive",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiGear, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->updateActive();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGear_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiGear_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiGear::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiGear_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGear, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToGear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiGear *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToGear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiGear *)kikiObjectToGear(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGear, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiValve *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiValve",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiValve *)new KikiValve(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValve, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiValve *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiValve")) goto fail;
    result = (KikiValve *)new KikiValve();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValve, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiValve__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiValve__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiValve'");
    return NULL;
}


static PyObject *_wrap_KikiValve_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiValve_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiValve::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiValve_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiValve, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToValve(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiValve *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToValve",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiValve *)kikiObjectToValve(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValve, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMotorCylinder__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiMotorCylinder *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiMotorCylinder",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiMotorCylinder *)new KikiMotorCylinder(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMotorCylinder, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMotorCylinder__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMotorCylinder *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiMotorCylinder")) goto fail;
    result = (KikiMotorCylinder *)new KikiMotorCylinder();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMotorCylinder, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMotorCylinder(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiMotorCylinder__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiMotorCylinder__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiMotorCylinder'");
    return NULL;
}


static PyObject *_wrap_KikiMotorCylinder_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMotorCylinder_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiMotorCylinder::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMotorCylinder_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMotorCylinder, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiMotorGear__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiMotorGear *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiMotorGear",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiMotorGear *)new KikiMotorGear(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMotorGear, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMotorGear__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiMotorGear *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiMotorGear")) goto fail;
    result = (KikiMotorGear *)new KikiMotorGear();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiMotorGear, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMotorGear(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiMotorGear__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiMotorGear__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiMotorGear'");
    return NULL;
}


static PyObject *_wrap_KikiMotorGear_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMotorGear_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiMotorGear::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMotorGear_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMotorGear, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiGenerator__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiGenerator *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiGenerator",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiGenerator *)new KikiGenerator(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGenerator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGenerator__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiGenerator *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiGenerator")) goto fail;
    result = (KikiGenerator *)new KikiGenerator();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGenerator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGenerator(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiGenerator__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiGenerator__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiGenerator'");
    return NULL;
}


static PyObject *_wrap_KikiGenerator_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiGenerator_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiGenerator::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiGenerator_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGenerator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiLight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiLight *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiLight")) goto fail;
    result = (KikiLight *)new KikiLight();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiLight, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiLight_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiLight_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiLight::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiLight_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiLight, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToLight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiLight *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToLight",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiLight *)kikiObjectToLight(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiLight, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiCellText__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    float arg2 ;
    bool arg3 ;
    int arg4 ;
    KikiCellText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KikiCellText",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KikiCellText *)new KikiCellText((std::string const &)*arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiCellText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiCellText__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    float arg2 ;
    bool arg3 ;
    KikiCellText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiCellText",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KikiCellText *)new KikiCellText((std::string const &)*arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiCellText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiCellText__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    float arg2 ;
    KikiCellText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiCellText",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiCellText *)new KikiCellText((std::string const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiCellText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiCellText__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    KikiCellText *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiCellText",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (KikiCellText *)new KikiCellText((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiCellText, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_KikiCellText(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_KikiCellText__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_new_KikiCellText__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_KikiCellText__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_KikiCellText__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiCellText'");
    return NULL;
}


static PyObject *_wrap_KikiCellText_setOffset(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiCellText *arg1 = (KikiCellText *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiCellText_setOffset",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiCellText, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KVector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KVector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setOffset((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiCellText_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiCellText_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiCellText::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiCellText_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiCellText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToCellText(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiCellText *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToCellText",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiCellText *)kikiObjectToCellText(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiCellText, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiStone__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    bool arg2 ;
    KikiStone *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiStone",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiStone *)new KikiStone(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiStone, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiStone__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KColor *arg1 = (KColor *) 0 ;
    KikiStone *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiStone",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiStone *)new KikiStone(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiStone, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiStone__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiStone *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiStone")) goto fail;
    result = (KikiStone *)new KikiStone();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiStone, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiStone(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiStone__SWIG_2(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KColor, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KikiStone__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_KColor, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_new_KikiStone__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiStone'");
    return NULL;
}


static PyObject *_wrap_KikiStone_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiStone_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiStone::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiStone_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiStone, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToStone(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiStone *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToStone",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiStone *)kikiObjectToStone(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiStone, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWireStone(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWireStone *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiWireStone")) goto fail;
    result = (KikiWireStone *)new KikiWireStone();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWireStone, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWireStone_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWireStone_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiWireStone::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWireStone_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWireStone, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToWireStone(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiWireStone *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToWireStone",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiWireStone *)kikiObjectToWireStone(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWireStone, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWall(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiWall *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiWall")) goto fail;
    result = (KikiWall *)new KikiWall();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWall, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWall_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWall_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiWall::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWall_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWall, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToWall(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiWall *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToWall",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiWall *)kikiObjectToWall(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiWall, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiBomb(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiBomb *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiBomb")) goto fail;
    result = (KikiBomb *)new KikiBomb();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiBomb, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBomb_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBomb_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiBomb::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBomb_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBomb, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToBomb(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiBomb *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToBomb",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiBomb *)kikiObjectToBomb(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiBomb, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiSwitch__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    KikiSwitch *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiSwitch",&obj0)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiSwitch *)new KikiSwitch(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSwitch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiSwitch__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSwitch *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiSwitch")) goto fail;
    result = (KikiSwitch *)new KikiSwitch();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSwitch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiSwitch(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiSwitch__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_bool(argv[0]);
        if (_v) {
            return _wrap_new_KikiSwitch__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiSwitch'");
    return NULL;
}


static PyObject *_wrap_KikiSwitch_toggle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSwitch *arg1 = (KikiSwitch *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSwitch_toggle",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSwitch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->toggle();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_setActive(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSwitch *arg1 = (KikiSwitch *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSwitch_setActive",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSwitch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_isActive(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSwitch *arg1 = (KikiSwitch *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSwitch_isActive",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiSwitch, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((KikiSwitch const *)arg1)->isActive();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSwitch_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiSwitch::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiSwitch_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiSwitch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToSwitch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiSwitch *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToSwitch",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiSwitch *)kikiObjectToSwitch(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSwitch, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGate__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    KikiGate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiGate",&obj0)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiGate *)new KikiGate(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGate__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiGate *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiGate")) goto fail;
    result = (KikiGate *)new KikiGate();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiGate__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_bool(argv[0]);
        if (_v) {
            return _wrap_new_KikiGate__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiGate'");
    return NULL;
}


static PyObject *_wrap_KikiGate_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiGate_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiGate::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiGate_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToGate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiGate *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToGate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiGate *)kikiObjectToGate(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiGate, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAtom_setValue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAtom *arg1 = (KikiAtom *) 0 ;
    float arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiAtom_setValue",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->setValue(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAtom_getValue(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiAtom *arg1 = (KikiAtom *) 0 ;
    float result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAtom_getValue",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiAtom, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (float)((KikiAtom const *)arg1)->getValue();
    
    {
        resultobj = SWIG_From_float((float)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiAtom_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiMovesAtom_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiMovesAtom_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiMovesAtom::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMovesAtom_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMovesAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiValueAtom__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    int arg4 ;
    KikiValueAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_KikiValueAtom",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (int)(SWIG_As_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (KikiValueAtom *)new KikiValueAtom(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValueAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValueAtom__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    KikiValueAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_KikiValueAtom",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (float)(SWIG_As_float(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (KikiValueAtom *)new KikiValueAtom(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValueAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValueAtom__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    float arg2 ;
    KikiValueAtom *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiValueAtom",&obj0,&obj1)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (float)(SWIG_As_float(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (KikiValueAtom *)new KikiValueAtom(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValueAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValueAtom__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    float arg1 ;
    KikiValueAtom *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiValueAtom",&obj0)) goto fail;
    {
        arg1 = (float)(SWIG_As_float(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiValueAtom *)new KikiValueAtom(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValueAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValueAtom__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiValueAtom *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiValueAtom")) goto fail;
    result = (KikiValueAtom *)new KikiValueAtom();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiValueAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValueAtom(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiValueAtom__SWIG_4(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            return _wrap_new_KikiValueAtom__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_new_KikiValueAtom__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    return _wrap_new_KikiValueAtom__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_float(argv[0]);
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                _v = SWIG_Check_float(argv[2]);
                if (_v) {
                    _v = SWIG_Check_int(argv[3]);
                    if (_v) {
                        return _wrap_new_KikiValueAtom__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiValueAtom'");
    return NULL;
}


static PyObject *_wrap_KikiValueAtom_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiValueAtom_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiValueAtom::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiValueAtom_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiValueAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiSpikes__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    KikiSpikes *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiSpikes",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (KikiSpikes *)new KikiSpikes(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSpikes, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiSpikes__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiSpikes *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiSpikes")) goto fail;
    result = (KikiSpikes *)new KikiSpikes();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSpikes, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiSpikes(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiSpikes__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_KikiSpikes__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_KikiSpikes'");
    return NULL;
}


static PyObject *_wrap_KikiSpikes_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSpikes_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiSpikes::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiSpikes_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiSpikes, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToSpikes(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiSpikes *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToSpikes",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiObject, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiSpikes *)kikiObjectToSpikes(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiSpikes, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBullet_setObjectColor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBullet_setObjectColor",&obj0,&obj1)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KColor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("KColor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KikiBullet::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBullet_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBullet, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KConsole__print(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole__print",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    KConsole::print((std::string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KConsole_write(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole_write",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    KConsole::write((std::string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KConsole_printError__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    bool arg2 ;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KConsole_printError",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    KConsole::printError((std::string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KConsole_printError__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole_printError",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    KConsole::printError((std::string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_KConsole_printError(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_KConsole_printError__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_KConsole_printError__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'KConsole_printError'");
    return NULL;
}


static PyObject *_wrap_KConsole_getConsole(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KConsole *result;
    
    if(!PyArg_ParseTuple(args,(char *)":KConsole_getConsole")) goto fail;
    result = (KConsole *)KConsole::getConsole();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KConsole, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KConsole_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KConsole *arg1 = (KConsole *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KConsole, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KConsole_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KConsole, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPythonWidget_cursorPos_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *arg2 = (KikiPos *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPythonWidget_cursorPos_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->cursorPos = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_cursorPos_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_cursorPos_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPos *)& ((arg1)->cursorPos);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_selectionPos_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *arg2 = (KikiPos *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPythonWidget_selectionPos_set",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(2)) SWIG_fail;
    if (arg1) (arg1)->selectionPos = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_selectionPos_get(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_selectionPos_get",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPos *)& ((arg1)->selectionPos);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPos, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getTextRows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getTextRows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getTextRows();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getTextCols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getTextCols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getTextCols();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getTextSize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KSize result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getTextSize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((KikiPythonWidget const *)arg1)->getTextSize();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->w));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->h));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getColumnWidth(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getColumnWidth",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getColumnWidth();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getRowHeight(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getRowHeight",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getRowHeight();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getPythonWindow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPython *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getPythonWindow",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPython *)((KikiPythonWidget const *)arg1)->getPythonWindow();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPython, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_displayStringAtPos(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    std::string *arg2 = 0 ;
    KikiPos *arg3 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiPythonWidget_displayStringAtPos",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPythonWidget, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_KikiPos, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("KikiPos");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->displayStringAtPos((std::string const &)*arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject * KikiPythonWidget_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPythonWidget, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPython_getPythonWidget(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    KikiPythonWidget *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPython_getPythonWidget",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (KikiPythonWidget *)(arg1)->getPythonWidget();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_KikiPythonWidget, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_setScrollBarUnits(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiPython_setScrollBarUnits",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->setScrollBarUnits(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_requestUserInput(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_requestUserInput",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->requestUserInput((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPython_setTitle(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_setTitle",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setTitle((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPython_setStatus(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_setStatus",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setStatus((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPython_setInput(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_setInput",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->setInput((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_KikiPython_executeFile(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_executeFile",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_KikiPython, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    (arg1)->executeFile((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject * KikiPython_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPython, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"KikiPos_x_set", _wrap_KikiPos_x_set, METH_VARARGS, NULL},
	 { (char *)"KikiPos_x_get", _wrap_KikiPos_x_get, METH_VARARGS, NULL},
	 { (char *)"KikiPos_y_set", _wrap_KikiPos_y_set, METH_VARARGS, NULL},
	 { (char *)"KikiPos_y_get", _wrap_KikiPos_y_get, METH_VARARGS, NULL},
	 { (char *)"KikiPos_z_set", _wrap_KikiPos_z_set, METH_VARARGS, NULL},
	 { (char *)"KikiPos_z_get", _wrap_KikiPos_z_get, METH_VARARGS, NULL},
	 { (char *)"new_KikiPos", _wrap_new_KikiPos, METH_VARARGS, NULL},
	 { (char *)"KikiPos___sub__", _wrap_KikiPos___sub__, METH_VARARGS, NULL},
	 { (char *)"KikiPos___add__", _wrap_KikiPos___add__, METH_VARARGS, NULL},
	 { (char *)"KikiPos___iadd__", _wrap_KikiPos___iadd__, METH_VARARGS, NULL},
	 { (char *)"KikiPos___isub__", _wrap_KikiPos___isub__, METH_VARARGS, NULL},
	 { (char *)"KikiPos_getString", _wrap_KikiPos_getString, METH_VARARGS, NULL},
	 { (char *)"KikiPos___eq__", _wrap_KikiPos___eq__, METH_VARARGS, NULL},
	 { (char *)"KikiPos___ne__", _wrap_KikiPos___ne__, METH_VARARGS, NULL},
	 { (char *)"KikiPos___str__", _wrap_KikiPos___str__, METH_VARARGS, NULL},
	 { (char *)"delete_KikiPos", _wrap_delete_KikiPos, METH_VARARGS, NULL},
	 { (char *)"KikiPos_swigregister", KikiPos_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KVector", _wrap_new_KVector, METH_VARARGS, NULL},
	 { (char *)"KVector_reset", _wrap_KVector_reset, METH_VARARGS, NULL},
	 { (char *)"KVector_normalize", _wrap_KVector_normalize, METH_VARARGS, NULL},
	 { (char *)"KVector___iadd__", _wrap_KVector___iadd__, METH_VARARGS, NULL},
	 { (char *)"KVector___isub__", _wrap_KVector___isub__, METH_VARARGS, NULL},
	 { (char *)"KVector___imul__", _wrap_KVector___imul__, METH_VARARGS, NULL},
	 { (char *)"KVector___idiv__", _wrap_KVector___idiv__, METH_VARARGS, NULL},
	 { (char *)"KVector_cross", _wrap_KVector_cross, METH_VARARGS, NULL},
	 { (char *)"KVector___sub__", _wrap_KVector___sub__, METH_VARARGS, NULL},
	 { (char *)"KVector___add__", _wrap_KVector___add__, METH_VARARGS, NULL},
	 { (char *)"KVector___mul__", _wrap_KVector___mul__, METH_VARARGS, NULL},
	 { (char *)"KVector___div__", _wrap_KVector___div__, METH_VARARGS, NULL},
	 { (char *)"KVector_perpendicular", _wrap_KVector_perpendicular, METH_VARARGS, NULL},
	 { (char *)"KVector_parallel", _wrap_KVector_parallel, METH_VARARGS, NULL},
	 { (char *)"KVector_reflect", _wrap_KVector_reflect, METH_VARARGS, NULL},
	 { (char *)"KVector_normal", _wrap_KVector_normal, METH_VARARGS, NULL},
	 { (char *)"KVector_length", _wrap_KVector_length, METH_VARARGS, NULL},
	 { (char *)"KVector_angle", _wrap_KVector_angle, METH_VARARGS, NULL},
	 { (char *)"KVector_xyangle", _wrap_KVector_xyangle, METH_VARARGS, NULL},
	 { (char *)"KVector_xyperp", _wrap_KVector_xyperp, METH_VARARGS, NULL},
	 { (char *)"KVector_round", _wrap_KVector_round, METH_VARARGS, NULL},
	 { (char *)"KVector_glVertex", _wrap_KVector_glVertex, METH_VARARGS, NULL},
	 { (char *)"KVector___getitem__", _wrap_KVector___getitem__, METH_VARARGS, NULL},
	 { (char *)"KVector___str__", _wrap_KVector___str__, METH_VARARGS, NULL},
	 { (char *)"delete_KVector", _wrap_delete_KVector, METH_VARARGS, NULL},
	 { (char *)"KVector_swigregister", KVector_swigregister, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_w_set", _wrap_KQuaternion_w_set, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_w_get", _wrap_KQuaternion_w_get, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_x_set", _wrap_KQuaternion_x_set, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_x_get", _wrap_KQuaternion_x_get, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_y_set", _wrap_KQuaternion_y_set, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_y_get", _wrap_KQuaternion_y_get, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_z_set", _wrap_KQuaternion_z_set, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_z_get", _wrap_KQuaternion_z_get, METH_VARARGS, NULL},
	 { (char *)"new_KQuaternion", _wrap_new_KQuaternion, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_rotationAroundVector", _wrap_KQuaternion_rotationAroundVector, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_rotate", _wrap_KQuaternion_rotate, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_normalize", _wrap_KQuaternion_normalize, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_invert", _wrap_KQuaternion_invert, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_conjugate", _wrap_KQuaternion_conjugate, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_getNormal", _wrap_KQuaternion_getNormal, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_getConjugate", _wrap_KQuaternion_getConjugate, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_getInverse", _wrap_KQuaternion_getInverse, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_length", _wrap_KQuaternion_length, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_glRotate", _wrap_KQuaternion_glRotate, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_slerp", _wrap_KQuaternion_slerp, METH_VARARGS, NULL},
	 { (char *)"KQuaternion___mul__", _wrap_KQuaternion___mul__, METH_VARARGS, NULL},
	 { (char *)"KQuaternion___str__", _wrap_KQuaternion___str__, METH_VARARGS, NULL},
	 { (char *)"delete_KQuaternion", _wrap_delete_KQuaternion, METH_VARARGS, NULL},
	 { (char *)"KQuaternion_swigregister", KQuaternion_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KColor", _wrap_new_KColor, METH_VARARGS, NULL},
	 { (char *)"KColor_setValues", _wrap_KColor_setValues, METH_VARARGS, NULL},
	 { (char *)"KColor_setRed", _wrap_KColor_setRed, METH_VARARGS, NULL},
	 { (char *)"KColor_setGreen", _wrap_KColor_setGreen, METH_VARARGS, NULL},
	 { (char *)"KColor_setBlue", _wrap_KColor_setBlue, METH_VARARGS, NULL},
	 { (char *)"KColor_setAlpha", _wrap_KColor_setAlpha, METH_VARARGS, NULL},
	 { (char *)"KColor_getRed", _wrap_KColor_getRed, METH_VARARGS, NULL},
	 { (char *)"KColor_getGreen", _wrap_KColor_getGreen, METH_VARARGS, NULL},
	 { (char *)"KColor_getBlue", _wrap_KColor_getBlue, METH_VARARGS, NULL},
	 { (char *)"KColor_getAlpha", _wrap_KColor_getAlpha, METH_VARARGS, NULL},
	 { (char *)"KColor_glColor", _wrap_KColor_glColor, METH_VARARGS, NULL},
	 { (char *)"KColor___str__", _wrap_KColor___str__, METH_VARARGS, NULL},
	 { (char *)"delete_KColor", _wrap_delete_KColor, METH_VARARGS, NULL},
	 { (char *)"KColor_swigregister", KColor_swigregister, METH_VARARGS, NULL},
	 { (char *)"KProjection_focusOn", _wrap_KProjection_focusOn, METH_VARARGS, NULL},
	 { (char *)"KProjection_setFov", _wrap_KProjection_setFov, METH_VARARGS, NULL},
	 { (char *)"KProjection_getFov", _wrap_KProjection_getFov, METH_VARARGS, NULL},
	 { (char *)"KProjection_setViewport", _wrap_KProjection_setViewport, METH_VARARGS, NULL},
	 { (char *)"KProjection_setPosition", _wrap_KProjection_setPosition, METH_VARARGS, NULL},
	 { (char *)"KProjection_swigregister", KProjection_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KKey", _wrap_new_KKey, METH_VARARGS, NULL},
	 { (char *)"KKey_name_set", _wrap_KKey_name_set, METH_VARARGS, NULL},
	 { (char *)"KKey_name_get", _wrap_KKey_name_get, METH_VARARGS, NULL},
	 { (char *)"KKey_getUnmodifiedName", _wrap_KKey_getUnmodifiedName, METH_VARARGS, NULL},
	 { (char *)"KKey_getModifierName", _wrap_KKey_getModifierName, METH_VARARGS, NULL},
	 { (char *)"KKey_swigregister", KKey_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiAction", _wrap_new_KikiAction, METH_VARARGS, NULL},
	 { (char *)"KikiAction_getId", _wrap_KikiAction_getId, METH_VARARGS, NULL},
	 { (char *)"KikiAction_getName", _wrap_KikiAction_getName, METH_VARARGS, NULL},
	 { (char *)"KikiAction_getRelativeTime", _wrap_KikiAction_getRelativeTime, METH_VARARGS, NULL},
	 { (char *)"KikiAction_getRelativeDelta", _wrap_KikiAction_getRelativeDelta, METH_VARARGS, NULL},
	 { (char *)"KikiAction_getDuration", _wrap_KikiAction_getDuration, METH_VARARGS, NULL},
	 { (char *)"KikiAction_setDuration", _wrap_KikiAction_setDuration, METH_VARARGS, NULL},
	 { (char *)"KikiAction_swigregister", KikiAction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiPyAction", _wrap_new_KikiPyAction, METH_VARARGS, NULL},
	 { (char *)"delete_KikiPyAction", _wrap_delete_KikiPyAction, METH_VARARGS, NULL},
	 { (char *)"KikiPyAction_swigregister", KikiPyAction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiEvent", _wrap_new_KikiEvent, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_addAction", _wrap_KikiEvent_addAction, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_removeAction", _wrap_KikiEvent_removeAction, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_removeAllActions", _wrap_KikiEvent_removeAllActions, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_removeActionsOfObject", _wrap_KikiEvent_removeActionsOfObject, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_removeActionWithName", _wrap_KikiEvent_removeActionWithName, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_triggerActions", _wrap_KikiEvent_triggerActions, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_getTime", _wrap_KikiEvent_getTime, METH_VARARGS, NULL},
	 { (char *)"KikiEvent_swigregister", KikiEvent_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_addAction", _wrap_KikiActionObject_addAction, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_removeAction", _wrap_KikiActionObject_removeAction, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_startTimedAction", _wrap_KikiActionObject_startTimedAction, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_startTimer", _wrap_KikiActionObject_startTimer, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_getActionWithName", _wrap_KikiActionObject_getActionWithName, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_getActionWithId", _wrap_KikiActionObject_getActionWithId, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_addEventWithName", _wrap_KikiActionObject_addEventWithName, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_getEventWithName", _wrap_KikiActionObject_getEventWithName, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_getEventWithId", _wrap_KikiActionObject_getEventWithId, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_getClassName", _wrap_KikiActionObject_getClassName, METH_VARARGS, NULL},
	 { (char *)"KikiActionObject_swigregister", KikiActionObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiObject_setName", _wrap_KikiObject_setName, METH_VARARGS, NULL},
	 { (char *)"KikiObject_getName", _wrap_KikiObject_getName, METH_VARARGS, NULL},
	 { (char *)"KikiObject_getPos", _wrap_KikiObject_getPos, METH_VARARGS, NULL},
	 { (char *)"KikiObject_setPosition", _wrap_KikiObject_setPosition, METH_VARARGS, NULL},
	 { (char *)"KikiObject_getPosition", _wrap_KikiObject_getPosition, METH_VARARGS, NULL},
	 { (char *)"KikiObject_setOrientation", _wrap_KikiObject_setOrientation, METH_VARARGS, NULL},
	 { (char *)"KikiObject_getOrientation", _wrap_KikiObject_getOrientation, METH_VARARGS, NULL},
	 { (char *)"KikiObject_setCurrentOrientation", _wrap_KikiObject_setCurrentOrientation, METH_VARARGS, NULL},
	 { (char *)"KikiObject_getCurrentOrientation", _wrap_KikiObject_getCurrentOrientation, METH_VARARGS, NULL},
	 { (char *)"KikiObject_isSpaceEgoistic", _wrap_KikiObject_isSpaceEgoistic, METH_VARARGS, NULL},
	 { (char *)"KikiObject_getClassName", _wrap_KikiObject_getClassName, METH_VARARGS, NULL},
	 { (char *)"KikiObject_swigregister", KikiObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiBotStatus_getMoves", _wrap_KikiBotStatus_getMoves, METH_VARARGS, NULL},
	 { (char *)"KikiBotStatus_setMoves", _wrap_KikiBotStatus_setMoves, METH_VARARGS, NULL},
	 { (char *)"KikiBotStatus_addMoves", _wrap_KikiBotStatus_addMoves, METH_VARARGS, NULL},
	 { (char *)"KikiBotStatus_getMinMoves", _wrap_KikiBotStatus_getMinMoves, METH_VARARGS, NULL},
	 { (char *)"KikiBotStatus_setMinMoves", _wrap_KikiBotStatus_setMinMoves, METH_VARARGS, NULL},
	 { (char *)"KikiBotStatus_swigregister", KikiBotStatus_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiBotFume_setObjectColor", _wrap_KikiBotFume_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiBotFume_swigregister", KikiBotFume_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiBot_isDead", _wrap_KikiBot_isDead, METH_VARARGS, NULL},
	 { (char *)"KikiBot_getDown", _wrap_KikiBot_getDown, METH_VARARGS, NULL},
	 { (char *)"KikiBot_getUp", _wrap_KikiBot_getUp, METH_VARARGS, NULL},
	 { (char *)"KikiBot_getDir", _wrap_KikiBot_getDir, METH_VARARGS, NULL},
	 { (char *)"KikiBot_setMove", _wrap_KikiBot_setMove, METH_VARARGS, NULL},
	 { (char *)"KikiBot_getStatus", _wrap_KikiBot_getStatus, METH_VARARGS, NULL},
	 { (char *)"KikiBot_swigregister", KikiBot_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiStatusDisplay_show", _wrap_KikiStatusDisplay_show, METH_VARARGS, NULL},
	 { (char *)"KikiStatusDisplay_hide", _wrap_KikiStatusDisplay_hide, METH_VARARGS, NULL},
	 { (char *)"KikiStatusDisplay_swigregister", KikiStatusDisplay_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiPlayback_start", _wrap_KikiPlayback_start, METH_VARARGS, NULL},
	 { (char *)"KikiPlayback_stop", _wrap_KikiPlayback_stop, METH_VARARGS, NULL},
	 { (char *)"KikiPlayback_swigregister", KikiPlayback_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_die", _wrap_KikiPlayer_die, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_reborn", _wrap_KikiPlayer_reborn, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_reset", _wrap_KikiPlayer_reset, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_startRecorder", _wrap_KikiPlayer_startRecorder, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_saveRecorder", _wrap_KikiPlayer_saveRecorder, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_getProjection", _wrap_KikiPlayer_getProjection, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_handleKey", _wrap_KikiPlayer_handleKey, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_handleKeyRelease", _wrap_KikiPlayer_handleKeyRelease, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_recordKeyForAction", _wrap_KikiPlayer_recordKeyForAction, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_getActionForKey", _wrap_KikiPlayer_getActionForKey, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_getKeyForAction", _wrap_KikiPlayer_getKeyForAction, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_setKeyForAction", _wrap_KikiPlayer_setKeyForAction, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_setObjectColor", _wrap_KikiPlayer_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiPlayer_swigregister", KikiPlayer_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiMutant", _wrap_new_KikiMutant, METH_VARARGS, NULL},
	 { (char *)"KikiMutant_die", _wrap_KikiMutant_die, METH_VARARGS, NULL},
	 { (char *)"KikiMutant_setObjectColor", _wrap_KikiMutant_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiMutant_swigregister", KikiMutant_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiSound_toggleMute", _wrap_KikiSound_toggleMute, METH_VARARGS, NULL},
	 { (char *)"KikiSound_setMute", _wrap_KikiSound_setMute, METH_VARARGS, NULL},
	 { (char *)"KikiSound_isMute", _wrap_KikiSound_isMute, METH_VARARGS, NULL},
	 { (char *)"KikiSound_setSoundVolume", _wrap_KikiSound_setSoundVolume, METH_VARARGS, NULL},
	 { (char *)"KikiSound_getSoundVolume", _wrap_KikiSound_getSoundVolume, METH_VARARGS, NULL},
	 { (char *)"KikiSound_playSound", _wrap_KikiSound_playSound, METH_VARARGS, NULL},
	 { (char *)"KikiSound_playSoundAtPos", _wrap_KikiSound_playSoundAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiSound_swigregister", KikiSound_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setSize", _wrap_KikiWorld_setSize, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getSize", _wrap_KikiWorld_getSize, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setName", _wrap_KikiWorld_setName, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getName", _wrap_KikiWorld_getName, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_init", _wrap_KikiWorld_init, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setDisplayShadows", _wrap_KikiWorld_setDisplayShadows, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setDisplayRaster", _wrap_KikiWorld_setDisplayRaster, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setDisplayBorder", _wrap_KikiWorld_setDisplayBorder, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setRasterSize", _wrap_KikiWorld_setRasterSize, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setObjectColor", _wrap_KikiWorld_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_changeCameraMode", _wrap_KikiWorld_changeCameraMode, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getCameraMode", _wrap_KikiWorld_getCameraMode, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setCameraMode", _wrap_KikiWorld_setCameraMode, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getProjection", _wrap_KikiWorld_getProjection, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_addObjectAtPos", _wrap_KikiWorld_addObjectAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_setObjectAtPos", _wrap_KikiWorld_setObjectAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_unsetObject", _wrap_KikiWorld_unsetObject, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_removeObject", _wrap_KikiWorld_removeObject, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_deleteObject", _wrap_KikiWorld_deleteObject, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_deleteAllObjects", _wrap_KikiWorld_deleteAllObjects, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_deleteObjectsWithClassName", _wrap_KikiWorld_deleteObjectsWithClassName, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getObjectWithName", _wrap_KikiWorld_getObjectWithName, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_moveObjectToPos", _wrap_KikiWorld_moveObjectToPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_objectWillMoveToPos", _wrap_KikiWorld_objectWillMoveToPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_objectMovedFromPos", _wrap_KikiWorld_objectMovedFromPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getBotAtPos", _wrap_KikiWorld_getBotAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getOccupantAtPos", _wrap_KikiWorld_getOccupantAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getRealOccupantAtPos", _wrap_KikiWorld_getRealOccupantAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getNearestValidPos", _wrap_KikiWorld_getNearestValidPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_isInvalidPos", _wrap_KikiWorld_isInvalidPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_isValidPos", _wrap_KikiWorld_isValidPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_isUnoccupiedPos", _wrap_KikiWorld_isUnoccupiedPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_isOccupiedPos", _wrap_KikiWorld_isOccupiedPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_posToIndex", _wrap_KikiWorld_posToIndex, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_indexToPos", _wrap_KikiWorld_indexToPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_getPickedPos", _wrap_KikiWorld_getPickedPos, METH_VARARGS, NULL},
	 { (char *)"KikiWorld_swigregister", KikiWorld_swigregister, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_quit", _wrap_KEventHandler_quit, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getMouseState", _wrap_KEventHandler_getMouseState, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getMousePos", _wrap_KEventHandler_getMousePos, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getMouseDelta", _wrap_KEventHandler_getMouseDelta, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getScreenSize", _wrap_KEventHandler_getScreenSize, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_setScreenSize", _wrap_KEventHandler_setScreenSize, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getFullscreen", _wrap_KEventHandler_getFullscreen, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_setFullscreen", _wrap_KEventHandler_setFullscreen, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getTime", _wrap_KEventHandler_getTime, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_setWireframeMode", _wrap_KEventHandler_setWireframeMode, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_setDisplayFps", _wrap_KEventHandler_setDisplayFps, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_getDisplayFps", _wrap_KEventHandler_getDisplayFps, METH_VARARGS, NULL},
	 { (char *)"KEventHandler_swigregister", KEventHandler_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiController_gui_set", _wrap_KikiController_gui_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_gui_get", _wrap_KikiController_gui_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_sound_set", _wrap_KikiController_sound_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_sound_get", _wrap_KikiController_sound_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_world_set", _wrap_KikiController_world_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_world_get", _wrap_KikiController_world_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_player_set", _wrap_KikiController_player_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_player_get", _wrap_KikiController_player_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_python_set", _wrap_KikiController_python_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_python_get", _wrap_KikiController_python_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_player_status_set", _wrap_KikiController_player_status_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_player_status_get", _wrap_KikiController_player_status_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_timer_event_set", _wrap_KikiController_timer_event_set, METH_VARARGS, NULL},
	 { (char *)"KikiController_timer_event_get", _wrap_KikiController_timer_event_get, METH_VARARGS, NULL},
	 { (char *)"KikiController_getPlayer", _wrap_KikiController_getPlayer, METH_VARARGS, NULL},
	 { (char *)"KikiController_unmapMsTime", _wrap_KikiController_unmapMsTime, METH_VARARGS, NULL},
	 { (char *)"KikiController_mapMsTime", _wrap_KikiController_mapMsTime, METH_VARARGS, NULL},
	 { (char *)"KikiController_setSpeed", _wrap_KikiController_setSpeed, METH_VARARGS, NULL},
	 { (char *)"KikiController_getSpeed", _wrap_KikiController_getSpeed, METH_VARARGS, NULL},
	 { (char *)"KikiController_getKikiHome", _wrap_KikiController_getKikiHome, METH_VARARGS, NULL},
	 { (char *)"KikiController_setGamma", _wrap_KikiController_setGamma, METH_VARARGS, NULL},
	 { (char *)"KikiController_getGamma", _wrap_KikiController_getGamma, METH_VARARGS, NULL},
	 { (char *)"KikiController_changeScreenSize", _wrap_KikiController_changeScreenSize, METH_VARARGS, NULL},
	 { (char *)"KikiController_displayText", _wrap_KikiController_displayText, METH_VARARGS, NULL},
	 { (char *)"KikiController_getLocalizedString", _wrap_KikiController_getLocalizedString, METH_VARARGS, NULL},
	 { (char *)"KikiController_isDebugVersion", _wrap_KikiController_isDebugVersion, METH_VARARGS, NULL},
	 { (char *)"KikiController_swigregister", KikiController_swigregister, METH_VARARGS, NULL},
	 { (char *)"replaceTabs", _wrap_replaceTabs, METH_VARARGS, NULL},
	 { (char *)"KWindow_isVisible", _wrap_KWindow_isVisible, METH_VARARGS, NULL},
	 { (char *)"KWindow_setVisibility", _wrap_KWindow_setVisibility, METH_VARARGS, NULL},
	 { (char *)"KWindow_toggleVisibility", _wrap_KWindow_toggleVisibility, METH_VARARGS, NULL},
	 { (char *)"KWindow_maximize", _wrap_KWindow_maximize, METH_VARARGS, NULL},
	 { (char *)"KWindow_show", _wrap_KWindow_show, METH_VARARGS, NULL},
	 { (char *)"KWindow_hide", _wrap_KWindow_hide, METH_VARARGS, NULL},
	 { (char *)"KWindow_close", _wrap_KWindow_close, METH_VARARGS, NULL},
	 { (char *)"KWindow_setSize", _wrap_KWindow_setSize, METH_VARARGS, NULL},
	 { (char *)"KWindow_setPosition", _wrap_KWindow_setPosition, METH_VARARGS, NULL},
	 { (char *)"KWindow_swigregister", KWindow_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiText", _wrap_new_KikiText, METH_VARARGS, NULL},
	 { (char *)"KikiText_setText", _wrap_KikiText_setText, METH_VARARGS, NULL},
	 { (char *)"KikiText_getText", _wrap_KikiText_getText, METH_VARARGS, NULL},
	 { (char *)"KikiText_clear", _wrap_KikiText_clear, METH_VARARGS, NULL},
	 { (char *)"KikiText_isEmpty", _wrap_KikiText_isEmpty, METH_VARARGS, NULL},
	 { (char *)"KikiText_addText", _wrap_KikiText_addText, METH_VARARGS, NULL},
	 { (char *)"KikiText_getColor", _wrap_KikiText_getColor, METH_VARARGS, NULL},
	 { (char *)"KikiText_setColor", _wrap_KikiText_setColor, METH_VARARGS, NULL},
	 { (char *)"KikiText_setAlpha", _wrap_KikiText_setAlpha, METH_VARARGS, NULL},
	 { (char *)"KikiText_isAnimated", _wrap_KikiText_isAnimated, METH_VARARGS, NULL},
	 { (char *)"KikiText_setAnimated", _wrap_KikiText_setAnimated, METH_VARARGS, NULL},
	 { (char *)"KikiText_isCentered", _wrap_KikiText_isCentered, METH_VARARGS, NULL},
	 { (char *)"KikiText_setCentered", _wrap_KikiText_setCentered, METH_VARARGS, NULL},
	 { (char *)"KikiText_getWidth", _wrap_KikiText_getWidth, METH_VARARGS, NULL},
	 { (char *)"KikiText_getHeight", _wrap_KikiText_getHeight, METH_VARARGS, NULL},
	 { (char *)"KikiText_setObjectColor", _wrap_KikiText_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiText_swigregister", KikiText_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiGUI_swigregister", KikiGUI_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiScreenText", _wrap_new_KikiScreenText, METH_VARARGS, NULL},
	 { (char *)"KikiScreenText_addText", _wrap_KikiScreenText_addText, METH_VARARGS, NULL},
	 { (char *)"KikiScreenText_setText", _wrap_KikiScreenText_setText, METH_VARARGS, NULL},
	 { (char *)"KikiScreenText_show", _wrap_KikiScreenText_show, METH_VARARGS, NULL},
	 { (char *)"KikiScreenText_getProjection", _wrap_KikiScreenText_getProjection, METH_VARARGS, NULL},
	 { (char *)"KikiScreenText_swigregister", KikiScreenText_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiMenu", _wrap_new_KikiMenu, METH_VARARGS, NULL},
	 { (char *)"KikiMenu_addItem", _wrap_KikiMenu_addItem, METH_VARARGS, NULL},
	 { (char *)"KikiMenu_setCurrentIndex", _wrap_KikiMenu_setCurrentIndex, METH_VARARGS, NULL},
	 { (char *)"KikiMenu_setEscapeActive", _wrap_KikiMenu_setEscapeActive, METH_VARARGS, NULL},
	 { (char *)"KikiMenu_circular_set", _wrap_KikiMenu_circular_set, METH_VARARGS, NULL},
	 { (char *)"KikiMenu_circular_get", _wrap_KikiMenu_circular_get, METH_VARARGS, NULL},
	 { (char *)"KikiMenu_swigregister", KikiMenu_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiColumnMenu", _wrap_new_KikiColumnMenu, METH_VARARGS, NULL},
	 { (char *)"KikiColumnMenu_swigregister", KikiColumnMenu_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiScrollMenu", _wrap_new_KikiScrollMenu, METH_VARARGS, NULL},
	 { (char *)"KikiScrollMenu_getCurrentIndex", _wrap_KikiScrollMenu_getCurrentIndex, METH_VARARGS, NULL},
	 { (char *)"KikiScrollMenu_addItem", _wrap_KikiScrollMenu_addItem, METH_VARARGS, NULL},
	 { (char *)"KikiScrollMenu_swigregister", KikiScrollMenu_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiPageText", _wrap_new_KikiPageText, METH_VARARGS, NULL},
	 { (char *)"KikiPageText_swigregister", KikiPageText_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiFace_swigregister", KikiFace_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiWire", _wrap_new_KikiWire, METH_VARARGS, NULL},
	 { (char *)"KikiWire_setActive", _wrap_KikiWire_setActive, METH_VARARGS, NULL},
	 { (char *)"KikiWire_setObjectColor", _wrap_KikiWire_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiWire_swigregister", KikiWire_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToWire", _wrap_kikiObjectToWire, METH_VARARGS, NULL},
	 { (char *)"new_KikiGear", _wrap_new_KikiGear, METH_VARARGS, NULL},
	 { (char *)"KikiGear_setActive", _wrap_KikiGear_setActive, METH_VARARGS, NULL},
	 { (char *)"KikiGear_updateActive", _wrap_KikiGear_updateActive, METH_VARARGS, NULL},
	 { (char *)"KikiGear_setObjectColor", _wrap_KikiGear_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiGear_swigregister", KikiGear_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToGear", _wrap_kikiObjectToGear, METH_VARARGS, NULL},
	 { (char *)"new_KikiValve", _wrap_new_KikiValve, METH_VARARGS, NULL},
	 { (char *)"KikiValve_setObjectColor", _wrap_KikiValve_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiValve_swigregister", KikiValve_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToValve", _wrap_kikiObjectToValve, METH_VARARGS, NULL},
	 { (char *)"new_KikiMotorCylinder", _wrap_new_KikiMotorCylinder, METH_VARARGS, NULL},
	 { (char *)"KikiMotorCylinder_setObjectColor", _wrap_KikiMotorCylinder_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiMotorCylinder_swigregister", KikiMotorCylinder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiMotorGear", _wrap_new_KikiMotorGear, METH_VARARGS, NULL},
	 { (char *)"KikiMotorGear_setObjectColor", _wrap_KikiMotorGear_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiMotorGear_swigregister", KikiMotorGear_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiGenerator", _wrap_new_KikiGenerator, METH_VARARGS, NULL},
	 { (char *)"KikiGenerator_setObjectColor", _wrap_KikiGenerator_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiGenerator_swigregister", KikiGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiLight", _wrap_new_KikiLight, METH_VARARGS, NULL},
	 { (char *)"KikiLight_setObjectColor", _wrap_KikiLight_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiLight_swigregister", KikiLight_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToLight", _wrap_kikiObjectToLight, METH_VARARGS, NULL},
	 { (char *)"new_KikiCellText", _wrap_new_KikiCellText, METH_VARARGS, NULL},
	 { (char *)"KikiCellText_setOffset", _wrap_KikiCellText_setOffset, METH_VARARGS, NULL},
	 { (char *)"KikiCellText_setObjectColor", _wrap_KikiCellText_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiCellText_swigregister", KikiCellText_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToCellText", _wrap_kikiObjectToCellText, METH_VARARGS, NULL},
	 { (char *)"new_KikiStone", _wrap_new_KikiStone, METH_VARARGS, NULL},
	 { (char *)"KikiStone_setObjectColor", _wrap_KikiStone_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiStone_swigregister", KikiStone_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToStone", _wrap_kikiObjectToStone, METH_VARARGS, NULL},
	 { (char *)"new_KikiWireStone", _wrap_new_KikiWireStone, METH_VARARGS, NULL},
	 { (char *)"KikiWireStone_setObjectColor", _wrap_KikiWireStone_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiWireStone_swigregister", KikiWireStone_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToWireStone", _wrap_kikiObjectToWireStone, METH_VARARGS, NULL},
	 { (char *)"new_KikiWall", _wrap_new_KikiWall, METH_VARARGS, NULL},
	 { (char *)"KikiWall_setObjectColor", _wrap_KikiWall_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiWall_swigregister", KikiWall_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToWall", _wrap_kikiObjectToWall, METH_VARARGS, NULL},
	 { (char *)"new_KikiBomb", _wrap_new_KikiBomb, METH_VARARGS, NULL},
	 { (char *)"KikiBomb_setObjectColor", _wrap_KikiBomb_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiBomb_swigregister", KikiBomb_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToBomb", _wrap_kikiObjectToBomb, METH_VARARGS, NULL},
	 { (char *)"new_KikiSwitch", _wrap_new_KikiSwitch, METH_VARARGS, NULL},
	 { (char *)"KikiSwitch_toggle", _wrap_KikiSwitch_toggle, METH_VARARGS, NULL},
	 { (char *)"KikiSwitch_setActive", _wrap_KikiSwitch_setActive, METH_VARARGS, NULL},
	 { (char *)"KikiSwitch_isActive", _wrap_KikiSwitch_isActive, METH_VARARGS, NULL},
	 { (char *)"KikiSwitch_setObjectColor", _wrap_KikiSwitch_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiSwitch_swigregister", KikiSwitch_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToSwitch", _wrap_kikiObjectToSwitch, METH_VARARGS, NULL},
	 { (char *)"new_KikiGate", _wrap_new_KikiGate, METH_VARARGS, NULL},
	 { (char *)"KikiGate_setObjectColor", _wrap_KikiGate_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiGate_swigregister", KikiGate_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToGate", _wrap_kikiObjectToGate, METH_VARARGS, NULL},
	 { (char *)"KikiAtom_setValue", _wrap_KikiAtom_setValue, METH_VARARGS, NULL},
	 { (char *)"KikiAtom_getValue", _wrap_KikiAtom_getValue, METH_VARARGS, NULL},
	 { (char *)"KikiAtom_swigregister", KikiAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiMovesAtom_setObjectColor", _wrap_KikiMovesAtom_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiMovesAtom_swigregister", KikiMovesAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiValueAtom", _wrap_new_KikiValueAtom, METH_VARARGS, NULL},
	 { (char *)"KikiValueAtom_setObjectColor", _wrap_KikiValueAtom_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiValueAtom_swigregister", KikiValueAtom_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KikiSpikes", _wrap_new_KikiSpikes, METH_VARARGS, NULL},
	 { (char *)"KikiSpikes_setObjectColor", _wrap_KikiSpikes_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiSpikes_swigregister", KikiSpikes_swigregister, METH_VARARGS, NULL},
	 { (char *)"kikiObjectToSpikes", _wrap_kikiObjectToSpikes, METH_VARARGS, NULL},
	 { (char *)"KikiBullet_setObjectColor", _wrap_KikiBullet_setObjectColor, METH_VARARGS, NULL},
	 { (char *)"KikiBullet_swigregister", KikiBullet_swigregister, METH_VARARGS, NULL},
	 { (char *)"KConsole__print", _wrap_KConsole__print, METH_VARARGS, NULL},
	 { (char *)"KConsole_write", _wrap_KConsole_write, METH_VARARGS, NULL},
	 { (char *)"KConsole_printError", _wrap_KConsole_printError, METH_VARARGS, NULL},
	 { (char *)"KConsole_getConsole", _wrap_KConsole_getConsole, METH_VARARGS, NULL},
	 { (char *)"KConsole_clear", _wrap_KConsole_clear, METH_VARARGS, NULL},
	 { (char *)"KConsole_swigregister", KConsole_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_cursorPos_set", _wrap_KikiPythonWidget_cursorPos_set, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_cursorPos_get", _wrap_KikiPythonWidget_cursorPos_get, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_selectionPos_set", _wrap_KikiPythonWidget_selectionPos_set, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_selectionPos_get", _wrap_KikiPythonWidget_selectionPos_get, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_getTextRows", _wrap_KikiPythonWidget_getTextRows, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_getTextCols", _wrap_KikiPythonWidget_getTextCols, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_getTextSize", _wrap_KikiPythonWidget_getTextSize, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_getColumnWidth", _wrap_KikiPythonWidget_getColumnWidth, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_getRowHeight", _wrap_KikiPythonWidget_getRowHeight, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_getPythonWindow", _wrap_KikiPythonWidget_getPythonWindow, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_displayStringAtPos", _wrap_KikiPythonWidget_displayStringAtPos, METH_VARARGS, NULL},
	 { (char *)"KikiPythonWidget_swigregister", KikiPythonWidget_swigregister, METH_VARARGS, NULL},
	 { (char *)"KikiPython_getPythonWidget", _wrap_KikiPython_getPythonWidget, METH_VARARGS, NULL},
	 { (char *)"KikiPython_setScrollBarUnits", _wrap_KikiPython_setScrollBarUnits, METH_VARARGS, NULL},
	 { (char *)"KikiPython_requestUserInput", _wrap_KikiPython_requestUserInput, METH_VARARGS, NULL},
	 { (char *)"KikiPython_setTitle", _wrap_KikiPython_setTitle, METH_VARARGS, NULL},
	 { (char *)"KikiPython_setStatus", _wrap_KikiPython_setStatus, METH_VARARGS, NULL},
	 { (char *)"KikiPython_setInput", _wrap_KikiPython_setInput, METH_VARARGS, NULL},
	 { (char *)"KikiPython_executeFile", _wrap_KikiPython_executeFile, METH_VARARGS, NULL},
	 { (char *)"KikiPython_swigregister", KikiPython_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_KikiColumnMenuTo_p_KikiMenu(void *x) {
    return (void *)((KikiMenu *)  ((KikiColumnMenu *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiMenu(void *x) {
    return (void *)((KikiMenu *) (KikiColumnMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiValveTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *)  ((KikiValve *) x));
}
static void *_p_KikiMotorGearTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *) (KikiGear *) ((KikiMotorGear *) x));
}
static void *_p_KikiGeneratorTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *) (KikiGear *) ((KikiGenerator *) x));
}
static void *_p_KikiGearTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *)  ((KikiGear *) x));
}
static void *_p_KikiPyActionTo_p_KikiAction(void *x) {
    return (void *)((KikiAction *)  ((KikiPyAction *) x));
}
static void *_p_KikiColumnMenuTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *) (KikiMenu *) ((KikiColumnMenu *) x));
}
static void *_p_KikiMenuTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *)  ((KikiMenu *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *) (KikiMenu *)(KikiColumnMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiPageTextTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *)  ((KikiPageText *) x));
}
static void *_p_KikiMutantTo_p_KikiBot(void *x) {
    return (void *)((KikiBot *)  ((KikiMutant *) x));
}
static void *_p_KikiPlayerTo_p_KikiBot(void *x) {
    return (void *)((KikiBot *)  ((KikiPlayer *) x));
}
static void *_p_KikiValueAtomTo_p_KikiAtom(void *x) {
    return (void *)((KikiAtom *)  ((KikiValueAtom *) x));
}
static void *_p_KikiMovesAtomTo_p_KikiAtom(void *x) {
    return (void *)((KikiAtom *)  ((KikiMovesAtom *) x));
}
static void *_p_KikiLightTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiLight *) x));
}
static void *_p_KikiCellTextTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiCellText *) x));
}
static void *_p_KikiWireStoneTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiStone *) ((KikiWireStone *) x));
}
static void *_p_KikiScreenTextTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *)  ((KikiScreenText *) x));
}
static void *_p_KikiSpikesTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiSpikes *) x));
}
static void *_p_KikiBombTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBomb *) x));
}
static void *_p_KikiAtomTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiAtom *) x));
}
static void *_p_KikiSwitchTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiSwitch *) x));
}
static void *_p_KikiValueAtomTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiAtom *) ((KikiValueAtom *) x));
}
static void *_p_KikiBotFumeTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBotFume *) x));
}
static void *_p_KikiWireTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiWire *) x));
}
static void *_p_KikiMotorGearTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiGear *) ((KikiMotorGear *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *)(KikiMenu *)(KikiColumnMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiMutantTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiBot *) ((KikiMutant *) x));
}
static void *_p_KikiColumnMenuTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *)(KikiMenu *) ((KikiColumnMenu *) x));
}
static void *_p_KikiMenuTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *) ((KikiMenu *) x));
}
static void *_p_KikiBotTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBot *) x));
}
static void *_p_KikiWallTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiWall *) x));
}
static void *_p_KikiMovesAtomTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiAtom *) ((KikiMovesAtom *) x));
}
static void *_p_KikiBulletTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBullet *) x));
}
static void *_p_KikiStoneTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiStone *) x));
}
static void *_p_KikiGearTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiGear *) x));
}
static void *_p_KikiControllerTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *)  ((KikiController *) x));
}
static void *_p_KikiPageTextTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *) ((KikiPageText *) x));
}
static void *_p_KikiObjectTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *)  ((KikiObject *) x));
}
static void *_p_KikiValveTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiValve *) x));
}
static void *_p_KikiMotorCylinderTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiMotorCylinder *) x));
}
static void *_p_KikiGateTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiSwitch *) ((KikiGate *) x));
}
static void *_p_KikiPlayerTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiBot *) ((KikiPlayer *) x));
}
static void *_p_KikiGeneratorTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiGear *) ((KikiGenerator *) x));
}
static void *_p_KikiControllerTo_p_KEventHandler(void *x) {
    return (void *)((KEventHandler *)  ((KikiController *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiColumnMenu(void *x) {
    return (void *)((KikiColumnMenu *)  ((KikiScrollMenu *) x));
}
static void *_p_KikiGUITo_p_KWindow(void *x) {
    return (void *)((KWindow *)  ((KikiGUI *) x));
}
static void *_p_KikiPythonTo_p_KWindow(void *x) {
    return (void *)((KWindow *)  ((KikiPython *) x));
}
static void *_p_KConsoleTo_p_KWindow(void *x) {
    return (void *)((KWindow *)  ((KConsole *) x));
}
static void *_p_KikiWireStoneTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiStone *) ((KikiWireStone *) x));
}
static void *_p_KikiLightTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiLight *) x));
}
static void *_p_KikiCellTextTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiCellText *) x));
}
static void *_p_KikiSpikesTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiSpikes *) x));
}
static void *_p_KikiBombTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBomb *) x));
}
static void *_p_KikiAtomTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiAtom *) x));
}
static void *_p_KikiSwitchTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiSwitch *) x));
}
static void *_p_KikiValueAtomTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiAtom *) ((KikiValueAtom *) x));
}
static void *_p_KikiBotFumeTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBotFume *) x));
}
static void *_p_KikiWireTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiWire *) x));
}
static void *_p_KikiMotorGearTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiGear *) ((KikiMotorGear *) x));
}
static void *_p_KikiMutantTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiBot *) ((KikiMutant *) x));
}
static void *_p_KikiBotTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBot *) x));
}
static void *_p_KikiWallTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiWall *) x));
}
static void *_p_KikiMovesAtomTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiAtom *) ((KikiMovesAtom *) x));
}
static void *_p_KikiBulletTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBullet *) x));
}
static void *_p_KikiStoneTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiStone *) x));
}
static void *_p_KikiGearTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiGear *) x));
}
static void *_p_KikiMotorCylinderTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiMotorCylinder *) x));
}
static void *_p_KikiValveTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiValve *) x));
}
static void *_p_KikiGateTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiSwitch *) ((KikiGate *) x));
}
static void *_p_KikiPlayerTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiBot *) ((KikiPlayer *) x));
}
static void *_p_KikiGeneratorTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiGear *) ((KikiGenerator *) x));
}
static void *_p_KikiGateTo_p_KikiSwitch(void *x) {
    return (void *)((KikiSwitch *)  ((KikiGate *) x));
}
static void *_p_KikiWireStoneTo_p_KikiStone(void *x) {
    return (void *)((KikiStone *)  ((KikiWireStone *) x));
}
static void *_p_KikiMotorGearTo_p_KikiGear(void *x) {
    return (void *)((KikiGear *)  ((KikiMotorGear *) x));
}
static void *_p_KikiGeneratorTo_p_KikiGear(void *x) {
    return (void *)((KikiGear *)  ((KikiGenerator *) x));
}
static void *_p_KikiColumnMenuTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *)(KikiMenu *) ((KikiColumnMenu *) x));
}
static void *_p_KikiCellTextTo_p_KikiText(void *x) {
    return (void *)((KikiText *)  ((KikiCellText *) x));
}
static void *_p_KikiScreenTextTo_p_KikiText(void *x) {
    return (void *)((KikiText *)  ((KikiScreenText *) x));
}
static void *_p_KikiMenuTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *) ((KikiMenu *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *)(KikiMenu *)(KikiColumnMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiPageTextTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *) ((KikiPageText *) x));
}
static swig_type_info _swigt__p_KColor = {"_p_KColor", "KColor *", 0, 0, 0};
static swig_type_info _swigt__p_KConsole = {"_p_KConsole", "KConsole *", 0, 0, 0};
static swig_type_info _swigt__p_KEventHandler = {"_p_KEventHandler", "KEventHandler *", 0, 0, 0};
static swig_type_info _swigt__p_KKey = {"_p_KKey", "KKey *", 0, 0, 0};
static swig_type_info _swigt__p_KPosition = {"_p_KPosition", "KPosition *", 0, 0, 0};
static swig_type_info _swigt__p_KProjection = {"_p_KProjection", "KProjection *", 0, 0, 0};
static swig_type_info _swigt__p_KQuaternion = {"_p_KQuaternion", "KQuaternion *", 0, 0, 0};
static swig_type_info _swigt__p_KSize = {"_p_KSize", "KSize *", 0, 0, 0};
static swig_type_info _swigt__p_KVector = {"_p_KVector", "KVector *", 0, 0, 0};
static swig_type_info _swigt__p_KWindow = {"_p_KWindow", "KWindow *", 0, 0, 0};
static swig_type_info _swigt__p_KikiAction = {"_p_KikiAction", "KikiAction *", 0, 0, 0};
static swig_type_info _swigt__p_KikiActionObject = {"_p_KikiActionObject", "KikiActionObject *", 0, 0, 0};
static swig_type_info _swigt__p_KikiAtom = {"_p_KikiAtom", "KikiAtom *", 0, 0, 0};
static swig_type_info _swigt__p_KikiBomb = {"_p_KikiBomb", "KikiBomb *", 0, 0, 0};
static swig_type_info _swigt__p_KikiBot = {"_p_KikiBot", "KikiBot *", 0, 0, 0};
static swig_type_info _swigt__p_KikiBotFume = {"_p_KikiBotFume", "KikiBotFume *", 0, 0, 0};
static swig_type_info _swigt__p_KikiBotStatus = {"_p_KikiBotStatus", "KikiBotStatus *", 0, 0, 0};
static swig_type_info _swigt__p_KikiBullet = {"_p_KikiBullet", "KikiBullet *", 0, 0, 0};
static swig_type_info _swigt__p_KikiCellText = {"_p_KikiCellText", "KikiCellText *", 0, 0, 0};
static swig_type_info _swigt__p_KikiColumnMenu = {"_p_KikiColumnMenu", "KikiColumnMenu *", 0, 0, 0};
static swig_type_info _swigt__p_KikiController = {"_p_KikiController", "KikiController *", 0, 0, 0};
static swig_type_info _swigt__p_KikiEvent = {"_p_KikiEvent", "KikiEvent *", 0, 0, 0};
static swig_type_info _swigt__p_KikiFace = {"_p_KikiFace", "KikiFace *", 0, 0, 0};
static swig_type_info _swigt__p_KikiGUI = {"_p_KikiGUI", "KikiGUI *", 0, 0, 0};
static swig_type_info _swigt__p_KikiGate = {"_p_KikiGate", "KikiGate *", 0, 0, 0};
static swig_type_info _swigt__p_KikiGear = {"_p_KikiGear", "KikiGear *", 0, 0, 0};
static swig_type_info _swigt__p_KikiGenerator = {"_p_KikiGenerator", "KikiGenerator *", 0, 0, 0};
static swig_type_info _swigt__p_KikiLight = {"_p_KikiLight", "KikiLight *", 0, 0, 0};
static swig_type_info _swigt__p_KikiMenu = {"_p_KikiMenu", "KikiMenu *", 0, 0, 0};
static swig_type_info _swigt__p_KikiMotorCylinder = {"_p_KikiMotorCylinder", "KikiMotorCylinder *", 0, 0, 0};
static swig_type_info _swigt__p_KikiMotorGear = {"_p_KikiMotorGear", "KikiMotorGear *", 0, 0, 0};
static swig_type_info _swigt__p_KikiMovesAtom = {"_p_KikiMovesAtom", "KikiMovesAtom *", 0, 0, 0};
static swig_type_info _swigt__p_KikiMutant = {"_p_KikiMutant", "KikiMutant *", 0, 0, 0};
static swig_type_info _swigt__p_KikiObject = {"_p_KikiObject", "KikiObject *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPageText = {"_p_KikiPageText", "KikiPageText *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPlayback = {"_p_KikiPlayback", "KikiPlayback *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPlayer = {"_p_KikiPlayer", "KikiPlayer *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPos = {"_p_KikiPos", "KikiPos *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPyAction = {"_p_KikiPyAction", "KikiPyAction *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPython = {"_p_KikiPython", "KikiPython *", 0, 0, 0};
static swig_type_info _swigt__p_KikiPythonWidget = {"_p_KikiPythonWidget", "KikiPythonWidget *", 0, 0, 0};
static swig_type_info _swigt__p_KikiScreenText = {"_p_KikiScreenText", "KikiScreenText *", 0, 0, 0};
static swig_type_info _swigt__p_KikiScrollMenu = {"_p_KikiScrollMenu", "KikiScrollMenu *", 0, 0, 0};
static swig_type_info _swigt__p_KikiSound = {"_p_KikiSound", "KikiSound *", 0, 0, 0};
static swig_type_info _swigt__p_KikiSpikes = {"_p_KikiSpikes", "KikiSpikes *", 0, 0, 0};
static swig_type_info _swigt__p_KikiStatusDisplay = {"_p_KikiStatusDisplay", "KikiStatusDisplay *", 0, 0, 0};
static swig_type_info _swigt__p_KikiStone = {"_p_KikiStone", "KikiStone *", 0, 0, 0};
static swig_type_info _swigt__p_KikiSwitch = {"_p_KikiSwitch", "KikiSwitch *", 0, 0, 0};
static swig_type_info _swigt__p_KikiText = {"_p_KikiText", "KikiText *", 0, 0, 0};
static swig_type_info _swigt__p_KikiValueAtom = {"_p_KikiValueAtom", "KikiValueAtom *", 0, 0, 0};
static swig_type_info _swigt__p_KikiValve = {"_p_KikiValve", "KikiValve *", 0, 0, 0};
static swig_type_info _swigt__p_KikiWall = {"_p_KikiWall", "KikiWall *", 0, 0, 0};
static swig_type_info _swigt__p_KikiWire = {"_p_KikiWire", "KikiWire *", 0, 0, 0};
static swig_type_info _swigt__p_KikiWireStone = {"_p_KikiWireStone", "KikiWireStone *", 0, 0, 0};
static swig_type_info _swigt__p_KikiWorld = {"_p_KikiWorld", "KikiWorld *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_KColor,
  &_swigt__p_KConsole,
  &_swigt__p_KEventHandler,
  &_swigt__p_KKey,
  &_swigt__p_KPosition,
  &_swigt__p_KProjection,
  &_swigt__p_KQuaternion,
  &_swigt__p_KSize,
  &_swigt__p_KVector,
  &_swigt__p_KWindow,
  &_swigt__p_KikiAction,
  &_swigt__p_KikiActionObject,
  &_swigt__p_KikiAtom,
  &_swigt__p_KikiBomb,
  &_swigt__p_KikiBot,
  &_swigt__p_KikiBotFume,
  &_swigt__p_KikiBotStatus,
  &_swigt__p_KikiBullet,
  &_swigt__p_KikiCellText,
  &_swigt__p_KikiColumnMenu,
  &_swigt__p_KikiController,
  &_swigt__p_KikiEvent,
  &_swigt__p_KikiFace,
  &_swigt__p_KikiGUI,
  &_swigt__p_KikiGate,
  &_swigt__p_KikiGear,
  &_swigt__p_KikiGenerator,
  &_swigt__p_KikiLight,
  &_swigt__p_KikiMenu,
  &_swigt__p_KikiMotorCylinder,
  &_swigt__p_KikiMotorGear,
  &_swigt__p_KikiMovesAtom,
  &_swigt__p_KikiMutant,
  &_swigt__p_KikiObject,
  &_swigt__p_KikiPageText,
  &_swigt__p_KikiPlayback,
  &_swigt__p_KikiPlayer,
  &_swigt__p_KikiPos,
  &_swigt__p_KikiPyAction,
  &_swigt__p_KikiPython,
  &_swigt__p_KikiPythonWidget,
  &_swigt__p_KikiScreenText,
  &_swigt__p_KikiScrollMenu,
  &_swigt__p_KikiSound,
  &_swigt__p_KikiSpikes,
  &_swigt__p_KikiStatusDisplay,
  &_swigt__p_KikiStone,
  &_swigt__p_KikiSwitch,
  &_swigt__p_KikiText,
  &_swigt__p_KikiValueAtom,
  &_swigt__p_KikiValve,
  &_swigt__p_KikiWall,
  &_swigt__p_KikiWire,
  &_swigt__p_KikiWireStone,
  &_swigt__p_KikiWorld,
  &_swigt__p_char,
  &_swigt__p_std__string,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_KColor[] = {  {&_swigt__p_KColor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KConsole[] = {  {&_swigt__p_KConsole, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KEventHandler[] = {  {&_swigt__p_KikiController, _p_KikiControllerTo_p_KEventHandler, 0, 0},  {&_swigt__p_KEventHandler, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KKey[] = {  {&_swigt__p_KKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KPosition[] = {  {&_swigt__p_KPosition, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KProjection[] = {  {&_swigt__p_KProjection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KQuaternion[] = {  {&_swigt__p_KQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KSize[] = {  {&_swigt__p_KSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KVector[] = {  {&_swigt__p_KVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KWindow[] = {  {&_swigt__p_KikiGUI, _p_KikiGUITo_p_KWindow, 0, 0},  {&_swigt__p_KikiPython, _p_KikiPythonTo_p_KWindow, 0, 0},  {&_swigt__p_KWindow, 0, 0, 0},  {&_swigt__p_KConsole, _p_KConsoleTo_p_KWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiAction[] = {  {&_swigt__p_KikiAction, 0, 0, 0},  {&_swigt__p_KikiPyAction, _p_KikiPyActionTo_p_KikiAction, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiActionObject[] = {  {&_swigt__p_KikiWireStone, _p_KikiWireStoneTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiLight, _p_KikiLightTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiCellText, _p_KikiCellTextTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiActionObject, 0, 0, 0},  {&_swigt__p_KikiScreenText, _p_KikiScreenTextTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiSpikes, _p_KikiSpikesTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiBomb, _p_KikiBombTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiAtom, _p_KikiAtomTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiValueAtom, _p_KikiValueAtomTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiSwitch, _p_KikiSwitchTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiBotFume, _p_KikiBotFumeTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiWire, _p_KikiWireTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiMotorGear, _p_KikiMotorGearTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiScrollMenu, _p_KikiScrollMenuTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiColumnMenu, _p_KikiColumnMenuTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiMutant, _p_KikiMutantTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiMenu, _p_KikiMenuTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiMovesAtom, _p_KikiMovesAtomTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiBot, _p_KikiBotTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiWall, _p_KikiWallTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiBullet, _p_KikiBulletTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiStone, _p_KikiStoneTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiGear, _p_KikiGearTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiController, _p_KikiControllerTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiPageText, _p_KikiPageTextTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiGate, _p_KikiGateTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiObject, _p_KikiObjectTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiMotorCylinder, _p_KikiMotorCylinderTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiValve, _p_KikiValveTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiPlayer, _p_KikiPlayerTo_p_KikiActionObject, 0, 0},  {&_swigt__p_KikiGenerator, _p_KikiGeneratorTo_p_KikiActionObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiAtom[] = {  {&_swigt__p_KikiValueAtom, _p_KikiValueAtomTo_p_KikiAtom, 0, 0},  {&_swigt__p_KikiAtom, 0, 0, 0},  {&_swigt__p_KikiMovesAtom, _p_KikiMovesAtomTo_p_KikiAtom, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiBomb[] = {  {&_swigt__p_KikiBomb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiBot[] = {  {&_swigt__p_KikiMutant, _p_KikiMutantTo_p_KikiBot, 0, 0},  {&_swigt__p_KikiBot, 0, 0, 0},  {&_swigt__p_KikiPlayer, _p_KikiPlayerTo_p_KikiBot, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiBotFume[] = {  {&_swigt__p_KikiBotFume, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiBotStatus[] = {  {&_swigt__p_KikiBotStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiBullet[] = {  {&_swigt__p_KikiBullet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiCellText[] = {  {&_swigt__p_KikiCellText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiColumnMenu[] = {  {&_swigt__p_KikiColumnMenu, 0, 0, 0},  {&_swigt__p_KikiScrollMenu, _p_KikiScrollMenuTo_p_KikiColumnMenu, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiController[] = {  {&_swigt__p_KikiController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiEvent[] = {  {&_swigt__p_KikiEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiFace[] = {  {&_swigt__p_KikiValve, _p_KikiValveTo_p_KikiFace, 0, 0},  {&_swigt__p_KikiMotorGear, _p_KikiMotorGearTo_p_KikiFace, 0, 0},  {&_swigt__p_KikiGenerator, _p_KikiGeneratorTo_p_KikiFace, 0, 0},  {&_swigt__p_KikiFace, 0, 0, 0},  {&_swigt__p_KikiGear, _p_KikiGearTo_p_KikiFace, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiGUI[] = {  {&_swigt__p_KikiGUI, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiGate[] = {  {&_swigt__p_KikiGate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiGear[] = {  {&_swigt__p_KikiMotorGear, _p_KikiMotorGearTo_p_KikiGear, 0, 0},  {&_swigt__p_KikiGenerator, _p_KikiGeneratorTo_p_KikiGear, 0, 0},  {&_swigt__p_KikiGear, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiGenerator[] = {  {&_swigt__p_KikiGenerator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiLight[] = {  {&_swigt__p_KikiLight, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiMenu[] = {  {&_swigt__p_KikiColumnMenu, _p_KikiColumnMenuTo_p_KikiMenu, 0, 0},  {&_swigt__p_KikiMenu, 0, 0, 0},  {&_swigt__p_KikiScrollMenu, _p_KikiScrollMenuTo_p_KikiMenu, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiMotorCylinder[] = {  {&_swigt__p_KikiMotorCylinder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiMotorGear[] = {  {&_swigt__p_KikiMotorGear, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiMovesAtom[] = {  {&_swigt__p_KikiMovesAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiMutant[] = {  {&_swigt__p_KikiMutant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiObject[] = {  {&_swigt__p_KikiWireStone, _p_KikiWireStoneTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiLight, _p_KikiLightTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiCellText, _p_KikiCellTextTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiSpikes, _p_KikiSpikesTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiBomb, _p_KikiBombTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiAtom, _p_KikiAtomTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiValueAtom, _p_KikiValueAtomTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiSwitch, _p_KikiSwitchTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiBotFume, _p_KikiBotFumeTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiWire, _p_KikiWireTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiMotorGear, _p_KikiMotorGearTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiMutant, _p_KikiMutantTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiMovesAtom, _p_KikiMovesAtomTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiBot, _p_KikiBotTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiWall, _p_KikiWallTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiBullet, _p_KikiBulletTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiStone, _p_KikiStoneTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiGear, _p_KikiGearTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiGate, _p_KikiGateTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiObject, 0, 0, 0},  {&_swigt__p_KikiMotorCylinder, _p_KikiMotorCylinderTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiValve, _p_KikiValveTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiPlayer, _p_KikiPlayerTo_p_KikiObject, 0, 0},  {&_swigt__p_KikiGenerator, _p_KikiGeneratorTo_p_KikiObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPageText[] = {  {&_swigt__p_KikiPageText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPlayback[] = {  {&_swigt__p_KikiPlayback, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPlayer[] = {  {&_swigt__p_KikiPlayer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPos[] = {  {&_swigt__p_KikiPos, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPyAction[] = {  {&_swigt__p_KikiPyAction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPython[] = {  {&_swigt__p_KikiPython, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiPythonWidget[] = {  {&_swigt__p_KikiPythonWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiScreenText[] = {  {&_swigt__p_KikiColumnMenu, _p_KikiColumnMenuTo_p_KikiScreenText, 0, 0},  {&_swigt__p_KikiScreenText, 0, 0, 0},  {&_swigt__p_KikiScrollMenu, _p_KikiScrollMenuTo_p_KikiScreenText, 0, 0},  {&_swigt__p_KikiMenu, _p_KikiMenuTo_p_KikiScreenText, 0, 0},  {&_swigt__p_KikiPageText, _p_KikiPageTextTo_p_KikiScreenText, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiScrollMenu[] = {  {&_swigt__p_KikiScrollMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiSound[] = {  {&_swigt__p_KikiSound, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiSpikes[] = {  {&_swigt__p_KikiSpikes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiStatusDisplay[] = {  {&_swigt__p_KikiStatusDisplay, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiStone[] = {  {&_swigt__p_KikiStone, 0, 0, 0},  {&_swigt__p_KikiWireStone, _p_KikiWireStoneTo_p_KikiStone, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiSwitch[] = {  {&_swigt__p_KikiSwitch, 0, 0, 0},  {&_swigt__p_KikiGate, _p_KikiGateTo_p_KikiSwitch, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiText[] = {  {&_swigt__p_KikiColumnMenu, _p_KikiColumnMenuTo_p_KikiText, 0, 0},  {&_swigt__p_KikiText, 0, 0, 0},  {&_swigt__p_KikiCellText, _p_KikiCellTextTo_p_KikiText, 0, 0},  {&_swigt__p_KikiScreenText, _p_KikiScreenTextTo_p_KikiText, 0, 0},  {&_swigt__p_KikiScrollMenu, _p_KikiScrollMenuTo_p_KikiText, 0, 0},  {&_swigt__p_KikiMenu, _p_KikiMenuTo_p_KikiText, 0, 0},  {&_swigt__p_KikiPageText, _p_KikiPageTextTo_p_KikiText, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiValueAtom[] = {  {&_swigt__p_KikiValueAtom, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiValve[] = {  {&_swigt__p_KikiValve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiWall[] = {  {&_swigt__p_KikiWall, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiWire[] = {  {&_swigt__p_KikiWire, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiWireStone[] = {  {&_swigt__p_KikiWireStone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_KikiWorld[] = {  {&_swigt__p_KikiWorld, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_KColor,
  _swigc__p_KConsole,
  _swigc__p_KEventHandler,
  _swigc__p_KKey,
  _swigc__p_KPosition,
  _swigc__p_KProjection,
  _swigc__p_KQuaternion,
  _swigc__p_KSize,
  _swigc__p_KVector,
  _swigc__p_KWindow,
  _swigc__p_KikiAction,
  _swigc__p_KikiActionObject,
  _swigc__p_KikiAtom,
  _swigc__p_KikiBomb,
  _swigc__p_KikiBot,
  _swigc__p_KikiBotFume,
  _swigc__p_KikiBotStatus,
  _swigc__p_KikiBullet,
  _swigc__p_KikiCellText,
  _swigc__p_KikiColumnMenu,
  _swigc__p_KikiController,
  _swigc__p_KikiEvent,
  _swigc__p_KikiFace,
  _swigc__p_KikiGUI,
  _swigc__p_KikiGate,
  _swigc__p_KikiGear,
  _swigc__p_KikiGenerator,
  _swigc__p_KikiLight,
  _swigc__p_KikiMenu,
  _swigc__p_KikiMotorCylinder,
  _swigc__p_KikiMotorGear,
  _swigc__p_KikiMovesAtom,
  _swigc__p_KikiMutant,
  _swigc__p_KikiObject,
  _swigc__p_KikiPageText,
  _swigc__p_KikiPlayback,
  _swigc__p_KikiPlayer,
  _swigc__p_KikiPos,
  _swigc__p_KikiPyAction,
  _swigc__p_KikiPython,
  _swigc__p_KikiPythonWidget,
  _swigc__p_KikiScreenText,
  _swigc__p_KikiScrollMenu,
  _swigc__p_KikiSound,
  _swigc__p_KikiSpikes,
  _swigc__p_KikiStatusDisplay,
  _swigc__p_KikiStone,
  _swigc__p_KikiSwitch,
  _swigc__p_KikiText,
  _swigc__p_KikiValueAtom,
  _swigc__p_KikiValve,
  _swigc__p_KikiWall,
  _swigc__p_KikiWire,
  _swigc__p_KikiWireStone,
  _swigc__p_KikiWorld,
  _swigc__p_char,
  _swigc__p_std__string,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    SWIGINTERN int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    {
        PyDict_SetItemString(d,"KikiAction_ONCE", SWIG_From_int((int)(KikiAction::ONCE))); 
    }
    {
        PyDict_SetItemString(d,"KikiAction_CONTINUOUS", SWIG_From_int((int)(KikiAction::CONTINUOUS))); 
    }
    {
        PyDict_SetItemString(d,"KikiAction_REPEAT", SWIG_From_int((int)(KikiAction::REPEAT))); 
    }
    {
        PyDict_SetItemString(d,"KikiWorld_CAMERA_INSIDE", SWIG_From_int((int)(KikiWorld::CAMERA_INSIDE))); 
    }
    {
        PyDict_SetItemString(d,"KikiWorld_CAMERA_BEHIND", SWIG_From_int((int)(KikiWorld::CAMERA_BEHIND))); 
    }
    {
        PyDict_SetItemString(d,"KikiWorld_CAMERA_FOLLOW", SWIG_From_int((int)(KikiWorld::CAMERA_FOLLOW))); 
    }
    PyDict_SetItemString(d,(char*)"kiki", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"Controller",_wrap_Controller_get, _wrap_Controller_set);
    {
        PyDict_SetItemString(d,"KikiText_base_color", SWIG_From_int((int)(KikiText::base_color))); 
    }
    {
        PyDict_SetItemString(d,"KikiText_bright_color", SWIG_From_int((int)(KikiText::bright_color))); 
    }
    {
        PyDict_SetItemString(d,"KikiText_dark_color", SWIG_From_int((int)(KikiText::dark_color))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_PX", SWIG_From_int((int)(KikiFace::PX))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_X", SWIG_From_int((int)(KikiFace::X))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_PY", SWIG_From_int((int)(KikiFace::PY))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_Y", SWIG_From_int((int)(KikiFace::Y))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_PZ", SWIG_From_int((int)(KikiFace::PZ))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_Z", SWIG_From_int((int)(KikiFace::Z))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_NX", SWIG_From_int((int)(KikiFace::NX))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_NY", SWIG_From_int((int)(KikiFace::NY))); 
    }
    {
        PyDict_SetItemString(d,"KikiFace_NZ", SWIG_From_int((int)(KikiFace::NZ))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_UP", SWIG_From_int((int)(KikiWire::UP))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_RIGHT", SWIG_From_int((int)(KikiWire::RIGHT))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_DOWN", SWIG_From_int((int)(KikiWire::DOWN))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_VERTICAL", SWIG_From_int((int)(KikiWire::VERTICAL))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_LEFT", SWIG_From_int((int)(KikiWire::LEFT))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_HORIZONTAL", SWIG_From_int((int)(KikiWire::HORIZONTAL))); 
    }
    {
        PyDict_SetItemString(d,"KikiWire_ALL", SWIG_From_int((int)(KikiWire::ALL))); 
    }
}

