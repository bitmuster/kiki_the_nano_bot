/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.17u-20030323-0308
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_KikiMenu swig_types[0] 
#define  SWIGTYPE_p_KikiFace swig_types[1] 
#define  SWIGTYPE_p_KikiWireStone swig_types[2] 
#define  SWIGTYPE_p_KikiGUI swig_types[3] 
#define  SWIGTYPE_p_KColor swig_types[4] 
#define  SWIGTYPE_p_KikiPyAction swig_types[5] 
#define  SWIGTYPE_p_KikiAction swig_types[6] 
#define  SWIGTYPE_p_KikiScreenText swig_types[7] 
#define  SWIGTYPE_p_KikiCellText swig_types[8] 
#define  SWIGTYPE_p_KikiPython swig_types[9] 
#define  SWIGTYPE_p_KikiScrollMenu swig_types[10] 
#define  SWIGTYPE_p_KikiPageText swig_types[11] 
#define  SWIGTYPE_p_KVector swig_types[12] 
#define  SWIGTYPE_p_KikiEvent swig_types[13] 
#define  SWIGTYPE_p_KKey swig_types[14] 
#define  SWIGTYPE_p_KikiBot swig_types[15] 
#define  SWIGTYPE_p_KikiMovesAtom swig_types[16] 
#define  SWIGTYPE_p_KikiAtom swig_types[17] 
#define  SWIGTYPE_p_KProjection swig_types[18] 
#define  SWIGTYPE_p_KikiGate swig_types[19] 
#define  SWIGTYPE_p_KikiBullet swig_types[20] 
#define  SWIGTYPE_p_KikiPythonWidget swig_types[21] 
#define  SWIGTYPE_p_KikiSize swig_types[22] 
#define  SWIGTYPE_p_KikiActionObject swig_types[23] 
#define  SWIGTYPE_p_KSize swig_types[24] 
#define  SWIGTYPE_p_KikiBotFume swig_types[25] 
#define  SWIGTYPE_p_KikiMotorGear swig_types[26] 
#define  SWIGTYPE_p_KikiGenerator swig_types[27] 
#define  SWIGTYPE_p_std__string swig_types[28] 
#define  SWIGTYPE_p_KikiValueAtom swig_types[29] 
#define  SWIGTYPE_p_KikiStatusDisplay swig_types[30] 
#define  SWIGTYPE_p_KikiSpikes swig_types[31] 
#define  SWIGTYPE_p_KEventHandler swig_types[32] 
#define  SWIGTYPE_p_KikiMotorCylinder swig_types[33] 
#define  SWIGTYPE_p_KWindow swig_types[34] 
#define  SWIGTYPE_p_KikiColumnMenu swig_types[35] 
#define  SWIGTYPE_p_KikiWall swig_types[36] 
#define  SWIGTYPE_p_KikiBomb swig_types[37] 
#define  SWIGTYPE_p_KikiController swig_types[38] 
#define  SWIGTYPE_p_KikiWorld swig_types[39] 
#define  SWIGTYPE_p_KikiMutant swig_types[40] 
#define  SWIGTYPE_p_KikiLight swig_types[41] 
#define  SWIGTYPE_p_KikiValve swig_types[42] 
#define  SWIGTYPE_p_PyObject swig_types[43] 
#define  SWIGTYPE_p_KikiObject swig_types[44] 
#define  SWIGTYPE_p_KikiBotStatus swig_types[45] 
#define  SWIGTYPE_p_KikiPos swig_types[46] 
#define  SWIGTYPE_p_KikiPlayback swig_types[47] 
#define  SWIGTYPE_p_KikiPlayer swig_types[48] 
#define  SWIGTYPE_p_KikiSound swig_types[49] 
#define  SWIGTYPE_p_KikiSwitch swig_types[50] 
#define  SWIGTYPE_p_KConsole swig_types[51] 
#define  SWIGTYPE_p_KikiStone swig_types[52] 
#define  SWIGTYPE_p_KikiGear swig_types[53] 
#define  SWIGTYPE_p_KPosition swig_types[54] 
#define  SWIGTYPE_p_KikiWire swig_types[55] 
#define  SWIGTYPE_p_KikiText swig_types[56] 
#define  SWIGTYPE_p_KQuaternion swig_types[57] 
static swig_type_info *swig_types[59];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _kiki.so
  ------------------------------------------------*/
#define SWIG_init    init_kiki

#define SWIG_name    "_kiki"


#include "Kiki.h"



#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#include <string>

bool KikiPos___eq__(KikiPos *self,KikiPos const &p){ return (self->x==p.x && self->y==p.y && self->z==p.z); }
bool KikiPos___ne__(KikiPos *self,KikiPos const &p){ return (self->x!=p.x || self->y!=p.y || self->z!=p.z); }
char *KikiPos___str__(KikiPos *self){
                                                static char temp[256];
                                                sprintf(temp,"[ %d, %d, %d ]", self->x,self->y,self->z);
                                                return &temp[0];
                                            }
bool KVector___getitem__(KVector *self,int key){ return (*self)[key]; }
char *KVector___str__(KVector *self){
                                                static char temp[256];
                                                sprintf(temp,"(%f, %f, %f)", (*self)[0],(*self)[1],(*self)[2]);
                                                return &temp[0];
                                            }
char *KQuaternion___str__(KQuaternion *self){
                static char temp[256];
                sprintf(temp,"[ %f: %f, %f, %f ]", self->w, self->x, self->y, self->z);
                return &temp[0];
            }
char *KColor___str__(KColor *self){
                static char temp[256];
                sprintf (temp,"( r:%f g:%f b:%f a:%f)", self->getRed(), self->getGreen(), 
                                                        self->getBlue(), self->getAlpha());
                return &temp[0];
            }
KikiPos KikiWorld_getPickedPos(KikiWorld *self){    
                                            if (self->getPickedPickable())
                                            {
                                                return ((KikiObject*)self->getPickedPickable())->getPos(); 
                                            }
                                            return KikiPos ();
                                        }
extern KikiController Controller;

    const char * replaceTabs	( const std::string & str, int tabWidth )
    {
        static std::string tmpStr;
        tmpStr = str;
        kStringReplaceTabs (tmpStr, tabWidth);
        return tmpStr.c_str();
    } 



    KikiWire *		kikiObjectToWire ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiWire*>(o);
                        }



    KikiGear *		kikiObjectToGear ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiGear*>(o);
                        }



    KikiValve *		kikiObjectToValve ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiValve*>(o);
                        }



    KikiLight *		kikiObjectToLight ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiLight*>(o);
                        }


    KikiCellText *	kikiObjectToCellText ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiCellText*>(o);
                        }


    KikiStone *	kikiObjectToStone ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiStone*>(o);
                        }


    KikiWireStone *	kikiObjectToWireStone ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiWireStone*>(o);
                        }


    KikiWall *	kikiObjectToWall ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiWall*>(o);
                        }


    KikiBomb *	kikiObjectToBomb ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiBomb*>(o);
                        }


    KikiSwitch *	kikiObjectToSwitch ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiSwitch*>(o);
                        }


    KikiGate * 		kikiObjectToGate ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiGate*>(o);
                        }


    KikiSpikes *	kikiObjectToSpikes ( KikiObject * o ) 
                        {
                            return reinterpret_cast<KikiSpikes*>(o);
                        }

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_KikiPos_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiPos_x_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_x_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->x);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiPos_y_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_y_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->y);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_z_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiPos_z_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_z_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_z_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->z);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiPos")) goto fail;
    result = (KikiPos *)new KikiPos();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    int arg3 = (int) 0 ;
    KikiPos *result;
    
    if(!PyArg_ParseTuple(args,(char *)"ii|i:new_KikiPos",&arg1,&arg2,&arg3)) goto fail;
    result = (KikiPos *)new KikiPos(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = 0 ;
    KikiPos *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiPos",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KikiPos *)new KikiPos((KikiPos const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = 0 ;
    KikiPos *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KikiPos",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KikiPos *)new KikiPos((KVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiPos(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KikiPos__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KikiPos, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KikiPos__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KikiPos__SWIG_3(self,args);
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_KikiPos__SWIG_1(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_KikiPos__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_KikiPos'");
    return NULL;
}


static PyObject *_wrap_KikiPos___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___sub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KikiPos const *)arg1)->operator -((KikiPos const &)*arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___add__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KikiPos const *)arg1)->operator +((KikiPos const &)*arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___iadd__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___iadd__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        KikiPos &_result_ref = (arg1)->operator +=((KikiPos const &)*arg2);
        result = (KikiPos *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___isub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___isub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        KikiPos &_result_ref = (arg1)->operator -=((KikiPos const &)*arg2);
        result = (KikiPos *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos_getString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos_getString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiPos const *)arg1)->getString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)KikiPos___eq__(arg1,(KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPos___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)KikiPos___ne__(arg1,(KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPos___str__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPos___str__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)KikiPos___str__(arg1);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KikiPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPos *arg1 = (KikiPos *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KikiPos",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPos_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPos, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KVector__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KVector")) goto fail;
    result = (KVector *)new KVector();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 ;
    float arg2 ;
    float arg3 = (float) (float)0.0 ;
    float arg4 = (float) (float)0.0 ;
    KVector *result;
    
    if(!PyArg_ParseTuple(args,(char *)"ff|ff:new_KVector",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (KVector *)new KVector(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = 0 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KVector *)new KVector((KVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KVector(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KVector__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KVector__SWIG_2(self,args);
        }
    }
    if ((argc >= 2) && (argc <= 4)) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_KVector__SWIG_1(self,args);
                }
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_KVector__SWIG_1(self,args);
                    }
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_KVector__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_KVector'");
    return NULL;
}


static PyObject *_wrap_KVector_reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KVector &_result_ref = (arg1)->reset();
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_normalize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KVector &_result_ref = (arg1)->normalize();
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___iadd__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___iadd__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        KVector &_result_ref = (arg1)->operator +=((KVector const &)*arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___isub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___isub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        KVector &_result_ref = (arg1)->operator -=((KVector const &)*arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___imul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KVector___imul__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KVector &_result_ref = (arg1)->operator *=(arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___idiv__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KVector___idiv__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KVector &_result_ref = (arg1)->operator /=(arg2);
        result = (KVector *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KVector, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_cross(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_cross",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KVector const *)arg1)->cross((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___mul____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    float result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___mul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (float)((KVector const *)arg1)->operator *((KVector const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___sub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KVector const *)arg1)->operator -((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector___add__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KVector const *)arg1)->operator +((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___mul____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KVector___mul__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KVector const *)arg1)->operator *(arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___mul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_KVector___mul____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_KVector___mul____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'KVector___mul__'");
    return NULL;
}


static PyObject *_wrap_KVector___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    float arg2 ;
    KVector result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KVector___div__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KVector const *)arg1)->operator /(arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_perpendicular(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_perpendicular",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KVector const *)arg1)->perpendicular((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_parallel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_parallel",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KVector const *)arg1)->parallel((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_reflect(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_reflect",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KVector const *)arg1)->reflect((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_normal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_normal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KVector const *)arg1)->normal();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_length",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KVector const *)arg1)->length();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_angle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    float result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_angle",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (float)((KVector const *)arg1)->angle((KVector const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_xyangle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector *arg2 = 0 ;
    float result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KVector_xyangle",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (float)((KVector const *)arg1)->xyangle((KVector const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_xyperp(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_xyperp",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KVector const *)arg1)->xyperp();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_round(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_round",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KVector const *)arg1)->round();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector_glVertex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector_glVertex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((KVector const *)arg1)->glVertex();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KVector___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)KVector___getitem__(arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KVector___str__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KVector___str__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)KVector___str__(arg1);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = (KVector *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KVector",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KVector_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KVector, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KQuaternion_w_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KQuaternion_w_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->w = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_w_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_w_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->w);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KQuaternion_x_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_x_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->x);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KQuaternion_y_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_y_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->y);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_z_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KQuaternion_z_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_z_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_z_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->z);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 = (float) 1.0 ;
    float arg2 = (float) 0.0 ;
    float arg3 = (float) 0.0 ;
    float arg4 = (float) 0.0 ;
    KQuaternion *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|ffff:new_KQuaternion",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (KQuaternion *)new KQuaternion(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = 0 ;
    KQuaternion *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KQuaternion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KQuaternion *)new KQuaternion((KQuaternion const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KVector *arg1 = 0 ;
    KQuaternion *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KQuaternion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KQuaternion *)new KQuaternion((KVector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KQuaternion, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KQuaternion(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 4)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_KQuaternion__SWIG_0(self,args);
        }
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_KQuaternion__SWIG_0(self,args);
            }
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_new_KQuaternion__SWIG_0(self,args);
                }
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_KQuaternion__SWIG_0(self,args);
                    }
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_KQuaternion__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KQuaternion, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KQuaternion__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KVector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KQuaternion__SWIG_2(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_KQuaternion'");
    return NULL;
}


static PyObject *_wrap_KQuaternion_rotationAroundVector(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 ;
    KVector *arg2 = 0 ;
    KQuaternion result;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"fO:KQuaternion_rotationAroundVector",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = KQuaternion::rotationAroundVector(arg1,(KVector const &)*arg2);
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_rotate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KVector *arg2 = 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion_rotate",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KQuaternion const *)arg1)->rotate((KVector const &)*arg2);
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_normalize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KQuaternion &_result_ref = (arg1)->normalize();
        result = (KQuaternion *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KQuaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_invert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_invert",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KQuaternion &_result_ref = (arg1)->invert();
        result = (KQuaternion *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KQuaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_conjugate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_conjugate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KQuaternion &_result_ref = (arg1)->conjugate();
        result = (KQuaternion *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KQuaternion, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_getNormal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_getNormal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KQuaternion const *)arg1)->getNormal();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_getConjugate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_getConjugate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KQuaternion const *)arg1)->getConjugate();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_getInverse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_getInverse",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KQuaternion const *)arg1)->getInverse();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_length",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KQuaternion const *)arg1)->length();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_glRotate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion_glRotate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((KQuaternion const *)arg1)->glRotate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion_slerp(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *arg2 = 0 ;
    float arg3 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:KQuaternion_slerp",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KQuaternion const *)arg1)->slerp((KQuaternion const &)*arg2,arg3);
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    KQuaternion *arg2 = 0 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KQuaternion___mul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KQuaternion const *)arg1)->operator *((KQuaternion const &)*arg2);
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KQuaternion___str__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KQuaternion___str__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)KQuaternion___str__(arg1);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KQuaternion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KQuaternion *arg1 = (KQuaternion *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KQuaternion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KQuaternion_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KQuaternion, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KColor__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KColor")) goto fail;
    result = (KColor *)new KColor();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = 0 ;
    KColor *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KColor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KColor *)new KColor((KColor const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 ;
    float arg2 ;
    float arg3 ;
    float arg4 = (float) 1.0 ;
    KColor *result;
    
    if(!PyArg_ParseTuple(args,(char *)"fff|f:new_KColor",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (KColor *)new KColor(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KColor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KColor(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_KColor__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KColor, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_KColor__SWIG_1(self,args);
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_KColor__SWIG_2(self,args);
                    }
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_KColor__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_KColor'");
    return NULL;
}


static PyObject *_wrap_KColor_setValues(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 = (float) (float)1.0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offf|f:KColor_setValues",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setValues(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setRed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KColor_setRed",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setRed(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setGreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KColor_setGreen",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setGreen(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setBlue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KColor_setBlue",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setBlue(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_setAlpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KColor_setAlpha",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setAlpha(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getRed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getRed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KColor const *)arg1)->getRed();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getGreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getGreen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KColor const *)arg1)->getGreen();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getBlue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getBlue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KColor const *)arg1)->getBlue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_getAlpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_getAlpha",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KColor const *)arg1)->getAlpha();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor_glColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor_glColor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((KColor const *)arg1)->glColor();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KColor___str__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KColor___str__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)KColor___str__(arg1);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KColor *arg1 = (KColor *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KColor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KColor_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KColor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KProjection_focusOn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KProjection *arg1 = (KProjection *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KProjection_focusOn",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KProjection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->focusOn((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_setFov(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KProjection *arg1 = (KProjection *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KProjection_setFov",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KProjection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setFov(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_getFov(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KProjection *arg1 = (KProjection *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KProjection_getFov",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KProjection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KProjection const *)arg1)->getFov();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_setViewport(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KProjection *arg1 = (KProjection *) 0 ;
    float arg2 ;
    float arg3 ;
    float arg4 ;
    float arg5 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Offff:KProjection_setViewport",&obj0,&arg2,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KProjection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setViewport(arg2,arg3,arg4,arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KProjection_setPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KProjection *arg1 = (KProjection *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KProjection_setPosition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KProjection,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setPosition((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KProjection_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KProjection, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    KKey *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_KKey",&obj0)) goto fail;
    {
        if (PyString_Check(obj0))
        arg1 = std::string(PyString_AsString(obj0));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (KKey *)new KKey(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KKey, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_name_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KKey *arg1 = (KKey *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KKey_name_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->name = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_name_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KKey *arg1 = (KKey *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KKey_name_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::string *)& ((arg1)->name);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_getUnmodifiedName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KKey *arg1 = (KKey *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KKey_getUnmodifiedName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KKey const *)arg1)->getUnmodifiedName();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KKey_getModifierName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KKey *arg1 = (KKey *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KKey_getModifierName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KKey const *)arg1)->getModifierName();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KKey_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KKey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiAction__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    int arg2 ;
    std::string *arg3 = 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) KikiAction::ONCE ;
    KikiAction *result;
    std::string temp3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO|ii:new_KikiAction",&obj0,&arg2,&obj2,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (KikiAction *)new KikiAction(arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiAction__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    int arg2 = (int) KikiAction::ONCE ;
    KikiAction *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:new_KikiAction",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiAction *)new KikiAction(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiAction(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_KikiAction__SWIG_1(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_KikiAction__SWIG_1(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 5)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_KikiObject, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_KikiAction__SWIG_0(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        if (argc <= 4) {
                            return _wrap_new_KikiAction__SWIG_0(self,args);
                        }
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_KikiAction__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_KikiAction'");
    return NULL;
}


static PyObject *_wrap_KikiAction_getId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAction *arg1 = (KikiAction *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getId",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiAction const *)arg1)->getId();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAction *arg1 = (KikiAction *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((KikiAction const *)arg1)->getName();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getRelativeTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAction *arg1 = (KikiAction *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getRelativeTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getRelativeTime();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getRelativeDelta(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAction *arg1 = (KikiAction *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getRelativeDelta",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getRelativeDelta();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_getDuration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAction *arg1 = (KikiAction *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAction_getDuration",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiAction const *)arg1)->getDuration();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAction_setDuration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAction *arg1 = (KikiAction *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiAction_setDuration",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setDuration(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiAction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiPyAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    PyObject *arg1 = (PyObject *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    std::string *arg3 = 0 ;
    int arg4 = (int) 0 ;
    int arg5 = (int) KikiAction::CONTINUOUS ;
    KikiPyAction *result;
    std::string temp3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO|ii:new_KikiPyAction",&obj0,&obj1,&obj2,&arg4,&arg5)) goto fail;
    arg1 = obj0;
    arg2 = obj1;
    {
        if (PyString_Check(obj2)) {
            temp3 = std::string(PyString_AsString(obj2));
            arg3 = &temp3;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (KikiPyAction *)new KikiPyAction(arg1,arg2,(std::string const &)*arg3,arg4,arg5);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPyAction, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_KikiPyAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPyAction *arg1 = (KikiPyAction *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_KikiPyAction",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPyAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPyAction_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPyAction, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiEvent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    std::string *arg2 = 0 ;
    KikiEvent *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_KikiEvent",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (KikiEvent *)new KikiEvent(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiEvent, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_addAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_addAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_removeAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->removeAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeAllActions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiEvent_removeAllActions",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->removeAllActions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeActionsOfObject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_removeActionsOfObject",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->removeActionsOfObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_removeActionWithName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiEvent_removeActionWithName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->removeActionWithName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_triggerActions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiEvent_triggerActions",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->triggerActions();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiEvent_getTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiEvent *arg1 = (KikiEvent *) 0 ;
    unsigned int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiEvent_getTime",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (unsigned int)((KikiEvent const *)arg1)->getTime();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiEvent_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiEvent, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiActionObject_addAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_addAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_removeAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_removeAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->removeAction(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_startTimedAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    KikiAction *arg2 = (KikiAction *) 0 ;
    int arg3 = (int) -1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:KikiActionObject_startTimedAction",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->startTimedAction(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_startTimer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:KikiActionObject_startTimer",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->startTimer(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getActionWithName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_getActionWithName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (KikiAction *)(arg1)->getActionWithName((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiAction, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getActionWithId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    int arg2 ;
    KikiAction *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiActionObject_getActionWithId",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiAction *)(arg1)->getActionWithId(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiAction, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_addEventWithName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_addEventWithName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (int)(arg1)->addEventWithName((std::string const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getEventWithName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    std::string *arg2 = 0 ;
    KikiEvent *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiActionObject_getEventWithName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (KikiEvent *)(arg1)->getEventWithName((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiEvent, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getEventWithId(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    int arg2 ;
    KikiEvent *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiActionObject_getEventWithId",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiEvent *)(arg1)->getEventWithId(arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiEvent, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiActionObject_getClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiActionObject *arg1 = (KikiActionObject *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiActionObject_getClassName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiActionObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((KikiActionObject const *)arg1)->getClassName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiActionObject_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiActionObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiObject_setName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiObject const *)arg1)->getName();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getPos",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiObject const *)arg1)->getPos();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_setPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setPosition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setPosition((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KVector result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getPosition",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiObject const *)arg1)->getPosition();
    
    {
        KVector * resultptr;
        resultptr = new KVector((KVector &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KVector, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_setOrientation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setOrientation",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setOrientation((KQuaternion const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getOrientation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getOrientation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiObject const *)arg1)->getOrientation();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_setCurrentOrientation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiObject_setCurrentOrientation",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KQuaternion,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setCurrentOrientation((KQuaternion const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getCurrentOrientation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KQuaternion result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getCurrentOrientation",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiObject const *)arg1)->getCurrentOrientation();
    
    {
        KQuaternion * resultptr;
        resultptr = new KQuaternion((KQuaternion &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KQuaternion, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_isSpaceEgoistic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_isSpaceEgoistic",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiObject const *)arg1)->isSpaceEgoistic();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiObject_getClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiObject_getClassName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((KikiObject const *)arg1)->getClassName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiObject_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiObject, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiBotStatus_getMoves(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBotStatus_getMoves",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBotStatus,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiBotStatus const *)arg1)->getMoves();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_setMoves(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiBotStatus_setMoves",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBotStatus,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMoves(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_addMoves(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiBotStatus_addMoves",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBotStatus,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addMoves(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_getMinMoves(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBotStatus_getMinMoves",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBotStatus,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiBotStatus const *)arg1)->getMinMoves();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBotStatus_setMinMoves(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBotStatus *arg1 = (KikiBotStatus *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiBotStatus_setMinMoves",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBotStatus,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setMinMoves(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBotStatus_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBotStatus, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiBotFume_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiBotFume_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiBotFume::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBotFume_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBotFume, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiBot_isDead(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBot *arg1 = (KikiBot *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_isDead",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBot,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiBot const *)arg1)->isDead();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getDown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getDown",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBot,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getDown();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getUp(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getUp",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBot,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getUp();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getDir(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getDir",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBot,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getDir();
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_setMove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBot *arg1 = (KikiBot *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiBot_setMove",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBot,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setMove(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBot_getStatus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBot *arg1 = (KikiBot *) 0 ;
    KikiBotStatus *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiBot_getStatus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiBot,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiBotStatus *)(arg1)->getStatus();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiBotStatus, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBot_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBot, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiStatusDisplay_show(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiStatusDisplay *arg1 = (KikiStatusDisplay *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiStatusDisplay_show",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiStatusDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiStatusDisplay_hide(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiStatusDisplay *arg1 = (KikiStatusDisplay *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiStatusDisplay_hide",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiStatusDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->hide();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiStatusDisplay_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiStatusDisplay, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPlayback_start(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayback_start",&obj0)) goto fail;
    {
        if (PyString_Check(obj0))
        arg1 = std::string(PyString_AsString(obj0));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    KikiPlayback::start(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayback_stop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":KikiPlayback_stop")) goto fail;
    KikiPlayback::stop();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPlayback_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPlayback, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPlayer_die(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_die",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->die();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_reborn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_reborn",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reborn();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_reset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_reset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->reset();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_startRecorder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_startRecorder",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->startRecorder((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_saveRecorder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_saveRecorder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->saveRecorder();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_getProjection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    KProjection *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_getProjection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KProjection *)(arg1)->getProjection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KProjection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_handleKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    KKey *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_handleKey",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->handleKey((KKey const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_handleKeyRelease(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    KKey *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_handleKeyRelease",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KKey,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->handleKeyRelease((KKey const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_recordKeyForAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPlayer *arg1 = (KikiPlayer *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_recordKeyForAction",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->recordKeyForAction((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_getActionForKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    std::string result;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_getActionForKey",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = KikiPlayer::getActionForKey((std::string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_getKeyForAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    std::string result;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPlayer_getKeyForAction",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = KikiPlayer::getKeyForAction((std::string const &)*arg1);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_setKeyForAction(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    std::string temp1 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPlayer_setKeyForAction",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    KikiPlayer::setKeyForAction((std::string const &)*arg1,(std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPlayer_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiPlayer_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiPlayer::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPlayer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPlayer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiMutant(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiMutant *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiMutant")) goto fail;
    result = (KikiMutant *)new KikiMutant();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiMutant, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMutant_die(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiMutant *arg1 = (KikiMutant *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiMutant_die",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiMutant,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->die();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMutant_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiMutant_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiMutant::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMutant_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMutant, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiSound_toggleMute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSound_toggleMute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->toggleMute();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_setMute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSound_setMute",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setMute(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_isMute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSound_isMute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiSound const *)arg1)->isMute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_setSoundVolume(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiSound_setSoundVolume",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setSoundVolume(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_getSoundVolume(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSound_getSoundVolume",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiSound const *)arg1)->getSoundVolume();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_playSound(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    float arg3 = (float) -1.0 ;
    int arg4 = (int) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi|fi:KikiSound_playSound",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->playSound(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSound_playSoundAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSound *arg1 = (KikiSound *) 0 ;
    int arg2 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:KikiSound_playSoundAtPos",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->playSoundAtPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiSound_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiSound, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiWorld_setSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    int arg3 ;
    int arg4 = (int) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii|i:KikiWorld_setSize",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setSize(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiSize result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiWorld const *)arg1)->getSize();
    
    {
        KikiSize * resultptr;
        resultptr = new KikiSize((KikiSize &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiSize, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiWorld const *)arg1)->getName();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_init",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->init();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setDisplayShadows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setDisplayShadows",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setDisplayShadows(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setDisplayRaster(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setDisplayRaster",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setDisplayRaster(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setDisplayBorder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_setDisplayBorder",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setDisplayBorder(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setRasterSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KikiWorld_setRasterSize",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setRasterSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiWorld_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiWorld::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_changeCameraMode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_changeCameraMode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->changeCameraMode();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getCameraMode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getCameraMode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiWorld const *)arg1)->getCameraMode();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setCameraMode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiWorld_setCameraMode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setCameraMode(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getProjection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KProjection *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getProjection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KProjection *)(arg1)->getProjection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KProjection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_addObjectAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_addObjectAtPos",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->addObjectAtPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_setObjectAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_setObjectAtPos",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setObjectAtPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_unsetObject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_unsetObject",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unsetObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_removeObject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_removeObject",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->removeObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_deleteObject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_deleteObject",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->deleteObject(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_deleteAllObjects(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_deleteAllObjects",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->deleteAllObjects();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_deleteObjectsWithClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_deleteObjectsWithClassName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->deleteObjectsWithClassName((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getObjectWithName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    std::string *arg2 = 0 ;
    KikiObject *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getObjectWithName",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (KikiObject *)(arg1)->getObjectWithName((std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_moveObjectToPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_moveObjectToPos",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)(arg1)->moveObjectToPos(arg2,(KikiPos const &)*arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_objectWillMoveToPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    int arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOi:KikiWorld_objectWillMoveToPos",&obj0,&obj1,&obj2,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->objectWillMoveToPos(arg2,(KikiPos const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_objectMovedFromPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiObject *arg2 = (KikiObject *) 0 ;
    KikiPos *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiWorld_objectMovedFromPos",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->objectMovedFromPos(arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getBotAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiBot *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getBotAtPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KikiBot *)((KikiWorld const *)arg1)->getBotAtPos((KikiPos const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiBot, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getOccupantAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiObject *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getOccupantAtPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KikiObject *)((KikiWorld const *)arg1)->getOccupantAtPos((KikiPos const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getRealOccupantAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiObject *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getRealOccupantAtPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (KikiObject *)((KikiWorld const *)arg1)->getRealOccupantAtPos((KikiPos const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiObject, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getNearestValidPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_getNearestValidPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = ((KikiWorld const *)arg1)->getNearestValidPos((KikiPos const &)*arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isInvalidPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isInvalidPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)((KikiWorld const *)arg1)->isInvalidPos((KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isValidPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isValidPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)((KikiWorld const *)arg1)->isValidPos((KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isUnoccupiedPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isUnoccupiedPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)((KikiWorld const *)arg1)->isUnoccupiedPos((KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_isOccupiedPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_isOccupiedPos",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (bool)((KikiWorld const *)arg1)->isOccupiedPos((KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_posToIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos *arg2 = 0 ;
    int result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiWorld_posToIndex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    result = (int)((KikiWorld const *)arg1)->posToIndex((KikiPos const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_indexToPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    int arg2 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiWorld_indexToPos",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiWorld const *)arg1)->indexToPos(arg2);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWorld_getPickedPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWorld *arg1 = (KikiWorld *) 0 ;
    KikiPos result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiWorld_getPickedPos",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = KikiWorld_getPickedPos(arg1);
    
    {
        KikiPos * resultptr;
        resultptr = new KikiPos((KikiPos &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_KikiPos, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWorld_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWorld, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KEventHandler_quit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KEventHandler_quit",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KEventHandler,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->quit();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getMouseState(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getMouseState")) goto fail;
    result = (int)KEventHandler::getMouseState();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getMousePos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KPosition result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getMousePos")) goto fail;
    result = KEventHandler::getMousePos();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->x));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->y));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getMouseDelta(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KPosition result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getMouseDelta")) goto fail;
    result = KEventHandler::getMouseDelta();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->x));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->y));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getScreenSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KSize result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getScreenSize")) goto fail;
    result = KEventHandler::getScreenSize();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->w));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->h));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setScreenSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KSize *arg1 = 0 ;
    bool arg2 = (bool) false ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:KEventHandler_setScreenSize",&obj0,&obj1)) goto fail;
    {
        arg1 = new KSize(PyInt_AsLong(PyTuple_GetItem(obj0, 0)), PyInt_AsLong(PyTuple_GetItem(obj0, 1)));
        if (PyErr_Occurred()) return NULL;
    }
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (bool)KEventHandler::setScreenSize((KSize const &)*arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    {
        if (arg1) delete arg1;
    }
    return resultobj;
    fail:
    {
        if (arg1) delete arg1;
    }
    return NULL;
}


static PyObject *_wrap_KEventHandler_getFullscreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getFullscreen")) goto fail;
    result = (bool)KEventHandler::getFullscreen();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setFullscreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KEventHandler_setFullscreen",&obj0)) goto fail;
    arg1 = (bool) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    KEventHandler::setFullscreen(arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int result;
    
    if(!PyArg_ParseTuple(args,(char *)":KEventHandler_getTime")) goto fail;
    result = (unsigned int)KEventHandler::getTime();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setWireframeMode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KEventHandler_setWireframeMode",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KEventHandler,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setWireframeMode(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_setDisplayFps(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KEventHandler_setDisplayFps",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KEventHandler,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setDisplayFps(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KEventHandler_getDisplayFps(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KEventHandler *arg1 = (KEventHandler *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KEventHandler_getDisplayFps",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KEventHandler,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KEventHandler const *)arg1)->getDisplayFps();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KEventHandler_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KEventHandler, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiController_gui_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiGUI *arg2 = (KikiGUI *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_gui_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiGUI,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->gui = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_gui_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiGUI *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_gui_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiGUI *) ((arg1)->gui);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiGUI, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_sound_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiSound *arg2 = (KikiSound *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_sound_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiSound,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->sound = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_sound_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiSound *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_sound_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiSound *) ((arg1)->sound);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiSound, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_world_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiWorld *arg2 = (KikiWorld *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_world_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiWorld,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->world = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_world_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiWorld *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_world_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiWorld *) ((arg1)->world);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWorld, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPlayer *arg2 = (KikiPlayer *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_player_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPlayer,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->player = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPlayer *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_player_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPlayer *) ((arg1)->player);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPlayer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_python_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPython *arg2 = (KikiPython *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_python_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->python = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_python_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPython *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_python_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPython *) ((arg1)->python);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPython, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_status_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiStatusDisplay *arg2 = (KikiStatusDisplay *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_player_status_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiStatusDisplay,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->player_status = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_player_status_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiStatusDisplay *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_player_status_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiStatusDisplay *) ((arg1)->player_status);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiStatusDisplay, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_timer_event_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiEvent *arg2 = (KikiEvent *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_timer_event_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiEvent,SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN )) == -1) SWIG_fail;
    if (arg1) (arg1)->timer_event = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_timer_event_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiEvent *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_timer_event_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiEvent *) ((arg1)->timer_event);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiEvent, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getPlayer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    KikiPlayer *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getPlayer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPlayer *)(arg1)->getPlayer();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPlayer, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_unmapMsTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiController_unmapMsTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->unmapMsTime(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_mapMsTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiController_mapMsTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->mapMsTime(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_setSpeed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiController_setSpeed",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setSpeed(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getSpeed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getSpeed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiController const *)arg1)->getSpeed();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getKikiHome(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getKikiHome",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getKikiHome();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_setGamma(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:KikiController_setGamma",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setGamma(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getGamma(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_getGamma",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiController const *)arg1)->getGamma();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_displayText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOi:KikiController_displayText",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->displayText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_getLocalizedString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    std::string *arg2 = 0 ;
    std::string result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiController_getLocalizedString",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (arg1)->getLocalizedString((std::string const &)*arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiController_isDebugVersion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiController *arg1 = (KikiController *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiController_isDebugVersion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->isDebugVersion();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiController_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiController, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Controller_set(PyObject *_val) {
    {
        KikiController * temp;
        if ((SWIG_ConvertPtr(_val, (void **) &temp, SWIGTYPE_p_KikiController, SWIG_POINTER_EXCEPTION)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'Controller (KikiController)'");
            return 1;
        }
        Controller = *((KikiController *) temp);
    }
    return 0;
}


static PyObject *_wrap_Controller_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &Controller, SWIGTYPE_p_KikiController, 0);
    return pyobj;
}


static PyObject *_wrap_replaceTabs(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    int arg2 ;
    char *result;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:replaceTabs",&obj0,&arg2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (char *)replaceTabs((std::string const &)*arg1,arg2);
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_isVisible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_isVisible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KWindow const *)arg1)->isVisible();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_setVisibility(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KWindow_setVisibility",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setVisibility(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_toggleVisibility(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_toggleVisibility",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->toggleVisibility();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_maximize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_maximize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->maximize();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_show(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_show",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_hide(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_hide",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->hide();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KWindow_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->close();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_setSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    KSize arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KWindow_setSize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = KSize(PyInt_AsLong(PyTuple_GetItem(obj1, 0)), PyInt_AsLong(PyTuple_GetItem(obj1, 1)));
        if (PyErr_Occurred()) return NULL;
    }
    (arg1)->setSize(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KWindow_setPosition(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KWindow *arg1 = (KWindow *) 0 ;
    KPosition *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KWindow_setPosition",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = new KPosition(PyInt_AsLong(PyTuple_GetItem(obj1, 0)), PyInt_AsLong(PyTuple_GetItem(obj1, 1)));
        if (PyErr_Occurred()) return NULL;
    }
    (arg1)->setPosition((KPosition const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    {
        if (arg2) delete arg2;
    }
    return resultobj;
    fail:
    {
        if (arg2) delete arg2;
    }
    return NULL;
}


static PyObject * KWindow_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KWindow, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string const &arg1_defvalue = "" ;
    std::string *arg1 = (std::string *) &arg1_defvalue ;
    bool arg2 = (bool) true ;
    int arg3 = (int) 0 ;
    KikiText *result;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|OOi:new_KikiText",&obj0,&obj1,&arg3)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0)) {
                temp1 = std::string(PyString_AsString(obj0));
                arg1 = &temp1;
            }else {
                SWIG_exception(SWIG_TypeError, "string expected");
            }
        }
    }
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (KikiText *)new KikiText((std::string const &)*arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiText, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) KikiText::base_color ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:KikiText_setText",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_getText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getText",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((KikiText const *)arg1)->getText();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_isEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_isEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiText const *)arg1)->isEmpty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_addText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    std::string *arg2 = 0 ;
    float arg3 = (float) 1.0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|f:KikiText_addText",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->addText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_getColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    KColor *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getColor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        KColor const &_result_ref = ((KikiText const *)arg1)->getColor();
        result = (KColor *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KColor, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    KColor *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setColor",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setColor((KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setAlpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KikiText_setAlpha",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setAlpha(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_isAnimated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_isAnimated",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiText const *)arg1)->isAnimated();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setAnimated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setAnimated",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setAnimated(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_isCentered(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_isCentered",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiText const *)arg1)->isCentered();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setCentered(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiText_setCentered",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setCentered(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_getWidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getWidth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KikiText const *)arg1)->getWidth();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_getHeight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiText *arg1 = (KikiText *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiText_getHeight",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KikiText const *)arg1)->getHeight();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiText_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiText_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiText::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * KikiGUI_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGUI, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiScreenText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiScreenText *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiScreenText")) goto fail;
    result = (KikiScreenText *)new KikiScreenText();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiScreenText, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScreenText_addText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    std::string *arg2 = 0 ;
    float arg3 = (float) 1.0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|f:KikiScreenText_addText",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiScreenText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->addText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScreenText_setText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    std::string *arg2 = 0 ;
    int arg3 = (int) 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|i:KikiScreenText_setText",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiScreenText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setText((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScreenText_show(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiScreenText_show",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiScreenText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->show();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScreenText_getProjection(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiScreenText *arg1 = (KikiScreenText *) 0 ;
    KProjection *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiScreenText_getProjection",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiScreenText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KProjection *)(arg1)->getProjection();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KProjection, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiScreenText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiScreenText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiMenu(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) -1 ;
    KikiMenu *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiMenu",&arg1)) goto fail;
    result = (KikiMenu *)new KikiMenu(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMenu_addItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *arg3 = (KikiAction *) NULL ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:KikiMenu_addItem",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiMenu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    (arg1)->addItem((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMenu_setEscapeActive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiMenu *arg1 = (KikiMenu *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:KikiMenu_setEscapeActive",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiMenu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->setEscapeActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMenu_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMenu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiScrollMenu(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) 10 ;
    int arg2 = (int) -1 ;
    KikiScrollMenu *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|ii:new_KikiScrollMenu",&arg1,&arg2)) goto fail;
    result = (KikiScrollMenu *)new KikiScrollMenu(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiScrollMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiScrollMenu_addItem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiScrollMenu *arg1 = (KikiScrollMenu *) 0 ;
    std::string *arg2 = 0 ;
    KikiAction *arg3 = (KikiAction *) 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:KikiScrollMenu_addItem",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiScrollMenu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiAction,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    (arg1)->addItem((std::string const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiScrollMenu_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiScrollMenu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiColumnMenu(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) 10 ;
    int arg2 = (int) -1 ;
    KikiColumnMenu *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|ii:new_KikiColumnMenu",&arg1,&arg2)) goto fail;
    result = (KikiColumnMenu *)new KikiColumnMenu(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiColumnMenu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiColumnMenu_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiColumnMenu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiPageText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    bool arg2 ;
    bool arg3 = (bool) true ;
    KikiPageText *result;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:new_KikiPageText",&obj0,&obj1,&obj2)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (KikiPageText *)new KikiPageText((std::string const &)*arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPageText, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPageText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPageText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject * KikiFace_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiFace, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiWire(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    int arg2 = (int) KikiWire::ALL ;
    KikiWire *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|ii:new_KikiWire",&arg1,&arg2)) goto fail;
    result = (KikiWire *)new KikiWire(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWire, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWire_setActive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWire *arg1 = (KikiWire *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:KikiWire_setActive",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiWire,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->setActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWire_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiWire_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiWire::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWire_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWire, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToWire(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiWire *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToWire",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiWire *)kikiObjectToWire(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWire, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    KikiGear *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiGear",&arg1)) goto fail;
    result = (KikiGear *)new KikiGear(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiGear, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGear_setActive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiGear *arg1 = (KikiGear *) 0 ;
    bool arg2 = (bool) true ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:KikiGear_setActive",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiGear,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->setActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGear_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiGear_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiGear::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiGear_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGear, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToGear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiGear *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToGear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiGear *)kikiObjectToGear(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiGear, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiValve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    KikiValve *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiValve",&arg1)) goto fail;
    result = (KikiValve *)new KikiValve(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiValve, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiValve_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiValve_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiValve::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiValve_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiValve, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToValve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiValve *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToValve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiValve *)kikiObjectToValve(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiValve, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiMotorCylinder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    KikiMotorCylinder *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiMotorCylinder",&arg1)) goto fail;
    result = (KikiMotorCylinder *)new KikiMotorCylinder(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiMotorCylinder, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMotorCylinder_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiMotorCylinder_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiMotorCylinder::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMotorCylinder_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMotorCylinder, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiMotorGear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    KikiMotorGear *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiMotorGear",&arg1)) goto fail;
    result = (KikiMotorGear *)new KikiMotorGear(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiMotorGear, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiMotorGear_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiMotorGear_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiMotorGear::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMotorGear_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMotorGear, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiGenerator(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    KikiGenerator *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiGenerator",&arg1)) goto fail;
    result = (KikiGenerator *)new KikiGenerator(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiGenerator, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGenerator_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiGenerator_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiGenerator::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiGenerator_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGenerator, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiLight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiLight *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiLight")) goto fail;
    result = (KikiLight *)new KikiLight();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiLight, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiLight_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiLight_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiLight::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiLight_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiLight, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToLight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiLight *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToLight",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiLight *)kikiObjectToLight(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiLight, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiCellText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    float arg2 = (float) 1.0 ;
    bool arg3 = (bool) true ;
    int arg4 = (int) 0 ;
    KikiCellText *result;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|fOi:new_KikiCellText",&obj0,&arg2,&obj2,&arg4)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (KikiCellText *)new KikiCellText((std::string const &)*arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiCellText, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiCellText_setOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiCellText *arg1 = (KikiCellText *) 0 ;
    KVector *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiCellText_setOffset",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiCellText,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KVector,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->setOffset((KVector const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiCellText_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiCellText_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiCellText::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiCellText_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiCellText, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToCellText(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiCellText *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToCellText",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiCellText *)kikiObjectToCellText(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiCellText, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiStone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiStone *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiStone")) goto fail;
    result = (KikiStone *)new KikiStone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiStone, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiStone_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiStone_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiStone::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiStone_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiStone, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToStone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiStone *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToStone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiStone *)kikiObjectToStone(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiStone, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWireStone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWireStone *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiWireStone")) goto fail;
    result = (KikiWireStone *)new KikiWireStone();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWireStone, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWireStone_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiWireStone_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiWireStone::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWireStone_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWireStone, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToWireStone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiWireStone *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToWireStone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiWireStone *)kikiObjectToWireStone(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWireStone, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiWall(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiWall *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiWall")) goto fail;
    result = (KikiWall *)new KikiWall();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWall, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiWall_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiWall_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiWall::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiWall_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiWall, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToWall(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiWall *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToWall",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiWall *)kikiObjectToWall(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiWall, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiBomb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiBomb *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_KikiBomb")) goto fail;
    result = (KikiBomb *)new KikiBomb();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiBomb, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBomb_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiBomb_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiBomb::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBomb_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBomb, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToBomb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiBomb *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToBomb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiBomb *)kikiObjectToBomb(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiBomb, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiSwitch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 = (bool) false ;
    KikiSwitch *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_KikiSwitch",&obj0)) goto fail;
    if (obj0) {
        arg1 = (bool) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (KikiSwitch *)new KikiSwitch(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiSwitch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_toggle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSwitch *arg1 = (KikiSwitch *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSwitch_toggle",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSwitch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->toggle();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_setActive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSwitch *arg1 = (KikiSwitch *) 0 ;
    bool arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiSwitch_setActive",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSwitch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (bool) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->setActive(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_isActive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiSwitch *arg1 = (KikiSwitch *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiSwitch_isActive",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiSwitch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((KikiSwitch const *)arg1)->isActive();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSwitch_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiSwitch_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiSwitch::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiSwitch_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiSwitch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToSwitch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiSwitch *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToSwitch",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiSwitch *)kikiObjectToSwitch(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiSwitch, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_KikiGate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 = (bool) false ;
    KikiGate *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_KikiGate",&obj0)) goto fail;
    if (obj0) {
        arg1 = (bool) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (KikiGate *)new KikiGate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiGate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiGate_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiGate_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiGate::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiGate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiGate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToGate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiGate *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToGate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiGate *)kikiObjectToGate(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiGate, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAtom_setValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAtom *arg1 = (KikiAtom *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:KikiAtom_setValue",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAtom,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setValue(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiAtom_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiAtom *arg1 = (KikiAtom *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiAtom_getValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiAtom,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((KikiAtom const *)arg1)->getValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiAtom_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiMovesAtom_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiMovesAtom_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiMovesAtom::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiMovesAtom_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiMovesAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiValueAtom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 = (float) 0.0 ;
    float arg2 = (float) 1.0 ;
    float arg3 = (float) 1.0 ;
    int arg4 = (int) 9 ;
    KikiValueAtom *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|fffi:new_KikiValueAtom",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (KikiValueAtom *)new KikiValueAtom(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiValueAtom, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiValueAtom_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiValueAtom_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiValueAtom::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiValueAtom_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiValueAtom, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_KikiSpikes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 = (int) KikiFace::PZ ;
    KikiSpikes *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|i:new_KikiSpikes",&arg1)) goto fail;
    result = (KikiSpikes *)new KikiSpikes(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiSpikes, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiSpikes_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiSpikes_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiSpikes::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiSpikes_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiSpikes, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_kikiObjectToSpikes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiObject *arg1 = (KikiObject *) 0 ;
    KikiSpikes *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:kikiObjectToSpikes",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiObject,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiSpikes *)kikiObjectToSpikes(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiSpikes, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiBullet_setObjectColor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    KColor *arg2 = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:KikiBullet_setObjectColor",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KColor,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    KikiBullet::setObjectColor((char const *)arg1,(KColor const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiBullet_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiBullet, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KConsole__print(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole__print",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    KConsole::print((std::string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KConsole_write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole_write",&obj0)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    KConsole::write((std::string const &)*arg1);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KConsole_printError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string *arg1 = 0 ;
    bool arg2 = (bool) false ;
    std::string temp1 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:KConsole_printError",&obj0,&obj1)) goto fail;
    {
        if (PyString_Check(obj0)) {
            temp1 = std::string(PyString_AsString(obj0));
            arg1 = &temp1;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    KConsole::printError((std::string const &)*arg1,arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KConsole_getConsole(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KConsole *result;
    
    if(!PyArg_ParseTuple(args,(char *)":KConsole_getConsole")) goto fail;
    result = (KConsole *)KConsole::getConsole();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KConsole, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KConsole_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KConsole *arg1 = (KConsole *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KConsole_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KConsole,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KConsole_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KConsole, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPythonWidget_cursorPos_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *arg2 = (KikiPos *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPythonWidget_cursorPos_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->cursorPos = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_cursorPos_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_cursorPos_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPos *)& ((arg1)->cursorPos);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_selectionPos_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *arg2 = (KikiPos *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPythonWidget_selectionPos_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->selectionPos = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_selectionPos_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPos *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_selectionPos_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPos *)& ((arg1)->selectionPos);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPos, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getTextRows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getTextRows",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getTextRows();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getTextCols(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getTextCols",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getTextCols();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getTextSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KSize result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getTextSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((KikiPythonWidget const *)arg1)->getTextSize();
    
    {
        resultobj = PyTuple_New(2);
        PyTuple_SetItem(resultobj, 0, PyInt_FromLong((&result)->w));
        PyTuple_SetItem(resultobj, 1, PyInt_FromLong((&result)->h));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getColumnWidth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getColumnWidth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getColumnWidth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getRowHeight(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getRowHeight",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((KikiPythonWidget const *)arg1)->getRowHeight();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_getPythonWindow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    KikiPython *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPythonWidget_getPythonWindow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPython *)((KikiPythonWidget const *)arg1)->getPythonWindow();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPython, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPythonWidget_displayStringAtPos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPythonWidget *arg1 = (KikiPythonWidget *) 0 ;
    std::string *arg2 = 0 ;
    KikiPos *arg3 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:KikiPythonWidget_displayStringAtPos",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPythonWidget,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_KikiPos,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg3 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    (arg1)->displayStringAtPos((std::string const &)*arg2,(KikiPos const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPythonWidget_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPythonWidget, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_KikiPython_getPythonWidget(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    KikiPythonWidget *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:KikiPython_getPythonWidget",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (KikiPythonWidget *)(arg1)->getPythonWidget();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_KikiPythonWidget, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_setScrollBarUnits(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:KikiPython_setScrollBarUnits",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setScrollBarUnits(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_requestUserInput(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_requestUserInput",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->requestUserInput((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_setTitle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_setTitle",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setTitle((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_setStatus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_setStatus",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setStatus((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_setInput(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_setInput",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->setInput((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_KikiPython_executeFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    KikiPython *arg1 = (KikiPython *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:KikiPython_executeFile",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_KikiPython,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->executeFile((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * KikiPython_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_KikiPython, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"KikiPos_x_set", _wrap_KikiPos_x_set, METH_VARARGS },
	 { (char *)"KikiPos_x_get", _wrap_KikiPos_x_get, METH_VARARGS },
	 { (char *)"KikiPos_y_set", _wrap_KikiPos_y_set, METH_VARARGS },
	 { (char *)"KikiPos_y_get", _wrap_KikiPos_y_get, METH_VARARGS },
	 { (char *)"KikiPos_z_set", _wrap_KikiPos_z_set, METH_VARARGS },
	 { (char *)"KikiPos_z_get", _wrap_KikiPos_z_get, METH_VARARGS },
	 { (char *)"new_KikiPos", _wrap_new_KikiPos, METH_VARARGS },
	 { (char *)"KikiPos___sub__", _wrap_KikiPos___sub__, METH_VARARGS },
	 { (char *)"KikiPos___add__", _wrap_KikiPos___add__, METH_VARARGS },
	 { (char *)"KikiPos___iadd__", _wrap_KikiPos___iadd__, METH_VARARGS },
	 { (char *)"KikiPos___isub__", _wrap_KikiPos___isub__, METH_VARARGS },
	 { (char *)"KikiPos_getString", _wrap_KikiPos_getString, METH_VARARGS },
	 { (char *)"KikiPos___eq__", _wrap_KikiPos___eq__, METH_VARARGS },
	 { (char *)"KikiPos___ne__", _wrap_KikiPos___ne__, METH_VARARGS },
	 { (char *)"KikiPos___str__", _wrap_KikiPos___str__, METH_VARARGS },
	 { (char *)"delete_KikiPos", _wrap_delete_KikiPos, METH_VARARGS },
	 { (char *)"KikiPos_swigregister", KikiPos_swigregister, METH_VARARGS },
	 { (char *)"new_KVector", _wrap_new_KVector, METH_VARARGS },
	 { (char *)"KVector_reset", _wrap_KVector_reset, METH_VARARGS },
	 { (char *)"KVector_normalize", _wrap_KVector_normalize, METH_VARARGS },
	 { (char *)"KVector___iadd__", _wrap_KVector___iadd__, METH_VARARGS },
	 { (char *)"KVector___isub__", _wrap_KVector___isub__, METH_VARARGS },
	 { (char *)"KVector___imul__", _wrap_KVector___imul__, METH_VARARGS },
	 { (char *)"KVector___idiv__", _wrap_KVector___idiv__, METH_VARARGS },
	 { (char *)"KVector_cross", _wrap_KVector_cross, METH_VARARGS },
	 { (char *)"KVector___sub__", _wrap_KVector___sub__, METH_VARARGS },
	 { (char *)"KVector___add__", _wrap_KVector___add__, METH_VARARGS },
	 { (char *)"KVector___mul__", _wrap_KVector___mul__, METH_VARARGS },
	 { (char *)"KVector___div__", _wrap_KVector___div__, METH_VARARGS },
	 { (char *)"KVector_perpendicular", _wrap_KVector_perpendicular, METH_VARARGS },
	 { (char *)"KVector_parallel", _wrap_KVector_parallel, METH_VARARGS },
	 { (char *)"KVector_reflect", _wrap_KVector_reflect, METH_VARARGS },
	 { (char *)"KVector_normal", _wrap_KVector_normal, METH_VARARGS },
	 { (char *)"KVector_length", _wrap_KVector_length, METH_VARARGS },
	 { (char *)"KVector_angle", _wrap_KVector_angle, METH_VARARGS },
	 { (char *)"KVector_xyangle", _wrap_KVector_xyangle, METH_VARARGS },
	 { (char *)"KVector_xyperp", _wrap_KVector_xyperp, METH_VARARGS },
	 { (char *)"KVector_round", _wrap_KVector_round, METH_VARARGS },
	 { (char *)"KVector_glVertex", _wrap_KVector_glVertex, METH_VARARGS },
	 { (char *)"KVector___getitem__", _wrap_KVector___getitem__, METH_VARARGS },
	 { (char *)"KVector___str__", _wrap_KVector___str__, METH_VARARGS },
	 { (char *)"delete_KVector", _wrap_delete_KVector, METH_VARARGS },
	 { (char *)"KVector_swigregister", KVector_swigregister, METH_VARARGS },
	 { (char *)"KQuaternion_w_set", _wrap_KQuaternion_w_set, METH_VARARGS },
	 { (char *)"KQuaternion_w_get", _wrap_KQuaternion_w_get, METH_VARARGS },
	 { (char *)"KQuaternion_x_set", _wrap_KQuaternion_x_set, METH_VARARGS },
	 { (char *)"KQuaternion_x_get", _wrap_KQuaternion_x_get, METH_VARARGS },
	 { (char *)"KQuaternion_y_set", _wrap_KQuaternion_y_set, METH_VARARGS },
	 { (char *)"KQuaternion_y_get", _wrap_KQuaternion_y_get, METH_VARARGS },
	 { (char *)"KQuaternion_z_set", _wrap_KQuaternion_z_set, METH_VARARGS },
	 { (char *)"KQuaternion_z_get", _wrap_KQuaternion_z_get, METH_VARARGS },
	 { (char *)"new_KQuaternion", _wrap_new_KQuaternion, METH_VARARGS },
	 { (char *)"KQuaternion_rotationAroundVector", _wrap_KQuaternion_rotationAroundVector, METH_VARARGS },
	 { (char *)"KQuaternion_rotate", _wrap_KQuaternion_rotate, METH_VARARGS },
	 { (char *)"KQuaternion_normalize", _wrap_KQuaternion_normalize, METH_VARARGS },
	 { (char *)"KQuaternion_invert", _wrap_KQuaternion_invert, METH_VARARGS },
	 { (char *)"KQuaternion_conjugate", _wrap_KQuaternion_conjugate, METH_VARARGS },
	 { (char *)"KQuaternion_getNormal", _wrap_KQuaternion_getNormal, METH_VARARGS },
	 { (char *)"KQuaternion_getConjugate", _wrap_KQuaternion_getConjugate, METH_VARARGS },
	 { (char *)"KQuaternion_getInverse", _wrap_KQuaternion_getInverse, METH_VARARGS },
	 { (char *)"KQuaternion_length", _wrap_KQuaternion_length, METH_VARARGS },
	 { (char *)"KQuaternion_glRotate", _wrap_KQuaternion_glRotate, METH_VARARGS },
	 { (char *)"KQuaternion_slerp", _wrap_KQuaternion_slerp, METH_VARARGS },
	 { (char *)"KQuaternion___mul__", _wrap_KQuaternion___mul__, METH_VARARGS },
	 { (char *)"KQuaternion___str__", _wrap_KQuaternion___str__, METH_VARARGS },
	 { (char *)"delete_KQuaternion", _wrap_delete_KQuaternion, METH_VARARGS },
	 { (char *)"KQuaternion_swigregister", KQuaternion_swigregister, METH_VARARGS },
	 { (char *)"new_KColor", _wrap_new_KColor, METH_VARARGS },
	 { (char *)"KColor_setValues", _wrap_KColor_setValues, METH_VARARGS },
	 { (char *)"KColor_setRed", _wrap_KColor_setRed, METH_VARARGS },
	 { (char *)"KColor_setGreen", _wrap_KColor_setGreen, METH_VARARGS },
	 { (char *)"KColor_setBlue", _wrap_KColor_setBlue, METH_VARARGS },
	 { (char *)"KColor_setAlpha", _wrap_KColor_setAlpha, METH_VARARGS },
	 { (char *)"KColor_getRed", _wrap_KColor_getRed, METH_VARARGS },
	 { (char *)"KColor_getGreen", _wrap_KColor_getGreen, METH_VARARGS },
	 { (char *)"KColor_getBlue", _wrap_KColor_getBlue, METH_VARARGS },
	 { (char *)"KColor_getAlpha", _wrap_KColor_getAlpha, METH_VARARGS },
	 { (char *)"KColor_glColor", _wrap_KColor_glColor, METH_VARARGS },
	 { (char *)"KColor___str__", _wrap_KColor___str__, METH_VARARGS },
	 { (char *)"delete_KColor", _wrap_delete_KColor, METH_VARARGS },
	 { (char *)"KColor_swigregister", KColor_swigregister, METH_VARARGS },
	 { (char *)"KProjection_focusOn", _wrap_KProjection_focusOn, METH_VARARGS },
	 { (char *)"KProjection_setFov", _wrap_KProjection_setFov, METH_VARARGS },
	 { (char *)"KProjection_getFov", _wrap_KProjection_getFov, METH_VARARGS },
	 { (char *)"KProjection_setViewport", _wrap_KProjection_setViewport, METH_VARARGS },
	 { (char *)"KProjection_setPosition", _wrap_KProjection_setPosition, METH_VARARGS },
	 { (char *)"KProjection_swigregister", KProjection_swigregister, METH_VARARGS },
	 { (char *)"new_KKey", _wrap_new_KKey, METH_VARARGS },
	 { (char *)"KKey_name_set", _wrap_KKey_name_set, METH_VARARGS },
	 { (char *)"KKey_name_get", _wrap_KKey_name_get, METH_VARARGS },
	 { (char *)"KKey_getUnmodifiedName", _wrap_KKey_getUnmodifiedName, METH_VARARGS },
	 { (char *)"KKey_getModifierName", _wrap_KKey_getModifierName, METH_VARARGS },
	 { (char *)"KKey_swigregister", KKey_swigregister, METH_VARARGS },
	 { (char *)"new_KikiAction", _wrap_new_KikiAction, METH_VARARGS },
	 { (char *)"KikiAction_getId", _wrap_KikiAction_getId, METH_VARARGS },
	 { (char *)"KikiAction_getName", _wrap_KikiAction_getName, METH_VARARGS },
	 { (char *)"KikiAction_getRelativeTime", _wrap_KikiAction_getRelativeTime, METH_VARARGS },
	 { (char *)"KikiAction_getRelativeDelta", _wrap_KikiAction_getRelativeDelta, METH_VARARGS },
	 { (char *)"KikiAction_getDuration", _wrap_KikiAction_getDuration, METH_VARARGS },
	 { (char *)"KikiAction_setDuration", _wrap_KikiAction_setDuration, METH_VARARGS },
	 { (char *)"KikiAction_swigregister", KikiAction_swigregister, METH_VARARGS },
	 { (char *)"new_KikiPyAction", _wrap_new_KikiPyAction, METH_VARARGS },
	 { (char *)"delete_KikiPyAction", _wrap_delete_KikiPyAction, METH_VARARGS },
	 { (char *)"KikiPyAction_swigregister", KikiPyAction_swigregister, METH_VARARGS },
	 { (char *)"new_KikiEvent", _wrap_new_KikiEvent, METH_VARARGS },
	 { (char *)"KikiEvent_addAction", _wrap_KikiEvent_addAction, METH_VARARGS },
	 { (char *)"KikiEvent_removeAction", _wrap_KikiEvent_removeAction, METH_VARARGS },
	 { (char *)"KikiEvent_removeAllActions", _wrap_KikiEvent_removeAllActions, METH_VARARGS },
	 { (char *)"KikiEvent_removeActionsOfObject", _wrap_KikiEvent_removeActionsOfObject, METH_VARARGS },
	 { (char *)"KikiEvent_removeActionWithName", _wrap_KikiEvent_removeActionWithName, METH_VARARGS },
	 { (char *)"KikiEvent_triggerActions", _wrap_KikiEvent_triggerActions, METH_VARARGS },
	 { (char *)"KikiEvent_getTime", _wrap_KikiEvent_getTime, METH_VARARGS },
	 { (char *)"KikiEvent_swigregister", KikiEvent_swigregister, METH_VARARGS },
	 { (char *)"KikiActionObject_addAction", _wrap_KikiActionObject_addAction, METH_VARARGS },
	 { (char *)"KikiActionObject_removeAction", _wrap_KikiActionObject_removeAction, METH_VARARGS },
	 { (char *)"KikiActionObject_startTimedAction", _wrap_KikiActionObject_startTimedAction, METH_VARARGS },
	 { (char *)"KikiActionObject_startTimer", _wrap_KikiActionObject_startTimer, METH_VARARGS },
	 { (char *)"KikiActionObject_getActionWithName", _wrap_KikiActionObject_getActionWithName, METH_VARARGS },
	 { (char *)"KikiActionObject_getActionWithId", _wrap_KikiActionObject_getActionWithId, METH_VARARGS },
	 { (char *)"KikiActionObject_addEventWithName", _wrap_KikiActionObject_addEventWithName, METH_VARARGS },
	 { (char *)"KikiActionObject_getEventWithName", _wrap_KikiActionObject_getEventWithName, METH_VARARGS },
	 { (char *)"KikiActionObject_getEventWithId", _wrap_KikiActionObject_getEventWithId, METH_VARARGS },
	 { (char *)"KikiActionObject_getClassName", _wrap_KikiActionObject_getClassName, METH_VARARGS },
	 { (char *)"KikiActionObject_swigregister", KikiActionObject_swigregister, METH_VARARGS },
	 { (char *)"KikiObject_setName", _wrap_KikiObject_setName, METH_VARARGS },
	 { (char *)"KikiObject_getName", _wrap_KikiObject_getName, METH_VARARGS },
	 { (char *)"KikiObject_getPos", _wrap_KikiObject_getPos, METH_VARARGS },
	 { (char *)"KikiObject_setPosition", _wrap_KikiObject_setPosition, METH_VARARGS },
	 { (char *)"KikiObject_getPosition", _wrap_KikiObject_getPosition, METH_VARARGS },
	 { (char *)"KikiObject_setOrientation", _wrap_KikiObject_setOrientation, METH_VARARGS },
	 { (char *)"KikiObject_getOrientation", _wrap_KikiObject_getOrientation, METH_VARARGS },
	 { (char *)"KikiObject_setCurrentOrientation", _wrap_KikiObject_setCurrentOrientation, METH_VARARGS },
	 { (char *)"KikiObject_getCurrentOrientation", _wrap_KikiObject_getCurrentOrientation, METH_VARARGS },
	 { (char *)"KikiObject_isSpaceEgoistic", _wrap_KikiObject_isSpaceEgoistic, METH_VARARGS },
	 { (char *)"KikiObject_getClassName", _wrap_KikiObject_getClassName, METH_VARARGS },
	 { (char *)"KikiObject_swigregister", KikiObject_swigregister, METH_VARARGS },
	 { (char *)"KikiBotStatus_getMoves", _wrap_KikiBotStatus_getMoves, METH_VARARGS },
	 { (char *)"KikiBotStatus_setMoves", _wrap_KikiBotStatus_setMoves, METH_VARARGS },
	 { (char *)"KikiBotStatus_addMoves", _wrap_KikiBotStatus_addMoves, METH_VARARGS },
	 { (char *)"KikiBotStatus_getMinMoves", _wrap_KikiBotStatus_getMinMoves, METH_VARARGS },
	 { (char *)"KikiBotStatus_setMinMoves", _wrap_KikiBotStatus_setMinMoves, METH_VARARGS },
	 { (char *)"KikiBotStatus_swigregister", KikiBotStatus_swigregister, METH_VARARGS },
	 { (char *)"KikiBotFume_setObjectColor", _wrap_KikiBotFume_setObjectColor, METH_VARARGS },
	 { (char *)"KikiBotFume_swigregister", KikiBotFume_swigregister, METH_VARARGS },
	 { (char *)"KikiBot_isDead", _wrap_KikiBot_isDead, METH_VARARGS },
	 { (char *)"KikiBot_getDown", _wrap_KikiBot_getDown, METH_VARARGS },
	 { (char *)"KikiBot_getUp", _wrap_KikiBot_getUp, METH_VARARGS },
	 { (char *)"KikiBot_getDir", _wrap_KikiBot_getDir, METH_VARARGS },
	 { (char *)"KikiBot_setMove", _wrap_KikiBot_setMove, METH_VARARGS },
	 { (char *)"KikiBot_getStatus", _wrap_KikiBot_getStatus, METH_VARARGS },
	 { (char *)"KikiBot_swigregister", KikiBot_swigregister, METH_VARARGS },
	 { (char *)"KikiStatusDisplay_show", _wrap_KikiStatusDisplay_show, METH_VARARGS },
	 { (char *)"KikiStatusDisplay_hide", _wrap_KikiStatusDisplay_hide, METH_VARARGS },
	 { (char *)"KikiStatusDisplay_swigregister", KikiStatusDisplay_swigregister, METH_VARARGS },
	 { (char *)"KikiPlayback_start", _wrap_KikiPlayback_start, METH_VARARGS },
	 { (char *)"KikiPlayback_stop", _wrap_KikiPlayback_stop, METH_VARARGS },
	 { (char *)"KikiPlayback_swigregister", KikiPlayback_swigregister, METH_VARARGS },
	 { (char *)"KikiPlayer_die", _wrap_KikiPlayer_die, METH_VARARGS },
	 { (char *)"KikiPlayer_reborn", _wrap_KikiPlayer_reborn, METH_VARARGS },
	 { (char *)"KikiPlayer_reset", _wrap_KikiPlayer_reset, METH_VARARGS },
	 { (char *)"KikiPlayer_startRecorder", _wrap_KikiPlayer_startRecorder, METH_VARARGS },
	 { (char *)"KikiPlayer_saveRecorder", _wrap_KikiPlayer_saveRecorder, METH_VARARGS },
	 { (char *)"KikiPlayer_getProjection", _wrap_KikiPlayer_getProjection, METH_VARARGS },
	 { (char *)"KikiPlayer_handleKey", _wrap_KikiPlayer_handleKey, METH_VARARGS },
	 { (char *)"KikiPlayer_handleKeyRelease", _wrap_KikiPlayer_handleKeyRelease, METH_VARARGS },
	 { (char *)"KikiPlayer_recordKeyForAction", _wrap_KikiPlayer_recordKeyForAction, METH_VARARGS },
	 { (char *)"KikiPlayer_getActionForKey", _wrap_KikiPlayer_getActionForKey, METH_VARARGS },
	 { (char *)"KikiPlayer_getKeyForAction", _wrap_KikiPlayer_getKeyForAction, METH_VARARGS },
	 { (char *)"KikiPlayer_setKeyForAction", _wrap_KikiPlayer_setKeyForAction, METH_VARARGS },
	 { (char *)"KikiPlayer_setObjectColor", _wrap_KikiPlayer_setObjectColor, METH_VARARGS },
	 { (char *)"KikiPlayer_swigregister", KikiPlayer_swigregister, METH_VARARGS },
	 { (char *)"new_KikiMutant", _wrap_new_KikiMutant, METH_VARARGS },
	 { (char *)"KikiMutant_die", _wrap_KikiMutant_die, METH_VARARGS },
	 { (char *)"KikiMutant_setObjectColor", _wrap_KikiMutant_setObjectColor, METH_VARARGS },
	 { (char *)"KikiMutant_swigregister", KikiMutant_swigregister, METH_VARARGS },
	 { (char *)"KikiSound_toggleMute", _wrap_KikiSound_toggleMute, METH_VARARGS },
	 { (char *)"KikiSound_setMute", _wrap_KikiSound_setMute, METH_VARARGS },
	 { (char *)"KikiSound_isMute", _wrap_KikiSound_isMute, METH_VARARGS },
	 { (char *)"KikiSound_setSoundVolume", _wrap_KikiSound_setSoundVolume, METH_VARARGS },
	 { (char *)"KikiSound_getSoundVolume", _wrap_KikiSound_getSoundVolume, METH_VARARGS },
	 { (char *)"KikiSound_playSound", _wrap_KikiSound_playSound, METH_VARARGS },
	 { (char *)"KikiSound_playSoundAtPos", _wrap_KikiSound_playSoundAtPos, METH_VARARGS },
	 { (char *)"KikiSound_swigregister", KikiSound_swigregister, METH_VARARGS },
	 { (char *)"KikiWorld_setSize", _wrap_KikiWorld_setSize, METH_VARARGS },
	 { (char *)"KikiWorld_getSize", _wrap_KikiWorld_getSize, METH_VARARGS },
	 { (char *)"KikiWorld_setName", _wrap_KikiWorld_setName, METH_VARARGS },
	 { (char *)"KikiWorld_getName", _wrap_KikiWorld_getName, METH_VARARGS },
	 { (char *)"KikiWorld_init", _wrap_KikiWorld_init, METH_VARARGS },
	 { (char *)"KikiWorld_setDisplayShadows", _wrap_KikiWorld_setDisplayShadows, METH_VARARGS },
	 { (char *)"KikiWorld_setDisplayRaster", _wrap_KikiWorld_setDisplayRaster, METH_VARARGS },
	 { (char *)"KikiWorld_setDisplayBorder", _wrap_KikiWorld_setDisplayBorder, METH_VARARGS },
	 { (char *)"KikiWorld_setRasterSize", _wrap_KikiWorld_setRasterSize, METH_VARARGS },
	 { (char *)"KikiWorld_setObjectColor", _wrap_KikiWorld_setObjectColor, METH_VARARGS },
	 { (char *)"KikiWorld_changeCameraMode", _wrap_KikiWorld_changeCameraMode, METH_VARARGS },
	 { (char *)"KikiWorld_getCameraMode", _wrap_KikiWorld_getCameraMode, METH_VARARGS },
	 { (char *)"KikiWorld_setCameraMode", _wrap_KikiWorld_setCameraMode, METH_VARARGS },
	 { (char *)"KikiWorld_getProjection", _wrap_KikiWorld_getProjection, METH_VARARGS },
	 { (char *)"KikiWorld_addObjectAtPos", _wrap_KikiWorld_addObjectAtPos, METH_VARARGS },
	 { (char *)"KikiWorld_setObjectAtPos", _wrap_KikiWorld_setObjectAtPos, METH_VARARGS },
	 { (char *)"KikiWorld_unsetObject", _wrap_KikiWorld_unsetObject, METH_VARARGS },
	 { (char *)"KikiWorld_removeObject", _wrap_KikiWorld_removeObject, METH_VARARGS },
	 { (char *)"KikiWorld_deleteObject", _wrap_KikiWorld_deleteObject, METH_VARARGS },
	 { (char *)"KikiWorld_deleteAllObjects", _wrap_KikiWorld_deleteAllObjects, METH_VARARGS },
	 { (char *)"KikiWorld_deleteObjectsWithClassName", _wrap_KikiWorld_deleteObjectsWithClassName, METH_VARARGS },
	 { (char *)"KikiWorld_getObjectWithName", _wrap_KikiWorld_getObjectWithName, METH_VARARGS },
	 { (char *)"KikiWorld_moveObjectToPos", _wrap_KikiWorld_moveObjectToPos, METH_VARARGS },
	 { (char *)"KikiWorld_objectWillMoveToPos", _wrap_KikiWorld_objectWillMoveToPos, METH_VARARGS },
	 { (char *)"KikiWorld_objectMovedFromPos", _wrap_KikiWorld_objectMovedFromPos, METH_VARARGS },
	 { (char *)"KikiWorld_getBotAtPos", _wrap_KikiWorld_getBotAtPos, METH_VARARGS },
	 { (char *)"KikiWorld_getOccupantAtPos", _wrap_KikiWorld_getOccupantAtPos, METH_VARARGS },
	 { (char *)"KikiWorld_getRealOccupantAtPos", _wrap_KikiWorld_getRealOccupantAtPos, METH_VARARGS },
	 { (char *)"KikiWorld_getNearestValidPos", _wrap_KikiWorld_getNearestValidPos, METH_VARARGS },
	 { (char *)"KikiWorld_isInvalidPos", _wrap_KikiWorld_isInvalidPos, METH_VARARGS },
	 { (char *)"KikiWorld_isValidPos", _wrap_KikiWorld_isValidPos, METH_VARARGS },
	 { (char *)"KikiWorld_isUnoccupiedPos", _wrap_KikiWorld_isUnoccupiedPos, METH_VARARGS },
	 { (char *)"KikiWorld_isOccupiedPos", _wrap_KikiWorld_isOccupiedPos, METH_VARARGS },
	 { (char *)"KikiWorld_posToIndex", _wrap_KikiWorld_posToIndex, METH_VARARGS },
	 { (char *)"KikiWorld_indexToPos", _wrap_KikiWorld_indexToPos, METH_VARARGS },
	 { (char *)"KikiWorld_getPickedPos", _wrap_KikiWorld_getPickedPos, METH_VARARGS },
	 { (char *)"KikiWorld_swigregister", KikiWorld_swigregister, METH_VARARGS },
	 { (char *)"KEventHandler_quit", _wrap_KEventHandler_quit, METH_VARARGS },
	 { (char *)"KEventHandler_getMouseState", _wrap_KEventHandler_getMouseState, METH_VARARGS },
	 { (char *)"KEventHandler_getMousePos", _wrap_KEventHandler_getMousePos, METH_VARARGS },
	 { (char *)"KEventHandler_getMouseDelta", _wrap_KEventHandler_getMouseDelta, METH_VARARGS },
	 { (char *)"KEventHandler_getScreenSize", _wrap_KEventHandler_getScreenSize, METH_VARARGS },
	 { (char *)"KEventHandler_setScreenSize", _wrap_KEventHandler_setScreenSize, METH_VARARGS },
	 { (char *)"KEventHandler_getFullscreen", _wrap_KEventHandler_getFullscreen, METH_VARARGS },
	 { (char *)"KEventHandler_setFullscreen", _wrap_KEventHandler_setFullscreen, METH_VARARGS },
	 { (char *)"KEventHandler_getTime", _wrap_KEventHandler_getTime, METH_VARARGS },
	 { (char *)"KEventHandler_setWireframeMode", _wrap_KEventHandler_setWireframeMode, METH_VARARGS },
	 { (char *)"KEventHandler_setDisplayFps", _wrap_KEventHandler_setDisplayFps, METH_VARARGS },
	 { (char *)"KEventHandler_getDisplayFps", _wrap_KEventHandler_getDisplayFps, METH_VARARGS },
	 { (char *)"KEventHandler_swigregister", KEventHandler_swigregister, METH_VARARGS },
	 { (char *)"KikiController_gui_set", _wrap_KikiController_gui_set, METH_VARARGS },
	 { (char *)"KikiController_gui_get", _wrap_KikiController_gui_get, METH_VARARGS },
	 { (char *)"KikiController_sound_set", _wrap_KikiController_sound_set, METH_VARARGS },
	 { (char *)"KikiController_sound_get", _wrap_KikiController_sound_get, METH_VARARGS },
	 { (char *)"KikiController_world_set", _wrap_KikiController_world_set, METH_VARARGS },
	 { (char *)"KikiController_world_get", _wrap_KikiController_world_get, METH_VARARGS },
	 { (char *)"KikiController_player_set", _wrap_KikiController_player_set, METH_VARARGS },
	 { (char *)"KikiController_player_get", _wrap_KikiController_player_get, METH_VARARGS },
	 { (char *)"KikiController_python_set", _wrap_KikiController_python_set, METH_VARARGS },
	 { (char *)"KikiController_python_get", _wrap_KikiController_python_get, METH_VARARGS },
	 { (char *)"KikiController_player_status_set", _wrap_KikiController_player_status_set, METH_VARARGS },
	 { (char *)"KikiController_player_status_get", _wrap_KikiController_player_status_get, METH_VARARGS },
	 { (char *)"KikiController_timer_event_set", _wrap_KikiController_timer_event_set, METH_VARARGS },
	 { (char *)"KikiController_timer_event_get", _wrap_KikiController_timer_event_get, METH_VARARGS },
	 { (char *)"KikiController_getPlayer", _wrap_KikiController_getPlayer, METH_VARARGS },
	 { (char *)"KikiController_unmapMsTime", _wrap_KikiController_unmapMsTime, METH_VARARGS },
	 { (char *)"KikiController_mapMsTime", _wrap_KikiController_mapMsTime, METH_VARARGS },
	 { (char *)"KikiController_setSpeed", _wrap_KikiController_setSpeed, METH_VARARGS },
	 { (char *)"KikiController_getSpeed", _wrap_KikiController_getSpeed, METH_VARARGS },
	 { (char *)"KikiController_getKikiHome", _wrap_KikiController_getKikiHome, METH_VARARGS },
	 { (char *)"KikiController_setGamma", _wrap_KikiController_setGamma, METH_VARARGS },
	 { (char *)"KikiController_getGamma", _wrap_KikiController_getGamma, METH_VARARGS },
	 { (char *)"KikiController_displayText", _wrap_KikiController_displayText, METH_VARARGS },
	 { (char *)"KikiController_getLocalizedString", _wrap_KikiController_getLocalizedString, METH_VARARGS },
	 { (char *)"KikiController_isDebugVersion", _wrap_KikiController_isDebugVersion, METH_VARARGS },
	 { (char *)"KikiController_swigregister", KikiController_swigregister, METH_VARARGS },
	 { (char *)"replaceTabs", _wrap_replaceTabs, METH_VARARGS },
	 { (char *)"KWindow_isVisible", _wrap_KWindow_isVisible, METH_VARARGS },
	 { (char *)"KWindow_setVisibility", _wrap_KWindow_setVisibility, METH_VARARGS },
	 { (char *)"KWindow_toggleVisibility", _wrap_KWindow_toggleVisibility, METH_VARARGS },
	 { (char *)"KWindow_maximize", _wrap_KWindow_maximize, METH_VARARGS },
	 { (char *)"KWindow_show", _wrap_KWindow_show, METH_VARARGS },
	 { (char *)"KWindow_hide", _wrap_KWindow_hide, METH_VARARGS },
	 { (char *)"KWindow_close", _wrap_KWindow_close, METH_VARARGS },
	 { (char *)"KWindow_setSize", _wrap_KWindow_setSize, METH_VARARGS },
	 { (char *)"KWindow_setPosition", _wrap_KWindow_setPosition, METH_VARARGS },
	 { (char *)"KWindow_swigregister", KWindow_swigregister, METH_VARARGS },
	 { (char *)"new_KikiText", _wrap_new_KikiText, METH_VARARGS },
	 { (char *)"KikiText_setText", _wrap_KikiText_setText, METH_VARARGS },
	 { (char *)"KikiText_getText", _wrap_KikiText_getText, METH_VARARGS },
	 { (char *)"KikiText_clear", _wrap_KikiText_clear, METH_VARARGS },
	 { (char *)"KikiText_isEmpty", _wrap_KikiText_isEmpty, METH_VARARGS },
	 { (char *)"KikiText_addText", _wrap_KikiText_addText, METH_VARARGS },
	 { (char *)"KikiText_getColor", _wrap_KikiText_getColor, METH_VARARGS },
	 { (char *)"KikiText_setColor", _wrap_KikiText_setColor, METH_VARARGS },
	 { (char *)"KikiText_setAlpha", _wrap_KikiText_setAlpha, METH_VARARGS },
	 { (char *)"KikiText_isAnimated", _wrap_KikiText_isAnimated, METH_VARARGS },
	 { (char *)"KikiText_setAnimated", _wrap_KikiText_setAnimated, METH_VARARGS },
	 { (char *)"KikiText_isCentered", _wrap_KikiText_isCentered, METH_VARARGS },
	 { (char *)"KikiText_setCentered", _wrap_KikiText_setCentered, METH_VARARGS },
	 { (char *)"KikiText_getWidth", _wrap_KikiText_getWidth, METH_VARARGS },
	 { (char *)"KikiText_getHeight", _wrap_KikiText_getHeight, METH_VARARGS },
	 { (char *)"KikiText_setObjectColor", _wrap_KikiText_setObjectColor, METH_VARARGS },
	 { (char *)"KikiText_swigregister", KikiText_swigregister, METH_VARARGS },
	 { (char *)"KikiGUI_swigregister", KikiGUI_swigregister, METH_VARARGS },
	 { (char *)"new_KikiScreenText", _wrap_new_KikiScreenText, METH_VARARGS },
	 { (char *)"KikiScreenText_addText", _wrap_KikiScreenText_addText, METH_VARARGS },
	 { (char *)"KikiScreenText_setText", _wrap_KikiScreenText_setText, METH_VARARGS },
	 { (char *)"KikiScreenText_show", _wrap_KikiScreenText_show, METH_VARARGS },
	 { (char *)"KikiScreenText_getProjection", _wrap_KikiScreenText_getProjection, METH_VARARGS },
	 { (char *)"KikiScreenText_swigregister", KikiScreenText_swigregister, METH_VARARGS },
	 { (char *)"new_KikiMenu", _wrap_new_KikiMenu, METH_VARARGS },
	 { (char *)"KikiMenu_addItem", _wrap_KikiMenu_addItem, METH_VARARGS },
	 { (char *)"KikiMenu_setEscapeActive", _wrap_KikiMenu_setEscapeActive, METH_VARARGS },
	 { (char *)"KikiMenu_swigregister", KikiMenu_swigregister, METH_VARARGS },
	 { (char *)"new_KikiScrollMenu", _wrap_new_KikiScrollMenu, METH_VARARGS },
	 { (char *)"KikiScrollMenu_addItem", _wrap_KikiScrollMenu_addItem, METH_VARARGS },
	 { (char *)"KikiScrollMenu_swigregister", KikiScrollMenu_swigregister, METH_VARARGS },
	 { (char *)"new_KikiColumnMenu", _wrap_new_KikiColumnMenu, METH_VARARGS },
	 { (char *)"KikiColumnMenu_swigregister", KikiColumnMenu_swigregister, METH_VARARGS },
	 { (char *)"new_KikiPageText", _wrap_new_KikiPageText, METH_VARARGS },
	 { (char *)"KikiPageText_swigregister", KikiPageText_swigregister, METH_VARARGS },
	 { (char *)"KikiFace_swigregister", KikiFace_swigregister, METH_VARARGS },
	 { (char *)"new_KikiWire", _wrap_new_KikiWire, METH_VARARGS },
	 { (char *)"KikiWire_setActive", _wrap_KikiWire_setActive, METH_VARARGS },
	 { (char *)"KikiWire_setObjectColor", _wrap_KikiWire_setObjectColor, METH_VARARGS },
	 { (char *)"KikiWire_swigregister", KikiWire_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToWire", _wrap_kikiObjectToWire, METH_VARARGS },
	 { (char *)"new_KikiGear", _wrap_new_KikiGear, METH_VARARGS },
	 { (char *)"KikiGear_setActive", _wrap_KikiGear_setActive, METH_VARARGS },
	 { (char *)"KikiGear_setObjectColor", _wrap_KikiGear_setObjectColor, METH_VARARGS },
	 { (char *)"KikiGear_swigregister", KikiGear_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToGear", _wrap_kikiObjectToGear, METH_VARARGS },
	 { (char *)"new_KikiValve", _wrap_new_KikiValve, METH_VARARGS },
	 { (char *)"KikiValve_setObjectColor", _wrap_KikiValve_setObjectColor, METH_VARARGS },
	 { (char *)"KikiValve_swigregister", KikiValve_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToValve", _wrap_kikiObjectToValve, METH_VARARGS },
	 { (char *)"new_KikiMotorCylinder", _wrap_new_KikiMotorCylinder, METH_VARARGS },
	 { (char *)"KikiMotorCylinder_setObjectColor", _wrap_KikiMotorCylinder_setObjectColor, METH_VARARGS },
	 { (char *)"KikiMotorCylinder_swigregister", KikiMotorCylinder_swigregister, METH_VARARGS },
	 { (char *)"new_KikiMotorGear", _wrap_new_KikiMotorGear, METH_VARARGS },
	 { (char *)"KikiMotorGear_setObjectColor", _wrap_KikiMotorGear_setObjectColor, METH_VARARGS },
	 { (char *)"KikiMotorGear_swigregister", KikiMotorGear_swigregister, METH_VARARGS },
	 { (char *)"new_KikiGenerator", _wrap_new_KikiGenerator, METH_VARARGS },
	 { (char *)"KikiGenerator_setObjectColor", _wrap_KikiGenerator_setObjectColor, METH_VARARGS },
	 { (char *)"KikiGenerator_swigregister", KikiGenerator_swigregister, METH_VARARGS },
	 { (char *)"new_KikiLight", _wrap_new_KikiLight, METH_VARARGS },
	 { (char *)"KikiLight_setObjectColor", _wrap_KikiLight_setObjectColor, METH_VARARGS },
	 { (char *)"KikiLight_swigregister", KikiLight_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToLight", _wrap_kikiObjectToLight, METH_VARARGS },
	 { (char *)"new_KikiCellText", _wrap_new_KikiCellText, METH_VARARGS },
	 { (char *)"KikiCellText_setOffset", _wrap_KikiCellText_setOffset, METH_VARARGS },
	 { (char *)"KikiCellText_setObjectColor", _wrap_KikiCellText_setObjectColor, METH_VARARGS },
	 { (char *)"KikiCellText_swigregister", KikiCellText_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToCellText", _wrap_kikiObjectToCellText, METH_VARARGS },
	 { (char *)"new_KikiStone", _wrap_new_KikiStone, METH_VARARGS },
	 { (char *)"KikiStone_setObjectColor", _wrap_KikiStone_setObjectColor, METH_VARARGS },
	 { (char *)"KikiStone_swigregister", KikiStone_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToStone", _wrap_kikiObjectToStone, METH_VARARGS },
	 { (char *)"new_KikiWireStone", _wrap_new_KikiWireStone, METH_VARARGS },
	 { (char *)"KikiWireStone_setObjectColor", _wrap_KikiWireStone_setObjectColor, METH_VARARGS },
	 { (char *)"KikiWireStone_swigregister", KikiWireStone_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToWireStone", _wrap_kikiObjectToWireStone, METH_VARARGS },
	 { (char *)"new_KikiWall", _wrap_new_KikiWall, METH_VARARGS },
	 { (char *)"KikiWall_setObjectColor", _wrap_KikiWall_setObjectColor, METH_VARARGS },
	 { (char *)"KikiWall_swigregister", KikiWall_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToWall", _wrap_kikiObjectToWall, METH_VARARGS },
	 { (char *)"new_KikiBomb", _wrap_new_KikiBomb, METH_VARARGS },
	 { (char *)"KikiBomb_setObjectColor", _wrap_KikiBomb_setObjectColor, METH_VARARGS },
	 { (char *)"KikiBomb_swigregister", KikiBomb_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToBomb", _wrap_kikiObjectToBomb, METH_VARARGS },
	 { (char *)"new_KikiSwitch", _wrap_new_KikiSwitch, METH_VARARGS },
	 { (char *)"KikiSwitch_toggle", _wrap_KikiSwitch_toggle, METH_VARARGS },
	 { (char *)"KikiSwitch_setActive", _wrap_KikiSwitch_setActive, METH_VARARGS },
	 { (char *)"KikiSwitch_isActive", _wrap_KikiSwitch_isActive, METH_VARARGS },
	 { (char *)"KikiSwitch_setObjectColor", _wrap_KikiSwitch_setObjectColor, METH_VARARGS },
	 { (char *)"KikiSwitch_swigregister", KikiSwitch_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToSwitch", _wrap_kikiObjectToSwitch, METH_VARARGS },
	 { (char *)"new_KikiGate", _wrap_new_KikiGate, METH_VARARGS },
	 { (char *)"KikiGate_setObjectColor", _wrap_KikiGate_setObjectColor, METH_VARARGS },
	 { (char *)"KikiGate_swigregister", KikiGate_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToGate", _wrap_kikiObjectToGate, METH_VARARGS },
	 { (char *)"KikiAtom_setValue", _wrap_KikiAtom_setValue, METH_VARARGS },
	 { (char *)"KikiAtom_getValue", _wrap_KikiAtom_getValue, METH_VARARGS },
	 { (char *)"KikiAtom_swigregister", KikiAtom_swigregister, METH_VARARGS },
	 { (char *)"KikiMovesAtom_setObjectColor", _wrap_KikiMovesAtom_setObjectColor, METH_VARARGS },
	 { (char *)"KikiMovesAtom_swigregister", KikiMovesAtom_swigregister, METH_VARARGS },
	 { (char *)"new_KikiValueAtom", _wrap_new_KikiValueAtom, METH_VARARGS },
	 { (char *)"KikiValueAtom_setObjectColor", _wrap_KikiValueAtom_setObjectColor, METH_VARARGS },
	 { (char *)"KikiValueAtom_swigregister", KikiValueAtom_swigregister, METH_VARARGS },
	 { (char *)"new_KikiSpikes", _wrap_new_KikiSpikes, METH_VARARGS },
	 { (char *)"KikiSpikes_setObjectColor", _wrap_KikiSpikes_setObjectColor, METH_VARARGS },
	 { (char *)"KikiSpikes_swigregister", KikiSpikes_swigregister, METH_VARARGS },
	 { (char *)"kikiObjectToSpikes", _wrap_kikiObjectToSpikes, METH_VARARGS },
	 { (char *)"KikiBullet_setObjectColor", _wrap_KikiBullet_setObjectColor, METH_VARARGS },
	 { (char *)"KikiBullet_swigregister", KikiBullet_swigregister, METH_VARARGS },
	 { (char *)"KConsole__print", _wrap_KConsole__print, METH_VARARGS },
	 { (char *)"KConsole_write", _wrap_KConsole_write, METH_VARARGS },
	 { (char *)"KConsole_printError", _wrap_KConsole_printError, METH_VARARGS },
	 { (char *)"KConsole_getConsole", _wrap_KConsole_getConsole, METH_VARARGS },
	 { (char *)"KConsole_clear", _wrap_KConsole_clear, METH_VARARGS },
	 { (char *)"KConsole_swigregister", KConsole_swigregister, METH_VARARGS },
	 { (char *)"KikiPythonWidget_cursorPos_set", _wrap_KikiPythonWidget_cursorPos_set, METH_VARARGS },
	 { (char *)"KikiPythonWidget_cursorPos_get", _wrap_KikiPythonWidget_cursorPos_get, METH_VARARGS },
	 { (char *)"KikiPythonWidget_selectionPos_set", _wrap_KikiPythonWidget_selectionPos_set, METH_VARARGS },
	 { (char *)"KikiPythonWidget_selectionPos_get", _wrap_KikiPythonWidget_selectionPos_get, METH_VARARGS },
	 { (char *)"KikiPythonWidget_getTextRows", _wrap_KikiPythonWidget_getTextRows, METH_VARARGS },
	 { (char *)"KikiPythonWidget_getTextCols", _wrap_KikiPythonWidget_getTextCols, METH_VARARGS },
	 { (char *)"KikiPythonWidget_getTextSize", _wrap_KikiPythonWidget_getTextSize, METH_VARARGS },
	 { (char *)"KikiPythonWidget_getColumnWidth", _wrap_KikiPythonWidget_getColumnWidth, METH_VARARGS },
	 { (char *)"KikiPythonWidget_getRowHeight", _wrap_KikiPythonWidget_getRowHeight, METH_VARARGS },
	 { (char *)"KikiPythonWidget_getPythonWindow", _wrap_KikiPythonWidget_getPythonWindow, METH_VARARGS },
	 { (char *)"KikiPythonWidget_displayStringAtPos", _wrap_KikiPythonWidget_displayStringAtPos, METH_VARARGS },
	 { (char *)"KikiPythonWidget_swigregister", KikiPythonWidget_swigregister, METH_VARARGS },
	 { (char *)"KikiPython_getPythonWidget", _wrap_KikiPython_getPythonWidget, METH_VARARGS },
	 { (char *)"KikiPython_setScrollBarUnits", _wrap_KikiPython_setScrollBarUnits, METH_VARARGS },
	 { (char *)"KikiPython_requestUserInput", _wrap_KikiPython_requestUserInput, METH_VARARGS },
	 { (char *)"KikiPython_setTitle", _wrap_KikiPython_setTitle, METH_VARARGS },
	 { (char *)"KikiPython_setStatus", _wrap_KikiPython_setStatus, METH_VARARGS },
	 { (char *)"KikiPython_setInput", _wrap_KikiPython_setInput, METH_VARARGS },
	 { (char *)"KikiPython_executeFile", _wrap_KikiPython_executeFile, METH_VARARGS },
	 { (char *)"KikiPython_swigregister", KikiPython_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_KikiColumnMenuTo_p_KikiMenu(void *x) {
    return (void *)((KikiMenu *)  ((KikiColumnMenu *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiMenu(void *x) {
    return (void *)((KikiMenu *)  ((KikiScrollMenu *) x));
}
static void *_p_KikiValveTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *)  ((KikiValve *) x));
}
static void *_p_KikiMotorGearTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *) (KikiGear *) ((KikiMotorGear *) x));
}
static void *_p_KikiGeneratorTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *) (KikiGear *) ((KikiGenerator *) x));
}
static void *_p_KikiGearTo_p_KikiFace(void *x) {
    return (void *)((KikiFace *)  ((KikiGear *) x));
}
static void *_p_KikiPyActionTo_p_KikiAction(void *x) {
    return (void *)((KikiAction *)  ((KikiPyAction *) x));
}
static void *_p_KikiColumnMenuTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *) (KikiMenu *) ((KikiColumnMenu *) x));
}
static void *_p_KikiMenuTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *)  ((KikiMenu *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *) (KikiMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiPageTextTo_p_KikiScreenText(void *x) {
    return (void *)((KikiScreenText *)  ((KikiPageText *) x));
}
static void *_p_KikiMutantTo_p_KikiBot(void *x) {
    return (void *)((KikiBot *)  ((KikiMutant *) x));
}
static void *_p_KikiPlayerTo_p_KikiBot(void *x) {
    return (void *)((KikiBot *)  ((KikiPlayer *) x));
}
static void *_p_KikiValueAtomTo_p_KikiAtom(void *x) {
    return (void *)((KikiAtom *)  ((KikiValueAtom *) x));
}
static void *_p_KikiMovesAtomTo_p_KikiAtom(void *x) {
    return (void *)((KikiAtom *)  ((KikiMovesAtom *) x));
}
static void *_p_KikiLightTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiLight *) x));
}
static void *_p_KikiCellTextTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiCellText *) x));
}
static void *_p_KikiWireStoneTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiStone *) ((KikiWireStone *) x));
}
static void *_p_KikiScreenTextTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *)  ((KikiScreenText *) x));
}
static void *_p_KikiSpikesTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiSpikes *) x));
}
static void *_p_KikiBombTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBomb *) x));
}
static void *_p_KikiAtomTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiAtom *) x));
}
static void *_p_KikiSwitchTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiSwitch *) x));
}
static void *_p_KikiValueAtomTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiAtom *) ((KikiValueAtom *) x));
}
static void *_p_KikiBotFumeTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBotFume *) x));
}
static void *_p_KikiWireTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiWire *) x));
}
static void *_p_KikiMotorGearTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiGear *) ((KikiMotorGear *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *)(KikiMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiMutantTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiBot *) ((KikiMutant *) x));
}
static void *_p_KikiColumnMenuTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *)(KikiMenu *) ((KikiColumnMenu *) x));
}
static void *_p_KikiMenuTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *) ((KikiMenu *) x));
}
static void *_p_KikiBotTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBot *) x));
}
static void *_p_KikiWallTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiWall *) x));
}
static void *_p_KikiMovesAtomTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiAtom *) ((KikiMovesAtom *) x));
}
static void *_p_KikiBulletTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiBullet *) x));
}
static void *_p_KikiStoneTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiStone *) x));
}
static void *_p_KikiGearTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiGear *) x));
}
static void *_p_KikiControllerTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *)  ((KikiController *) x));
}
static void *_p_KikiPageTextTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiScreenText *) ((KikiPageText *) x));
}
static void *_p_KikiObjectTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *)  ((KikiObject *) x));
}
static void *_p_KikiValveTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiValve *) x));
}
static void *_p_KikiMotorCylinderTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *) ((KikiMotorCylinder *) x));
}
static void *_p_KikiGateTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiSwitch *) ((KikiGate *) x));
}
static void *_p_KikiPlayerTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiBot *) ((KikiPlayer *) x));
}
static void *_p_KikiGeneratorTo_p_KikiActionObject(void *x) {
    return (void *)((KikiActionObject *) (KikiObject *)(KikiGear *) ((KikiGenerator *) x));
}
static void *_p_KikiControllerTo_p_KEventHandler(void *x) {
    return (void *)((KEventHandler *)  ((KikiController *) x));
}
static void *_p_KikiGUITo_p_KWindow(void *x) {
    return (void *)((KWindow *)  ((KikiGUI *) x));
}
static void *_p_KikiPythonTo_p_KWindow(void *x) {
    return (void *)((KWindow *)  ((KikiPython *) x));
}
static void *_p_KConsoleTo_p_KWindow(void *x) {
    return (void *)((KWindow *)  ((KConsole *) x));
}
static void *_p_KikiWireStoneTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiStone *) ((KikiWireStone *) x));
}
static void *_p_KikiLightTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiLight *) x));
}
static void *_p_KikiCellTextTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiCellText *) x));
}
static void *_p_KikiSpikesTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiSpikes *) x));
}
static void *_p_KikiBombTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBomb *) x));
}
static void *_p_KikiAtomTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiAtom *) x));
}
static void *_p_KikiSwitchTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiSwitch *) x));
}
static void *_p_KikiValueAtomTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiAtom *) ((KikiValueAtom *) x));
}
static void *_p_KikiBotFumeTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBotFume *) x));
}
static void *_p_KikiWireTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiWire *) x));
}
static void *_p_KikiMotorGearTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiGear *) ((KikiMotorGear *) x));
}
static void *_p_KikiMutantTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiBot *) ((KikiMutant *) x));
}
static void *_p_KikiBotTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBot *) x));
}
static void *_p_KikiWallTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiWall *) x));
}
static void *_p_KikiMovesAtomTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiAtom *) ((KikiMovesAtom *) x));
}
static void *_p_KikiBulletTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiBullet *) x));
}
static void *_p_KikiStoneTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiStone *) x));
}
static void *_p_KikiGearTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiGear *) x));
}
static void *_p_KikiMotorCylinderTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiMotorCylinder *) x));
}
static void *_p_KikiValveTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *)  ((KikiValve *) x));
}
static void *_p_KikiGateTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiSwitch *) ((KikiGate *) x));
}
static void *_p_KikiPlayerTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiBot *) ((KikiPlayer *) x));
}
static void *_p_KikiGeneratorTo_p_KikiObject(void *x) {
    return (void *)((KikiObject *) (KikiGear *) ((KikiGenerator *) x));
}
static void *_p_KikiGateTo_p_KikiSwitch(void *x) {
    return (void *)((KikiSwitch *)  ((KikiGate *) x));
}
static void *_p_KikiWireStoneTo_p_KikiStone(void *x) {
    return (void *)((KikiStone *)  ((KikiWireStone *) x));
}
static void *_p_KikiMotorGearTo_p_KikiGear(void *x) {
    return (void *)((KikiGear *)  ((KikiMotorGear *) x));
}
static void *_p_KikiGeneratorTo_p_KikiGear(void *x) {
    return (void *)((KikiGear *)  ((KikiGenerator *) x));
}
static void *_p_KikiColumnMenuTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *)(KikiMenu *) ((KikiColumnMenu *) x));
}
static void *_p_KikiCellTextTo_p_KikiText(void *x) {
    return (void *)((KikiText *)  ((KikiCellText *) x));
}
static void *_p_KikiScreenTextTo_p_KikiText(void *x) {
    return (void *)((KikiText *)  ((KikiScreenText *) x));
}
static void *_p_KikiMenuTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *) ((KikiMenu *) x));
}
static void *_p_KikiScrollMenuTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *)(KikiMenu *) ((KikiScrollMenu *) x));
}
static void *_p_KikiPageTextTo_p_KikiText(void *x) {
    return (void *)((KikiText *) (KikiScreenText *) ((KikiPageText *) x));
}
static swig_type_info _swigt__p_KikiMenu[] = {{"_p_KikiMenu", 0, "KikiMenu *", 0},{"_p_KikiColumnMenu", _p_KikiColumnMenuTo_p_KikiMenu},{"_p_KikiMenu"},{"_p_KikiScrollMenu", _p_KikiScrollMenuTo_p_KikiMenu},{0}};
static swig_type_info _swigt__p_KikiFace[] = {{"_p_KikiFace", 0, "KikiFace *", 0},{"_p_KikiValve", _p_KikiValveTo_p_KikiFace},{"_p_KikiMotorGear", _p_KikiMotorGearTo_p_KikiFace},{"_p_KikiGenerator", _p_KikiGeneratorTo_p_KikiFace},{"_p_KikiFace"},{"_p_KikiGear", _p_KikiGearTo_p_KikiFace},{0}};
static swig_type_info _swigt__p_KikiWireStone[] = {{"_p_KikiWireStone", 0, "KikiWireStone *", 0},{"_p_KikiWireStone"},{0}};
static swig_type_info _swigt__p_KikiGUI[] = {{"_p_KikiGUI", 0, "KikiGUI *", 0},{"_p_KikiGUI"},{0}};
static swig_type_info _swigt__p_KColor[] = {{"_p_KColor", 0, "KColor *", 0},{"_p_KColor"},{0}};
static swig_type_info _swigt__p_KikiPyAction[] = {{"_p_KikiPyAction", 0, "KikiPyAction *", 0},{"_p_KikiPyAction"},{0}};
static swig_type_info _swigt__p_KikiAction[] = {{"_p_KikiAction", 0, "KikiAction *", 0},{"_p_KikiAction"},{"_p_KikiPyAction", _p_KikiPyActionTo_p_KikiAction},{0}};
static swig_type_info _swigt__p_KikiScreenText[] = {{"_p_KikiScreenText", 0, "KikiScreenText *", 0},{"_p_KikiColumnMenu", _p_KikiColumnMenuTo_p_KikiScreenText},{"_p_KikiScreenText"},{"_p_KikiMenu", _p_KikiMenuTo_p_KikiScreenText},{"_p_KikiScrollMenu", _p_KikiScrollMenuTo_p_KikiScreenText},{"_p_KikiPageText", _p_KikiPageTextTo_p_KikiScreenText},{0}};
static swig_type_info _swigt__p_KikiCellText[] = {{"_p_KikiCellText", 0, "KikiCellText *", 0},{"_p_KikiCellText"},{0}};
static swig_type_info _swigt__p_KikiPython[] = {{"_p_KikiPython", 0, "KikiPython *", 0},{"_p_KikiPython"},{0}};
static swig_type_info _swigt__p_KikiScrollMenu[] = {{"_p_KikiScrollMenu", 0, "KikiScrollMenu *", 0},{"_p_KikiScrollMenu"},{0}};
static swig_type_info _swigt__p_KikiPageText[] = {{"_p_KikiPageText", 0, "KikiPageText *", 0},{"_p_KikiPageText"},{0}};
static swig_type_info _swigt__p_KVector[] = {{"_p_KVector", 0, "KVector *", 0},{"_p_KVector"},{0}};
static swig_type_info _swigt__p_KikiEvent[] = {{"_p_KikiEvent", 0, "KikiEvent *", 0},{"_p_KikiEvent"},{0}};
static swig_type_info _swigt__p_KKey[] = {{"_p_KKey", 0, "KKey *", 0},{"_p_KKey"},{0}};
static swig_type_info _swigt__p_KikiBot[] = {{"_p_KikiBot", 0, "KikiBot *", 0},{"_p_KikiMutant", _p_KikiMutantTo_p_KikiBot},{"_p_KikiBot"},{"_p_KikiPlayer", _p_KikiPlayerTo_p_KikiBot},{0}};
static swig_type_info _swigt__p_KikiMovesAtom[] = {{"_p_KikiMovesAtom", 0, "KikiMovesAtom *", 0},{"_p_KikiMovesAtom"},{0}};
static swig_type_info _swigt__p_KikiAtom[] = {{"_p_KikiAtom", 0, "KikiAtom *", 0},{"_p_KikiValueAtom", _p_KikiValueAtomTo_p_KikiAtom},{"_p_KikiAtom"},{"_p_KikiMovesAtom", _p_KikiMovesAtomTo_p_KikiAtom},{0}};
static swig_type_info _swigt__p_KProjection[] = {{"_p_KProjection", 0, "KProjection *", 0},{"_p_KProjection"},{0}};
static swig_type_info _swigt__p_KikiGate[] = {{"_p_KikiGate", 0, "KikiGate *", 0},{"_p_KikiGate"},{0}};
static swig_type_info _swigt__p_KikiBullet[] = {{"_p_KikiBullet", 0, "KikiBullet *", 0},{"_p_KikiBullet"},{0}};
static swig_type_info _swigt__p_KikiPythonWidget[] = {{"_p_KikiPythonWidget", 0, "KikiPythonWidget *", 0},{"_p_KikiPythonWidget"},{0}};
static swig_type_info _swigt__p_KikiSize[] = {{"_p_KikiSize", 0, "KikiSize *", 0},{"_p_KikiSize"},{"_p_KikiPos"},{0}};
static swig_type_info _swigt__p_KikiActionObject[] = {{"_p_KikiActionObject", 0, "KikiActionObject *", 0},{"_p_KikiWireStone", _p_KikiWireStoneTo_p_KikiActionObject},{"_p_KikiLight", _p_KikiLightTo_p_KikiActionObject},{"_p_KikiCellText", _p_KikiCellTextTo_p_KikiActionObject},{"_p_KikiActionObject"},{"_p_KikiScreenText", _p_KikiScreenTextTo_p_KikiActionObject},{"_p_KikiSpikes", _p_KikiSpikesTo_p_KikiActionObject},{"_p_KikiBomb", _p_KikiBombTo_p_KikiActionObject},{"_p_KikiAtom", _p_KikiAtomTo_p_KikiActionObject},{"_p_KikiValueAtom", _p_KikiValueAtomTo_p_KikiActionObject},{"_p_KikiSwitch", _p_KikiSwitchTo_p_KikiActionObject},{"_p_KikiBotFume", _p_KikiBotFumeTo_p_KikiActionObject},{"_p_KikiWire", _p_KikiWireTo_p_KikiActionObject},{"_p_KikiMotorGear", _p_KikiMotorGearTo_p_KikiActionObject},{"_p_KikiScrollMenu", _p_KikiScrollMenuTo_p_KikiActionObject},{"_p_KikiColumnMenu", _p_KikiColumnMenuTo_p_KikiActionObject},{"_p_KikiMutant", _p_KikiMutantTo_p_KikiActionObject},{"_p_KikiMenu", _p_KikiMenuTo_p_KikiActionObject},{"_p_KikiMovesAtom", _p_KikiMovesAtomTo_p_KikiActionObject},{"_p_KikiBot", _p_KikiBotTo_p_KikiActionObject},{"_p_KikiWall", _p_KikiWallTo_p_KikiActionObject},{"_p_KikiBullet", _p_KikiBulletTo_p_KikiActionObject},{"_p_KikiStone", _p_KikiStoneTo_p_KikiActionObject},{"_p_KikiGear", _p_KikiGearTo_p_KikiActionObject},{"_p_KikiController", _p_KikiControllerTo_p_KikiActionObject},{"_p_KikiPageText", _p_KikiPageTextTo_p_KikiActionObject},{"_p_KikiGate", _p_KikiGateTo_p_KikiActionObject},{"_p_KikiObject", _p_KikiObjectTo_p_KikiActionObject},{"_p_KikiMotorCylinder", _p_KikiMotorCylinderTo_p_KikiActionObject},{"_p_KikiValve", _p_KikiValveTo_p_KikiActionObject},{"_p_KikiPlayer", _p_KikiPlayerTo_p_KikiActionObject},{"_p_KikiGenerator", _p_KikiGeneratorTo_p_KikiActionObject},{0}};
static swig_type_info _swigt__p_KSize[] = {{"_p_KSize", 0, "KSize *", 0},{"_p_KSize"},{0}};
static swig_type_info _swigt__p_KikiBotFume[] = {{"_p_KikiBotFume", 0, "KikiBotFume *", 0},{"_p_KikiBotFume"},{0}};
static swig_type_info _swigt__p_KikiMotorGear[] = {{"_p_KikiMotorGear", 0, "KikiMotorGear *", 0},{"_p_KikiMotorGear"},{0}};
static swig_type_info _swigt__p_KikiGenerator[] = {{"_p_KikiGenerator", 0, "KikiGenerator *", 0},{"_p_KikiGenerator"},{0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0},{"_p_std__string"},{0}};
static swig_type_info _swigt__p_KikiValueAtom[] = {{"_p_KikiValueAtom", 0, "KikiValueAtom *", 0},{"_p_KikiValueAtom"},{0}};
static swig_type_info _swigt__p_KikiStatusDisplay[] = {{"_p_KikiStatusDisplay", 0, "KikiStatusDisplay *", 0},{"_p_KikiStatusDisplay"},{0}};
static swig_type_info _swigt__p_KikiSpikes[] = {{"_p_KikiSpikes", 0, "KikiSpikes *", 0},{"_p_KikiSpikes"},{0}};
static swig_type_info _swigt__p_KEventHandler[] = {{"_p_KEventHandler", 0, "KEventHandler *", 0},{"_p_KikiController", _p_KikiControllerTo_p_KEventHandler},{"_p_KEventHandler"},{0}};
static swig_type_info _swigt__p_KikiMotorCylinder[] = {{"_p_KikiMotorCylinder", 0, "KikiMotorCylinder *", 0},{"_p_KikiMotorCylinder"},{0}};
static swig_type_info _swigt__p_KWindow[] = {{"_p_KWindow", 0, "KWindow *", 0},{"_p_KikiGUI", _p_KikiGUITo_p_KWindow},{"_p_KikiPython", _p_KikiPythonTo_p_KWindow},{"_p_KWindow"},{"_p_KConsole", _p_KConsoleTo_p_KWindow},{0}};
static swig_type_info _swigt__p_KikiColumnMenu[] = {{"_p_KikiColumnMenu", 0, "KikiColumnMenu *", 0},{"_p_KikiColumnMenu"},{0}};
static swig_type_info _swigt__p_KikiWall[] = {{"_p_KikiWall", 0, "KikiWall *", 0},{"_p_KikiWall"},{0}};
static swig_type_info _swigt__p_KikiBomb[] = {{"_p_KikiBomb", 0, "KikiBomb *", 0},{"_p_KikiBomb"},{0}};
static swig_type_info _swigt__p_KikiController[] = {{"_p_KikiController", 0, "KikiController *", 0},{"_p_KikiController"},{0}};
static swig_type_info _swigt__p_KikiWorld[] = {{"_p_KikiWorld", 0, "KikiWorld *", 0},{"_p_KikiWorld"},{0}};
static swig_type_info _swigt__p_KikiMutant[] = {{"_p_KikiMutant", 0, "KikiMutant *", 0},{"_p_KikiMutant"},{0}};
static swig_type_info _swigt__p_KikiLight[] = {{"_p_KikiLight", 0, "KikiLight *", 0},{"_p_KikiLight"},{0}};
static swig_type_info _swigt__p_KikiValve[] = {{"_p_KikiValve", 0, "KikiValve *", 0},{"_p_KikiValve"},{0}};
static swig_type_info _swigt__p_PyObject[] = {{"_p_PyObject", 0, "PyObject *", 0},{"_p_PyObject"},{0}};
static swig_type_info _swigt__p_KikiObject[] = {{"_p_KikiObject", 0, "KikiObject *", 0},{"_p_KikiWireStone", _p_KikiWireStoneTo_p_KikiObject},{"_p_KikiLight", _p_KikiLightTo_p_KikiObject},{"_p_KikiCellText", _p_KikiCellTextTo_p_KikiObject},{"_p_KikiSpikes", _p_KikiSpikesTo_p_KikiObject},{"_p_KikiBomb", _p_KikiBombTo_p_KikiObject},{"_p_KikiAtom", _p_KikiAtomTo_p_KikiObject},{"_p_KikiValueAtom", _p_KikiValueAtomTo_p_KikiObject},{"_p_KikiSwitch", _p_KikiSwitchTo_p_KikiObject},{"_p_KikiBotFume", _p_KikiBotFumeTo_p_KikiObject},{"_p_KikiWire", _p_KikiWireTo_p_KikiObject},{"_p_KikiMotorGear", _p_KikiMotorGearTo_p_KikiObject},{"_p_KikiMutant", _p_KikiMutantTo_p_KikiObject},{"_p_KikiMovesAtom", _p_KikiMovesAtomTo_p_KikiObject},{"_p_KikiBot", _p_KikiBotTo_p_KikiObject},{"_p_KikiWall", _p_KikiWallTo_p_KikiObject},{"_p_KikiBullet", _p_KikiBulletTo_p_KikiObject},{"_p_KikiStone", _p_KikiStoneTo_p_KikiObject},{"_p_KikiGear", _p_KikiGearTo_p_KikiObject},{"_p_KikiGate", _p_KikiGateTo_p_KikiObject},{"_p_KikiObject"},{"_p_KikiMotorCylinder", _p_KikiMotorCylinderTo_p_KikiObject},{"_p_KikiValve", _p_KikiValveTo_p_KikiObject},{"_p_KikiPlayer", _p_KikiPlayerTo_p_KikiObject},{"_p_KikiGenerator", _p_KikiGeneratorTo_p_KikiObject},{0}};
static swig_type_info _swigt__p_KikiBotStatus[] = {{"_p_KikiBotStatus", 0, "KikiBotStatus *", 0},{"_p_KikiBotStatus"},{0}};
static swig_type_info _swigt__p_KikiPos[] = {{"_p_KikiPos", 0, "KikiPos *", 0},{"_p_KikiSize"},{"_p_KikiPos"},{0}};
static swig_type_info _swigt__p_KikiPlayback[] = {{"_p_KikiPlayback", 0, "KikiPlayback *", 0},{"_p_KikiPlayback"},{0}};
static swig_type_info _swigt__p_KikiPlayer[] = {{"_p_KikiPlayer", 0, "KikiPlayer *", 0},{"_p_KikiPlayer"},{0}};
static swig_type_info _swigt__p_KikiSound[] = {{"_p_KikiSound", 0, "KikiSound *", 0},{"_p_KikiSound"},{0}};
static swig_type_info _swigt__p_KikiSwitch[] = {{"_p_KikiSwitch", 0, "KikiSwitch *", 0},{"_p_KikiSwitch"},{"_p_KikiGate", _p_KikiGateTo_p_KikiSwitch},{0}};
static swig_type_info _swigt__p_KConsole[] = {{"_p_KConsole", 0, "KConsole *", 0},{"_p_KConsole"},{0}};
static swig_type_info _swigt__p_KikiStone[] = {{"_p_KikiStone", 0, "KikiStone *", 0},{"_p_KikiStone"},{"_p_KikiWireStone", _p_KikiWireStoneTo_p_KikiStone},{0}};
static swig_type_info _swigt__p_KikiGear[] = {{"_p_KikiGear", 0, "KikiGear *", 0},{"_p_KikiMotorGear", _p_KikiMotorGearTo_p_KikiGear},{"_p_KikiGenerator", _p_KikiGeneratorTo_p_KikiGear},{"_p_KikiGear"},{0}};
static swig_type_info _swigt__p_KPosition[] = {{"_p_KPosition", 0, "KPosition *", 0},{"_p_KPosition"},{0}};
static swig_type_info _swigt__p_KikiWire[] = {{"_p_KikiWire", 0, "KikiWire *", 0},{"_p_KikiWire"},{0}};
static swig_type_info _swigt__p_KikiText[] = {{"_p_KikiText", 0, "KikiText *", 0},{"_p_KikiColumnMenu", _p_KikiColumnMenuTo_p_KikiText},{"_p_KikiText"},{"_p_KikiCellText", _p_KikiCellTextTo_p_KikiText},{"_p_KikiScreenText", _p_KikiScreenTextTo_p_KikiText},{"_p_KikiMenu", _p_KikiMenuTo_p_KikiText},{"_p_KikiScrollMenu", _p_KikiScrollMenuTo_p_KikiText},{"_p_KikiPageText", _p_KikiPageTextTo_p_KikiText},{0}};
static swig_type_info _swigt__p_KQuaternion[] = {{"_p_KQuaternion", 0, "KQuaternion *", 0},{"_p_KQuaternion"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_KikiMenu, 
_swigt__p_KikiFace, 
_swigt__p_KikiWireStone, 
_swigt__p_KikiGUI, 
_swigt__p_KColor, 
_swigt__p_KikiPyAction, 
_swigt__p_KikiAction, 
_swigt__p_KikiScreenText, 
_swigt__p_KikiCellText, 
_swigt__p_KikiPython, 
_swigt__p_KikiScrollMenu, 
_swigt__p_KikiPageText, 
_swigt__p_KVector, 
_swigt__p_KikiEvent, 
_swigt__p_KKey, 
_swigt__p_KikiBot, 
_swigt__p_KikiMovesAtom, 
_swigt__p_KikiAtom, 
_swigt__p_KProjection, 
_swigt__p_KikiGate, 
_swigt__p_KikiBullet, 
_swigt__p_KikiPythonWidget, 
_swigt__p_KikiSize, 
_swigt__p_KikiActionObject, 
_swigt__p_KSize, 
_swigt__p_KikiBotFume, 
_swigt__p_KikiMotorGear, 
_swigt__p_KikiGenerator, 
_swigt__p_std__string, 
_swigt__p_KikiValueAtom, 
_swigt__p_KikiStatusDisplay, 
_swigt__p_KikiSpikes, 
_swigt__p_KEventHandler, 
_swigt__p_KikiMotorCylinder, 
_swigt__p_KWindow, 
_swigt__p_KikiColumnMenu, 
_swigt__p_KikiWall, 
_swigt__p_KikiBomb, 
_swigt__p_KikiController, 
_swigt__p_KikiWorld, 
_swigt__p_KikiMutant, 
_swigt__p_KikiLight, 
_swigt__p_KikiValve, 
_swigt__p_PyObject, 
_swigt__p_KikiObject, 
_swigt__p_KikiBotStatus, 
_swigt__p_KikiPos, 
_swigt__p_KikiPlayback, 
_swigt__p_KikiPlayer, 
_swigt__p_KikiSound, 
_swigt__p_KikiSwitch, 
_swigt__p_KConsole, 
_swigt__p_KikiStone, 
_swigt__p_KikiGear, 
_swigt__p_KPosition, 
_swigt__p_KikiWire, 
_swigt__p_KikiText, 
_swigt__p_KQuaternion, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"KikiAction_ONCE", (long) KikiAction::ONCE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiAction_CONTINUOUS", (long) KikiAction::CONTINUOUS, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiAction_REPEAT", (long) KikiAction::REPEAT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWorld_CAMERA_INSIDE", (long) KikiWorld::CAMERA_INSIDE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWorld_CAMERA_BEHIND", (long) KikiWorld::CAMERA_BEHIND, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWorld_CAMERA_FOLLOW", (long) KikiWorld::CAMERA_FOLLOW, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiText_base_color", (long) KikiText::base_color, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiText_bright_color", (long) KikiText::bright_color, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiText_dark_color", (long) KikiText::dark_color, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_PX", (long) KikiFace::PX, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_X", (long) KikiFace::X, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_PY", (long) KikiFace::PY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_Y", (long) KikiFace::Y, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_PZ", (long) KikiFace::PZ, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_Z", (long) KikiFace::Z, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_NX", (long) KikiFace::NX, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_NY", (long) KikiFace::NY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiFace_NZ", (long) KikiFace::NZ, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_UP", (long) KikiWire::UP, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_RIGHT", (long) KikiWire::RIGHT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_DOWN", (long) KikiWire::DOWN, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_VERTICAL", (long) KikiWire::VERTICAL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_LEFT", (long) KikiWire::LEFT, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_HORIZONTAL", (long) KikiWire::HORIZONTAL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"KikiWire_ALL", (long) KikiWire::ALL, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"kiki", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"Controller",_wrap_Controller_get, _wrap_Controller_set);
}

