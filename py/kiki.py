# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_kiki')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_kiki')
    _kiki = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kiki', [dirname(__file__)])
        except ImportError:
            import _kiki
            return _kiki
        try:
            _mod = imp.load_module('_kiki', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _kiki = swig_import_helper()
    del swig_import_helper
else:
    import _kiki
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class KikiPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kiki.KikiPos_x_set
    __swig_getmethods__["x"] = _kiki.KikiPos_x_get
    if _newclass:
        x = _swig_property(_kiki.KikiPos_x_get, _kiki.KikiPos_x_set)
    __swig_setmethods__["y"] = _kiki.KikiPos_y_set
    __swig_getmethods__["y"] = _kiki.KikiPos_y_get
    if _newclass:
        y = _swig_property(_kiki.KikiPos_y_get, _kiki.KikiPos_y_set)
    __swig_setmethods__["z"] = _kiki.KikiPos_z_set
    __swig_getmethods__["z"] = _kiki.KikiPos_z_get
    if _newclass:
        z = _swig_property(_kiki.KikiPos_z_get, _kiki.KikiPos_z_set)

    def __init__(self, *args):
        this = _kiki.new_KikiPos(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __sub__(self, p: 'KikiPos') -> "KikiPos":
        return _kiki.KikiPos___sub__(self, p)

    def __add__(self, p: 'KikiPos') -> "KikiPos":
        return _kiki.KikiPos___add__(self, p)

    def __iadd__(self, p: 'KikiPos') -> "KikiPos &":
        return _kiki.KikiPos___iadd__(self, p)

    def __isub__(self, p: 'KikiPos') -> "KikiPos &":
        return _kiki.KikiPos___isub__(self, p)

    def getString(self) -> "std::string":
        return _kiki.KikiPos_getString(self)

    def __eq__(self, p: 'KikiPos') -> "bool":
        return _kiki.KikiPos___eq__(self, p)

    def __ne__(self, p: 'KikiPos') -> "bool":
        return _kiki.KikiPos___ne__(self, p)

    def __str__(self) -> "char *":
        return _kiki.KikiPos___str__(self)
    __swig_destroy__ = _kiki.delete_KikiPos
    __del__ = lambda self: None
KikiPos_swigregister = _kiki.KikiPos_swigregister
KikiPos_swigregister(KikiPos)

class KVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KVector, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def reset(self) -> "KVector &":
        return _kiki.KVector_reset(self)

    def normalize(self) -> "KVector &":
        return _kiki.KVector_normalize(self)

    def __iadd__(self, arg2: 'KVector') -> "KVector &":
        return _kiki.KVector___iadd__(self, arg2)

    def __isub__(self, arg2: 'KVector') -> "KVector &":
        return _kiki.KVector___isub__(self, arg2)

    def __imul__(self, arg2: 'float') -> "KVector &":
        return _kiki.KVector___imul__(self, arg2)

    def __itruediv__(self, *args):
        return _kiki.KVector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def cross(self, arg2: 'KVector') -> "KVector":
        return _kiki.KVector_cross(self, arg2)

    def __sub__(self, arg2: 'KVector') -> "KVector":
        return _kiki.KVector___sub__(self, arg2)

    def __add__(self, arg2: 'KVector') -> "KVector":
        return _kiki.KVector___add__(self, arg2)

    def __mul__(self, *args) -> "KVector":
        return _kiki.KVector___mul__(self, *args)

    def __truediv__(self, *args):
        return _kiki.KVector___truediv__(self, *args)
    __div__ = __truediv__



    def perpendicular(self, arg2: 'KVector') -> "KVector":
        return _kiki.KVector_perpendicular(self, arg2)

    def parallel(self, arg2: 'KVector') -> "KVector":
        return _kiki.KVector_parallel(self, arg2)

    def reflect(self, arg2: 'KVector') -> "KVector":
        return _kiki.KVector_reflect(self, arg2)

    def normal(self) -> "KVector":
        return _kiki.KVector_normal(self)

    def length(self) -> "float":
        return _kiki.KVector_length(self)

    def angle(self, arg2: 'KVector') -> "float":
        return _kiki.KVector_angle(self, arg2)

    def xyangle(self, arg2: 'KVector') -> "float":
        return _kiki.KVector_xyangle(self, arg2)

    def xyperp(self) -> "KVector":
        return _kiki.KVector_xyperp(self)

    def round(self) -> "KVector":
        return _kiki.KVector_round(self)

    def glVertex(self) -> "void":
        return _kiki.KVector_glVertex(self)

    def __getitem__(self, key: 'int') -> "bool":
        return _kiki.KVector___getitem__(self, key)

    def __str__(self) -> "char *":
        return _kiki.KVector___str__(self)
    __swig_destroy__ = _kiki.delete_KVector
    __del__ = lambda self: None
KVector_swigregister = _kiki.KVector_swigregister
KVector_swigregister(KVector)

class KQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KQuaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _kiki.KQuaternion_w_set
    __swig_getmethods__["w"] = _kiki.KQuaternion_w_get
    if _newclass:
        w = _swig_property(_kiki.KQuaternion_w_get, _kiki.KQuaternion_w_set)
    __swig_setmethods__["x"] = _kiki.KQuaternion_x_set
    __swig_getmethods__["x"] = _kiki.KQuaternion_x_get
    if _newclass:
        x = _swig_property(_kiki.KQuaternion_x_get, _kiki.KQuaternion_x_set)
    __swig_setmethods__["y"] = _kiki.KQuaternion_y_set
    __swig_getmethods__["y"] = _kiki.KQuaternion_y_get
    if _newclass:
        y = _swig_property(_kiki.KQuaternion_y_get, _kiki.KQuaternion_y_set)
    __swig_setmethods__["z"] = _kiki.KQuaternion_z_set
    __swig_getmethods__["z"] = _kiki.KQuaternion_z_get
    if _newclass:
        z = _swig_property(_kiki.KQuaternion_z_get, _kiki.KQuaternion_z_set)

    def __init__(self, *args):
        this = _kiki.new_KQuaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        rotationAroundVector = staticmethod(_kiki.KQuaternion_rotationAroundVector)
    else:
        rotationAroundVector = _kiki.KQuaternion_rotationAroundVector

    def rotate(self, v: 'KVector') -> "KVector":
        return _kiki.KQuaternion_rotate(self, v)

    def normalize(self) -> "KQuaternion &":
        return _kiki.KQuaternion_normalize(self)

    def invert(self) -> "KQuaternion &":
        return _kiki.KQuaternion_invert(self)

    def conjugate(self) -> "KQuaternion &":
        return _kiki.KQuaternion_conjugate(self)

    def getNormal(self) -> "KQuaternion":
        return _kiki.KQuaternion_getNormal(self)

    def getConjugate(self) -> "KQuaternion":
        return _kiki.KQuaternion_getConjugate(self)

    def getInverse(self) -> "KQuaternion":
        return _kiki.KQuaternion_getInverse(self)

    def length(self) -> "float":
        return _kiki.KQuaternion_length(self)

    def glRotate(self) -> "void":
        return _kiki.KQuaternion_glRotate(self)

    def slerp(self, quat: 'KQuaternion', t: 'float') -> "KQuaternion":
        return _kiki.KQuaternion_slerp(self, quat, t)

    def __mul__(self, quat: 'KQuaternion') -> "KQuaternion":
        return _kiki.KQuaternion___mul__(self, quat)

    def __str__(self) -> "char *":
        return _kiki.KQuaternion___str__(self)
    __swig_destroy__ = _kiki.delete_KQuaternion
    __del__ = lambda self: None
KQuaternion_swigregister = _kiki.KQuaternion_swigregister
KQuaternion_swigregister(KQuaternion)

def KQuaternion_rotationAroundVector(theta: 'float', vector: 'KVector') -> "KQuaternion":
    return _kiki.KQuaternion_rotationAroundVector(theta, vector)
KQuaternion_rotationAroundVector = _kiki.KQuaternion_rotationAroundVector

class KColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KColor, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KColor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setValues(self, r: 'float const', g: 'float const', b: 'float const', a: 'float const'=1.0) -> "void":
        return _kiki.KColor_setValues(self, r, g, b, a)

    def setRed(self, r: 'float const') -> "void":
        return _kiki.KColor_setRed(self, r)

    def setGreen(self, g: 'float const') -> "void":
        return _kiki.KColor_setGreen(self, g)

    def setBlue(self, b: 'float const') -> "void":
        return _kiki.KColor_setBlue(self, b)

    def setAlpha(self, a: 'float const') -> "void":
        return _kiki.KColor_setAlpha(self, a)

    def getRed(self) -> "float":
        return _kiki.KColor_getRed(self)

    def getGreen(self) -> "float":
        return _kiki.KColor_getGreen(self)

    def getBlue(self) -> "float":
        return _kiki.KColor_getBlue(self)

    def getAlpha(self) -> "float":
        return _kiki.KColor_getAlpha(self)

    def glColor(self) -> "void":
        return _kiki.KColor_glColor(self)

    def __str__(self) -> "char *":
        return _kiki.KColor___str__(self)
    __swig_destroy__ = _kiki.delete_KColor
    __del__ = lambda self: None
KColor_swigregister = _kiki.KColor_swigregister
KColor_swigregister(KColor)

class KProjection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KProjection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KProjection, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def focusOn(self, position: 'KVector') -> "void":
        return _kiki.KProjection_focusOn(self, position)

    def setFov(self, arg2: 'float') -> "void":
        return _kiki.KProjection_setFov(self, arg2)

    def getFov(self) -> "float":
        return _kiki.KProjection_getFov(self)

    def setViewport(self, left: 'float', bottom: 'float', width: 'float', height: 'float') -> "void":
        return _kiki.KProjection_setViewport(self, left, bottom, width, height)

    def setPosition(self, position: 'KVector') -> "void":
        return _kiki.KProjection_setPosition(self, position)
KProjection_swigregister = _kiki.KProjection_swigregister
KProjection_swigregister(KProjection)

class KKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KKey, name)
    __repr__ = _swig_repr

    def __init__(self, keyName: 'std::string'):
        this = _kiki.new_KKey(keyName)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["name"] = _kiki.KKey_name_set
    __swig_getmethods__["name"] = _kiki.KKey_name_get
    if _newclass:
        name = _swig_property(_kiki.KKey_name_get, _kiki.KKey_name_set)

    def getUnmodifiedName(self) -> "std::string":
        return _kiki.KKey_getUnmodifiedName(self)

    def getModifierName(self) -> "std::string":
        return _kiki.KKey_getModifierName(self)
KKey_swigregister = _kiki.KKey_swigregister
KKey_swigregister(KKey)

class KikiAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiAction, name)
    __repr__ = _swig_repr
    ONCE = _kiki.KikiAction_ONCE
    CONTINUOUS = _kiki.KikiAction_CONTINUOUS
    REPEAT = _kiki.KikiAction_REPEAT

    def __init__(self, *args):
        this = _kiki.new_KikiAction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getId(self) -> "int":
        return _kiki.KikiAction_getId(self)

    def getName(self) -> "std::string const &":
        return _kiki.KikiAction_getName(self)

    def getRelativeTime(self) -> "float":
        return _kiki.KikiAction_getRelativeTime(self)

    def getRelativeDelta(self) -> "float":
        return _kiki.KikiAction_getRelativeDelta(self)

    def getDuration(self) -> "int":
        return _kiki.KikiAction_getDuration(self)

    def setDuration(self, d: 'int') -> "void":
        return _kiki.KikiAction_setDuration(self, d)
KikiAction_swigregister = _kiki.KikiAction_swigregister
KikiAction_swigregister(KikiAction)

class KikiPyAction(KikiAction):
    __swig_setmethods__ = {}
    for _s in [KikiAction]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPyAction, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiAction]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPyAction, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        print("Args", args)
        this = _kiki.new_KikiPyAction( self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kiki.delete_KikiPyAction
    __del__ = lambda self: None
KikiPyAction_swigregister = _kiki.KikiPyAction_swigregister
KikiPyAction_swigregister(KikiPyAction)

class KikiEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiEvent, name)
    __repr__ = _swig_repr

    def __init__(self, arg2: 'KikiObject', name: 'std::string const &'):
        this = _kiki.new_KikiEvent(arg2, name)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addAction(self, action: 'KikiAction') -> "void":
        return _kiki.KikiEvent_addAction(self, action)

    def removeAction(self, action: 'KikiAction') -> "void":
        return _kiki.KikiEvent_removeAction(self, action)

    def removeAllActions(self) -> "void":
        return _kiki.KikiEvent_removeAllActions(self)

    def removeActionsOfObject(self, object: 'KikiObject') -> "void":
        return _kiki.KikiEvent_removeActionsOfObject(self, object)

    def removeActionWithName(self, actionName: 'std::string const &') -> "void":
        return _kiki.KikiEvent_removeActionWithName(self, actionName)

    def triggerActions(self) -> "void":
        return _kiki.KikiEvent_triggerActions(self)

    def getTime(self) -> "unsigned int":
        return _kiki.KikiEvent_getTime(self)
KikiEvent_swigregister = _kiki.KikiEvent_swigregister
KikiEvent_swigregister(KikiEvent)

class KikiActionObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiActionObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiActionObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def addAction(self, action: 'KikiAction') -> "void":
        return _kiki.KikiActionObject_addAction(self, action)

    def removeAction(self, action: 'KikiAction') -> "void":
        return _kiki.KikiActionObject_removeAction(self, action)

    def startTimedAction(self, action: 'KikiAction', duration: 'int'=-1) -> "void":
        return _kiki.KikiActionObject_startTimedAction(self, action, duration)

    def startTimer(self, duration: 'int', mode: 'int') -> "void":
        return _kiki.KikiActionObject_startTimer(self, duration, mode)

    def getActionWithName(self, name: 'std::string const &') -> "KikiAction *":
        return _kiki.KikiActionObject_getActionWithName(self, name)

    def getActionWithId(self, actionId: 'int') -> "KikiAction *":
        return _kiki.KikiActionObject_getActionWithId(self, actionId)

    def addEventWithName(self, arg2: 'std::string const &') -> "int":
        return _kiki.KikiActionObject_addEventWithName(self, arg2)

    def getEventWithName(self, name: 'std::string const &') -> "KikiEvent *":
        return _kiki.KikiActionObject_getEventWithName(self, name)

    def getEventWithId(self, actionId: 'int') -> "KikiEvent *":
        return _kiki.KikiActionObject_getEventWithId(self, actionId)

    def getClassName(self) -> "char const *":
        return _kiki.KikiActionObject_getClassName(self)
KikiActionObject_swigregister = _kiki.KikiActionObject_swigregister
KikiActionObject_swigregister(KikiActionObject)

class KikiObject(KikiActionObject):
    __swig_setmethods__ = {}
    for _s in [KikiActionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiObject, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiActionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiObject, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setName(self, arg2: 'std::string const &') -> "void":
        return _kiki.KikiObject_setName(self, arg2)

    def getName(self) -> "std::string":
        return _kiki.KikiObject_getName(self)

    def getPos(self) -> "KikiPos":
        return _kiki.KikiObject_getPos(self)

    def setPosition(self, v: 'KVector') -> "void":
        return _kiki.KikiObject_setPosition(self, v)

    def getPosition(self) -> "KVector":
        return _kiki.KikiObject_getPosition(self)

    def setOrientation(self, q: 'KQuaternion') -> "void":
        return _kiki.KikiObject_setOrientation(self, q)

    def getOrientation(self) -> "KQuaternion":
        return _kiki.KikiObject_getOrientation(self)

    def setCurrentOrientation(self, q: 'KQuaternion') -> "void":
        return _kiki.KikiObject_setCurrentOrientation(self, q)

    def getCurrentOrientation(self) -> "KQuaternion":
        return _kiki.KikiObject_getCurrentOrientation(self)

    def isSpaceEgoistic(self) -> "bool":
        return _kiki.KikiObject_isSpaceEgoistic(self)

    def getClassName(self) -> "char const *":
        return _kiki.KikiObject_getClassName(self)
KikiObject_swigregister = _kiki.KikiObject_swigregister
KikiObject_swigregister(KikiObject)

class KikiBotStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBotStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBotStatus, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getMoves(self) -> "int":
        return _kiki.KikiBotStatus_getMoves(self)

    def setMoves(self, moves: 'int') -> "void":
        return _kiki.KikiBotStatus_setMoves(self, moves)

    def addMoves(self, moves: 'int') -> "void":
        return _kiki.KikiBotStatus_addMoves(self, moves)

    def getMinMoves(self) -> "int":
        return _kiki.KikiBotStatus_getMinMoves(self)

    def setMinMoves(self, moves: 'int') -> "void":
        return _kiki.KikiBotStatus_setMinMoves(self, moves)
KikiBotStatus_swigregister = _kiki.KikiBotStatus_swigregister
KikiBotStatus_swigregister(KikiBotStatus)

class KikiBotFume(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBotFume, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBotFume, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiBotFume_setObjectColor)
    else:
        setObjectColor = _kiki.KikiBotFume_setObjectColor
KikiBotFume_swigregister = _kiki.KikiBotFume_swigregister
KikiBotFume_swigregister(KikiBotFume)

def KikiBotFume_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiBotFume_setObjectColor(color_name, color)
KikiBotFume_setObjectColor = _kiki.KikiBotFume_setObjectColor

class KikiBot(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBot, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBot, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isDead(self) -> "bool":
        return _kiki.KikiBot_isDead(self)

    def getDown(self) -> "KikiPos":
        return _kiki.KikiBot_getDown(self)

    def getUp(self) -> "KikiPos":
        return _kiki.KikiBot_getUp(self)

    def getDir(self) -> "KikiPos":
        return _kiki.KikiBot_getDir(self)

    def setMove(self, arg2: 'bool') -> "void":
        return _kiki.KikiBot_setMove(self, arg2)

    def getStatus(self) -> "KikiBotStatus *":
        return _kiki.KikiBot_getStatus(self)
KikiBot_swigregister = _kiki.KikiBot_swigregister
KikiBot_swigregister(KikiBot)

class KikiStatusDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiStatusDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiStatusDisplay, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def show(self) -> "void":
        return _kiki.KikiStatusDisplay_show(self)

    def hide(self) -> "void":
        return _kiki.KikiStatusDisplay_hide(self)
KikiStatusDisplay_swigregister = _kiki.KikiStatusDisplay_swigregister
KikiStatusDisplay_swigregister(KikiStatusDisplay)

class KikiPlayback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPlayback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPlayback, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        start = staticmethod(_kiki.KikiPlayback_start)
    else:
        start = _kiki.KikiPlayback_start
    if _newclass:
        stop = staticmethod(_kiki.KikiPlayback_stop)
    else:
        stop = _kiki.KikiPlayback_stop
KikiPlayback_swigregister = _kiki.KikiPlayback_swigregister
KikiPlayback_swigregister(KikiPlayback)

def KikiPlayback_start(filename: 'std::string const') -> "void":
    return _kiki.KikiPlayback_start(filename)
KikiPlayback_start = _kiki.KikiPlayback_start

def KikiPlayback_stop() -> "void":
    return _kiki.KikiPlayback_stop()
KikiPlayback_stop = _kiki.KikiPlayback_stop

class KikiPlayer(KikiBot):
    __swig_setmethods__ = {}
    for _s in [KikiBot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiBot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPlayer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def die(self) -> "void":
        return _kiki.KikiPlayer_die(self)

    def reborn(self) -> "void":
        return _kiki.KikiPlayer_reborn(self)

    def reset(self) -> "void":
        return _kiki.KikiPlayer_reset(self)

    def startRecorder(self, file: 'std::string const &') -> "void":
        return _kiki.KikiPlayer_startRecorder(self, file)

    def saveRecorder(self) -> "void":
        return _kiki.KikiPlayer_saveRecorder(self)

    def getProjection(self) -> "KProjection *":
        return _kiki.KikiPlayer_getProjection(self)

    def handleKey(self, key: 'KKey') -> "bool":
        return _kiki.KikiPlayer_handleKey(self, key)

    def handleKeyRelease(self, key: 'KKey') -> "bool":
        return _kiki.KikiPlayer_handleKeyRelease(self, key)

    def recordKeyForAction(self, actionName: 'std::string const &') -> "void":
        return _kiki.KikiPlayer_recordKeyForAction(self, actionName)
    if _newclass:
        getActionForKey = staticmethod(_kiki.KikiPlayer_getActionForKey)
    else:
        getActionForKey = _kiki.KikiPlayer_getActionForKey
    if _newclass:
        getKeyForAction = staticmethod(_kiki.KikiPlayer_getKeyForAction)
    else:
        getKeyForAction = _kiki.KikiPlayer_getKeyForAction
    if _newclass:
        setKeyForAction = staticmethod(_kiki.KikiPlayer_setKeyForAction)
    else:
        setKeyForAction = _kiki.KikiPlayer_setKeyForAction
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiPlayer_setObjectColor)
    else:
        setObjectColor = _kiki.KikiPlayer_setObjectColor
KikiPlayer_swigregister = _kiki.KikiPlayer_swigregister
KikiPlayer_swigregister(KikiPlayer)

def KikiPlayer_getActionForKey(keyName: 'std::string const &') -> "std::string":
    return _kiki.KikiPlayer_getActionForKey(keyName)
KikiPlayer_getActionForKey = _kiki.KikiPlayer_getActionForKey

def KikiPlayer_getKeyForAction(actionName: 'std::string const &') -> "std::string":
    return _kiki.KikiPlayer_getKeyForAction(actionName)
KikiPlayer_getKeyForAction = _kiki.KikiPlayer_getKeyForAction

def KikiPlayer_setKeyForAction(keyName: 'std::string const &', actionName: 'std::string const &') -> "void":
    return _kiki.KikiPlayer_setKeyForAction(keyName, actionName)
KikiPlayer_setKeyForAction = _kiki.KikiPlayer_setKeyForAction

def KikiPlayer_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiPlayer_setObjectColor(color_name, color)
KikiPlayer_setObjectColor = _kiki.KikiPlayer_setObjectColor

class KikiMutant(KikiBot):
    __swig_setmethods__ = {}
    for _s in [KikiBot]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMutant, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiBot]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMutant, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kiki.new_KikiMutant()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def die(self) -> "void":
        return _kiki.KikiMutant_die(self)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiMutant_setObjectColor)
    else:
        setObjectColor = _kiki.KikiMutant_setObjectColor
KikiMutant_swigregister = _kiki.KikiMutant_swigregister
KikiMutant_swigregister(KikiMutant)

def KikiMutant_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiMutant_setObjectColor(color_name, color)
KikiMutant_setObjectColor = _kiki.KikiMutant_setObjectColor

class KikiSound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiSound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiSound, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def toggleMute(self) -> "void":
        return _kiki.KikiSound_toggleMute(self)

    def setMute(self, b: 'bool') -> "void":
        return _kiki.KikiSound_setMute(self, b)

    def isMute(self) -> "bool":
        return _kiki.KikiSound_isMute(self)

    def setSoundVolume(self, v: 'int') -> "void":
        return _kiki.KikiSound_setSoundVolume(self, v)

    def getSoundVolume(self) -> "int":
        return _kiki.KikiSound_getSoundVolume(self)

    def playSound(self, sndId: 'int', volume: 'float'=-1.0, loops: 'int'=0) -> "void":
        return _kiki.KikiSound_playSound(self, sndId, volume, loops)

    def playSoundAtPos(self, sndId: 'int', pos: 'KikiPos') -> "void":
        return _kiki.KikiSound_playSoundAtPos(self, sndId, pos)
KikiSound_swigregister = _kiki.KikiSound_swigregister
KikiSound_swigregister(KikiSound)

class KikiWorld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWorld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWorld, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    CAMERA_INSIDE = _kiki.KikiWorld_CAMERA_INSIDE
    CAMERA_BEHIND = _kiki.KikiWorld_CAMERA_BEHIND
    CAMERA_FOLLOW = _kiki.KikiWorld_CAMERA_FOLLOW

    def setSize(self, x: 'int', y: 'int', z: 'int'=0) -> "void":
        return _kiki.KikiWorld_setSize(self, x, y, z)

    def getSize(self) -> "KikiSize":
        return _kiki.KikiWorld_getSize(self)

    def setName(self, name: 'std::string const &') -> "void":
        return _kiki.KikiWorld_setName(self, name)

    def getName(self) -> "std::string":
        return _kiki.KikiWorld_getName(self)

    def init(self) -> "void":
        return _kiki.KikiWorld_init(self)

    def setDisplayShadows(self, arg2: 'bool') -> "void":
        return _kiki.KikiWorld_setDisplayShadows(self, arg2)

    def setDisplayRaster(self, arg2: 'bool') -> "void":
        return _kiki.KikiWorld_setDisplayRaster(self, arg2)

    def setDisplayBorder(self, arg2: 'bool') -> "void":
        return _kiki.KikiWorld_setDisplayBorder(self, arg2)

    def setRasterSize(self, rasterSize: 'float') -> "void":
        return _kiki.KikiWorld_setRasterSize(self, rasterSize)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiWorld_setObjectColor)
    else:
        setObjectColor = _kiki.KikiWorld_setObjectColor

    def changeCameraMode(self) -> "void":
        return _kiki.KikiWorld_changeCameraMode(self)

    def getCameraMode(self) -> "int":
        return _kiki.KikiWorld_getCameraMode(self)

    def setCameraMode(self, mode: 'int') -> "void":
        return _kiki.KikiWorld_setCameraMode(self, mode)

    def getProjection(self) -> "KProjection *":
        return _kiki.KikiWorld_getProjection(self)

    def addObjectAtPos(self, object: 'KikiObject', pos: 'KikiPos') -> "void":
        return _kiki.KikiWorld_addObjectAtPos(self, object, pos)

    def setObjectAtPos(self, object: 'KikiObject', pos: 'KikiPos') -> "void":
        return _kiki.KikiWorld_setObjectAtPos(self, object, pos)

    def unsetObject(self, object: 'KikiObject') -> "void":
        return _kiki.KikiWorld_unsetObject(self, object)

    def removeObject(self, object: 'KikiObject') -> "void":
        return _kiki.KikiWorld_removeObject(self, object)

    def deleteObject(self, object: 'KikiObject') -> "void":
        return _kiki.KikiWorld_deleteObject(self, object)

    def deleteAllObjects(self) -> "void":
        return _kiki.KikiWorld_deleteAllObjects(self)

    def deleteObjectsWithClassName(self, className: 'std::string const &') -> "void":
        return _kiki.KikiWorld_deleteObjectsWithClassName(self, className)

    def getObjectWithName(self, objectName: 'std::string const &') -> "KikiObject *":
        return _kiki.KikiWorld_getObjectWithName(self, objectName)

    def moveObjectToPos(self, object: 'KikiObject', pos: 'KikiPos') -> "bool":
        return _kiki.KikiWorld_moveObjectToPos(self, object, pos)

    def objectWillMoveToPos(self, object: 'KikiObject', pos: 'KikiPos', duration: 'int') -> "void":
        return _kiki.KikiWorld_objectWillMoveToPos(self, object, pos, duration)

    def objectMovedFromPos(self, object: 'KikiObject', pos: 'KikiPos') -> "void":
        return _kiki.KikiWorld_objectMovedFromPos(self, object, pos)

    def getBotAtPos(self, pos: 'KikiPos') -> "KikiBot *":
        return _kiki.KikiWorld_getBotAtPos(self, pos)

    def getOccupantAtPos(self, pos: 'KikiPos') -> "KikiObject *":
        return _kiki.KikiWorld_getOccupantAtPos(self, pos)

    def getRealOccupantAtPos(self, pos: 'KikiPos') -> "KikiObject *":
        return _kiki.KikiWorld_getRealOccupantAtPos(self, pos)

    def getNearestValidPos(self, pos: 'KikiPos') -> "KikiPos":
        return _kiki.KikiWorld_getNearestValidPos(self, pos)

    def isInvalidPos(self, pos: 'KikiPos') -> "bool":
        return _kiki.KikiWorld_isInvalidPos(self, pos)

    def isValidPos(self, pos: 'KikiPos') -> "bool":
        return _kiki.KikiWorld_isValidPos(self, pos)

    def isUnoccupiedPos(self, pos: 'KikiPos') -> "bool":
        return _kiki.KikiWorld_isUnoccupiedPos(self, pos)

    def isOccupiedPos(self, pos: 'KikiPos') -> "bool":
        return _kiki.KikiWorld_isOccupiedPos(self, pos)

    def posToIndex(self, pos: 'KikiPos') -> "int":
        return _kiki.KikiWorld_posToIndex(self, pos)

    def indexToPos(self, index: 'int') -> "KikiPos":
        return _kiki.KikiWorld_indexToPos(self, index)

    def getPickedPos(self) -> "KikiPos":
        return _kiki.KikiWorld_getPickedPos(self)
KikiWorld_swigregister = _kiki.KikiWorld_swigregister
KikiWorld_swigregister(KikiWorld)

def KikiWorld_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiWorld_setObjectColor(color_name, color)
KikiWorld_setObjectColor = _kiki.KikiWorld_setObjectColor

class KEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KEventHandler, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def quit(self) -> "void":
        return _kiki.KEventHandler_quit(self)
    if _newclass:
        getMouseState = staticmethod(_kiki.KEventHandler_getMouseState)
    else:
        getMouseState = _kiki.KEventHandler_getMouseState
    if _newclass:
        getMousePos = staticmethod(_kiki.KEventHandler_getMousePos)
    else:
        getMousePos = _kiki.KEventHandler_getMousePos
    if _newclass:
        getMouseDelta = staticmethod(_kiki.KEventHandler_getMouseDelta)
    else:
        getMouseDelta = _kiki.KEventHandler_getMouseDelta
    if _newclass:
        getScreenSize = staticmethod(_kiki.KEventHandler_getScreenSize)
    else:
        getScreenSize = _kiki.KEventHandler_getScreenSize
    if _newclass:
        setScreenSize = staticmethod(_kiki.KEventHandler_setScreenSize)
    else:
        setScreenSize = _kiki.KEventHandler_setScreenSize
    if _newclass:
        getFullscreen = staticmethod(_kiki.KEventHandler_getFullscreen)
    else:
        getFullscreen = _kiki.KEventHandler_getFullscreen
    if _newclass:
        setFullscreen = staticmethod(_kiki.KEventHandler_setFullscreen)
    else:
        setFullscreen = _kiki.KEventHandler_setFullscreen
    if _newclass:
        getTime = staticmethod(_kiki.KEventHandler_getTime)
    else:
        getTime = _kiki.KEventHandler_getTime

    def setWireframeMode(self, arg2: 'bool') -> "void":
        return _kiki.KEventHandler_setWireframeMode(self, arg2)

    def setDisplayFps(self, arg2: 'bool') -> "void":
        return _kiki.KEventHandler_setDisplayFps(self, arg2)

    def getDisplayFps(self) -> "bool":
        return _kiki.KEventHandler_getDisplayFps(self)
KEventHandler_swigregister = _kiki.KEventHandler_swigregister
KEventHandler_swigregister(KEventHandler)

def KEventHandler_getMouseState() -> "int":
    return _kiki.KEventHandler_getMouseState()
KEventHandler_getMouseState = _kiki.KEventHandler_getMouseState

def KEventHandler_getMousePos() -> "KPosition":
    return _kiki.KEventHandler_getMousePos()
KEventHandler_getMousePos = _kiki.KEventHandler_getMousePos

def KEventHandler_getMouseDelta() -> "KPosition":
    return _kiki.KEventHandler_getMouseDelta()
KEventHandler_getMouseDelta = _kiki.KEventHandler_getMouseDelta

def KEventHandler_getScreenSize() -> "KSize":
    return _kiki.KEventHandler_getScreenSize()
KEventHandler_getScreenSize = _kiki.KEventHandler_getScreenSize

def KEventHandler_setScreenSize(width: 'int', height: 'int', fullscreen: 'bool'=False) -> "bool":
    return _kiki.KEventHandler_setScreenSize(width, height, fullscreen)
KEventHandler_setScreenSize = _kiki.KEventHandler_setScreenSize

def KEventHandler_getFullscreen() -> "bool":
    return _kiki.KEventHandler_getFullscreen()
KEventHandler_getFullscreen = _kiki.KEventHandler_getFullscreen

def KEventHandler_setFullscreen(arg2: 'bool') -> "void":
    return _kiki.KEventHandler_setFullscreen(arg2)
KEventHandler_setFullscreen = _kiki.KEventHandler_setFullscreen

def KEventHandler_getTime() -> "unsigned int":
    return _kiki.KEventHandler_getTime()
KEventHandler_getTime = _kiki.KEventHandler_getTime

class KikiController(KEventHandler, KikiActionObject):
    __swig_setmethods__ = {}
    for _s in [KEventHandler, KikiActionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiController, name, value)
    __swig_getmethods__ = {}
    for _s in [KEventHandler, KikiActionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiController, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["gui"] = _kiki.KikiController_gui_set
    __swig_getmethods__["gui"] = _kiki.KikiController_gui_get
    if _newclass:
        gui = _swig_property(_kiki.KikiController_gui_get, _kiki.KikiController_gui_set)
    __swig_setmethods__["sound"] = _kiki.KikiController_sound_set
    __swig_getmethods__["sound"] = _kiki.KikiController_sound_get
    if _newclass:
        sound = _swig_property(_kiki.KikiController_sound_get, _kiki.KikiController_sound_set)
    __swig_setmethods__["world"] = _kiki.KikiController_world_set
    __swig_getmethods__["world"] = _kiki.KikiController_world_get
    if _newclass:
        world = _swig_property(_kiki.KikiController_world_get, _kiki.KikiController_world_set)
    __swig_setmethods__["player"] = _kiki.KikiController_player_set
    __swig_getmethods__["player"] = _kiki.KikiController_player_get
    if _newclass:
        player = _swig_property(_kiki.KikiController_player_get, _kiki.KikiController_player_set)
    __swig_setmethods__["python"] = _kiki.KikiController_python_set
    __swig_getmethods__["python"] = _kiki.KikiController_python_get
    if _newclass:
        python = _swig_property(_kiki.KikiController_python_get, _kiki.KikiController_python_set)
    __swig_setmethods__["player_status"] = _kiki.KikiController_player_status_set
    __swig_getmethods__["player_status"] = _kiki.KikiController_player_status_get
    if _newclass:
        player_status = _swig_property(_kiki.KikiController_player_status_get, _kiki.KikiController_player_status_set)
    __swig_setmethods__["timer_event"] = _kiki.KikiController_timer_event_set
    __swig_getmethods__["timer_event"] = _kiki.KikiController_timer_event_get
    if _newclass:
        timer_event = _swig_property(_kiki.KikiController_timer_event_get, _kiki.KikiController_timer_event_set)

    def getPlayer(self) -> "KikiPlayer *":
        return _kiki.KikiController_getPlayer(self)

    def unmapMsTime(self, ms: 'int') -> "int":
        return _kiki.KikiController_unmapMsTime(self, ms)

    def mapMsTime(self, ms: 'int') -> "int":
        return _kiki.KikiController_mapMsTime(self, ms)

    def setSpeed(self, s: 'int') -> "void":
        return _kiki.KikiController_setSpeed(self, s)

    def getSpeed(self) -> "int":
        return _kiki.KikiController_getSpeed(self)

    def getKikiHome(self) -> "std::string":
        return _kiki.KikiController_getKikiHome(self)

    def setGamma(self, g: 'int') -> "void":
        return _kiki.KikiController_setGamma(self, g)

    def getGamma(self) -> "int":
        return _kiki.KikiController_getGamma(self)

    def changeScreenSize(self, width: 'int', height: 'int', fullscreen: 'bool'=False) -> "bool":
        return _kiki.KikiController_changeScreenSize(self, width, height, fullscreen)

    def displayText(self, text: 'std::string const &', color: 'int') -> "void":
        return _kiki.KikiController_displayText(self, text, color)

    def getLocalizedString(self, key: 'std::string const &') -> "std::string":
        return _kiki.KikiController_getLocalizedString(self, key)

    def isDebugVersion(self) -> "bool":
        return _kiki.KikiController_isDebugVersion(self)
KikiController_swigregister = _kiki.KikiController_swigregister
KikiController_swigregister(KikiController)


def replaceTabs(str: 'std::string const &', tabWidth: 'int') -> "char const *":
    return _kiki.replaceTabs(str, tabWidth)
replaceTabs = _kiki.replaceTabs
class KWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KWindow, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def isVisible(self) -> "bool":
        return _kiki.KWindow_isVisible(self)

    def setVisibility(self, v: 'bool') -> "void":
        return _kiki.KWindow_setVisibility(self, v)

    def toggleVisibility(self) -> "void":
        return _kiki.KWindow_toggleVisibility(self)

    def maximize(self) -> "void":
        return _kiki.KWindow_maximize(self)

    def show(self) -> "void":
        return _kiki.KWindow_show(self)

    def hide(self) -> "void":
        return _kiki.KWindow_hide(self)

    def close(self) -> "void":
        return _kiki.KWindow_close(self)

    def setSize(self, arg2: 'KSize') -> "void":
        return _kiki.KWindow_setSize(self, arg2)

    def setPosition(self, arg2: 'KPosition const &') -> "void":
        return _kiki.KWindow_setPosition(self, arg2)
KWindow_swigregister = _kiki.KWindow_swigregister
KWindow_swigregister(KWindow)
kiki = _kiki.kiki

class KikiText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiText, name)
    __repr__ = _swig_repr
    base_color = _kiki.KikiText_base_color
    bright_color = _kiki.KikiText_bright_color
    dark_color = _kiki.KikiText_dark_color

    def __init__(self, *args):
        this = _kiki.new_KikiText(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setText(self, *args) -> "void":
        return _kiki.KikiText_setText(self, *args)

    def getText(self) -> "std::string const &":
        return _kiki.KikiText_getText(self)

    def clear(self) -> "void":
        return _kiki.KikiText_clear(self)

    def isEmpty(self) -> "bool":
        return _kiki.KikiText_isEmpty(self)

    def addText(self, arg2: 'std::string const &', scaleFactor: 'float'=1.0) -> "void":
        return _kiki.KikiText_addText(self, arg2, scaleFactor)

    def getColor(self) -> "KColor const &":
        return _kiki.KikiText_getColor(self)

    def setColor(self, c: 'KColor') -> "void":
        return _kiki.KikiText_setColor(self, c)

    def setAlpha(self, alpha: 'float') -> "void":
        return _kiki.KikiText_setAlpha(self, alpha)

    def isAnimated(self) -> "bool":
        return _kiki.KikiText_isAnimated(self)

    def setAnimated(self, arg2: 'bool') -> "void":
        return _kiki.KikiText_setAnimated(self, arg2)

    def isCentered(self) -> "bool":
        return _kiki.KikiText_isCentered(self)

    def setCentered(self, arg2: 'bool') -> "void":
        return _kiki.KikiText_setCentered(self, arg2)

    def getWidth(self) -> "float":
        return _kiki.KikiText_getWidth(self)

    def getHeight(self) -> "float":
        return _kiki.KikiText_getHeight(self)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiText_setObjectColor)
    else:
        setObjectColor = _kiki.KikiText_setObjectColor
KikiText_swigregister = _kiki.KikiText_swigregister
KikiText_swigregister(KikiText)

def KikiText_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiText_setObjectColor(color_name, color)
KikiText_setObjectColor = _kiki.KikiText_setObjectColor

class KikiGUI(KWindow):
    __swig_setmethods__ = {}
    for _s in [KWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGUI, name, value)
    __swig_getmethods__ = {}
    for _s in [KWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGUI, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
KikiGUI_swigregister = _kiki.KikiGUI_swigregister
KikiGUI_swigregister(KikiGUI)

class KikiScreenText(KikiText, KikiActionObject):
    __swig_setmethods__ = {}
    for _s in [KikiText, KikiActionObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiScreenText, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiText, KikiActionObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiScreenText, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kiki.new_KikiScreenText()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addText(self, text: 'std::string const &', scaleFactor: 'float'=1.0) -> "void":
        return _kiki.KikiScreenText_addText(self, text, scaleFactor)

    def setText(self, text: 'std::string const &', colorIndex: 'int'=0) -> "void":
        return _kiki.KikiScreenText_setText(self, text, colorIndex)

    def show(self) -> "void":
        return _kiki.KikiScreenText_show(self)

    def getProjection(self) -> "KProjection *":
        return _kiki.KikiScreenText_getProjection(self)
KikiScreenText_swigregister = _kiki.KikiScreenText_swigregister
KikiScreenText_swigregister(KikiScreenText)

class KikiMenu(KikiScreenText):
    __swig_setmethods__ = {}
    for _s in [KikiScreenText]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiScreenText]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMenu, name)
    __repr__ = _swig_repr

    def __init__(self, selectedItem: 'int'=-1):
        this = _kiki.new_KikiMenu(selectedItem)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addItem(self, itemText: 'std::string const &', action: 'KikiAction'=None, option: 'bool'=False) -> "void":
        return _kiki.KikiMenu_addItem(self, itemText, action, option)

    def setCurrentIndex(self, index: 'int') -> "void":
        return _kiki.KikiMenu_setCurrentIndex(self, index)

    def setEscapeActive(self, active: 'bool'=True) -> "void":
        return _kiki.KikiMenu_setEscapeActive(self, active)
    __swig_setmethods__["circular"] = _kiki.KikiMenu_circular_set
    __swig_getmethods__["circular"] = _kiki.KikiMenu_circular_get
    if _newclass:
        circular = _swig_property(_kiki.KikiMenu_circular_get, _kiki.KikiMenu_circular_set)
KikiMenu_swigregister = _kiki.KikiMenu_swigregister
KikiMenu_swigregister(KikiMenu)

class KikiColumnMenu(KikiMenu):
    __swig_setmethods__ = {}
    for _s in [KikiMenu]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiColumnMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiMenu]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiColumnMenu, name)
    __repr__ = _swig_repr

    def __init__(self, maxColumnItems: 'int'=10, selectedItem: 'int'=-1):
        this = _kiki.new_KikiColumnMenu(maxColumnItems, selectedItem)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
KikiColumnMenu_swigregister = _kiki.KikiColumnMenu_swigregister
KikiColumnMenu_swigregister(KikiColumnMenu)

class KikiScrollMenu(KikiColumnMenu):
    __swig_setmethods__ = {}
    for _s in [KikiColumnMenu]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiScrollMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiColumnMenu]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiScrollMenu, name)
    __repr__ = _swig_repr

    def __init__(self, rows: 'int'=5, columns: 'int'=4, selectedItem: 'int'=-1):
        this = _kiki.new_KikiScrollMenu(rows, columns, selectedItem)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getCurrentIndex(self) -> "int":
        return _kiki.KikiScrollMenu_getCurrentIndex(self)

    def addItem(self, itemText: 'std::string const &', action: 'KikiAction'=None, option: 'bool'=False) -> "void":
        return _kiki.KikiScrollMenu_addItem(self, itemText, action, option)
KikiScrollMenu_swigregister = _kiki.KikiScrollMenu_swigregister
KikiScrollMenu_swigregister(KikiScrollMenu)

class KikiPageText(KikiScreenText):
    __swig_setmethods__ = {}
    for _s in [KikiScreenText]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPageText, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiScreenText]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPageText, name)
    __repr__ = _swig_repr

    def __init__(self, pageText: 'std::string const &', nextPage: 'bool', previousPage: 'bool'=True):
        this = _kiki.new_KikiPageText(pageText, nextPage, previousPage)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
KikiPageText_swigregister = _kiki.KikiPageText_swigregister
KikiPageText_swigregister(KikiPageText)

class KikiFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiFace, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    PX = _kiki.KikiFace_PX
    X = _kiki.KikiFace_X
    PY = _kiki.KikiFace_PY
    Y = _kiki.KikiFace_Y
    PZ = _kiki.KikiFace_PZ
    Z = _kiki.KikiFace_Z
    NX = _kiki.KikiFace_NX
    NY = _kiki.KikiFace_NY
    NZ = _kiki.KikiFace_NZ
KikiFace_swigregister = _kiki.KikiFace_swigregister
KikiFace_swigregister(KikiFace)

class KikiWire(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWire, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWire, name)
    __repr__ = _swig_repr
    UP = _kiki.KikiWire_UP
    RIGHT = _kiki.KikiWire_RIGHT
    DOWN = _kiki.KikiWire_DOWN
    VERTICAL = _kiki.KikiWire_VERTICAL
    LEFT = _kiki.KikiWire_LEFT
    HORIZONTAL = _kiki.KikiWire_HORIZONTAL
    ALL = _kiki.KikiWire_ALL

    def __init__(self, *args):
        this = _kiki.new_KikiWire(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setActive(self, active: 'bool'=True) -> "void":
        return _kiki.KikiWire_setActive(self, active)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiWire_setObjectColor)
    else:
        setObjectColor = _kiki.KikiWire_setObjectColor
KikiWire_swigregister = _kiki.KikiWire_swigregister
KikiWire_swigregister(KikiWire)

def KikiWire_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiWire_setObjectColor(color_name, color)
KikiWire_setObjectColor = _kiki.KikiWire_setObjectColor


def kikiObjectToWire(o: 'KikiObject') -> "KikiWire *":
    return _kiki.kikiObjectToWire(o)
kikiObjectToWire = _kiki.kikiObjectToWire
class KikiGear(KikiObject, KikiFace):
    __swig_setmethods__ = {}
    for _s in [KikiObject, KikiFace]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGear, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject, KikiFace]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KikiGear(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setActive(self, active: 'bool'=True) -> "void":
        return _kiki.KikiGear_setActive(self, active)

    def updateActive(self) -> "void":
        return _kiki.KikiGear_updateActive(self)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiGear_setObjectColor)
    else:
        setObjectColor = _kiki.KikiGear_setObjectColor
KikiGear_swigregister = _kiki.KikiGear_swigregister
KikiGear_swigregister(KikiGear)

def KikiGear_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiGear_setObjectColor(color_name, color)
KikiGear_setObjectColor = _kiki.KikiGear_setObjectColor


def kikiObjectToGear(o: 'KikiObject') -> "KikiGear *":
    return _kiki.kikiObjectToGear(o)
kikiObjectToGear = _kiki.kikiObjectToGear
class KikiValve(KikiObject, KikiFace):
    __swig_setmethods__ = {}
    for _s in [KikiObject, KikiFace]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiValve, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject, KikiFace]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiValve, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KikiValve(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiValve_setObjectColor)
    else:
        setObjectColor = _kiki.KikiValve_setObjectColor
KikiValve_swigregister = _kiki.KikiValve_swigregister
KikiValve_swigregister(KikiValve)

def KikiValve_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiValve_setObjectColor(color_name, color)
KikiValve_setObjectColor = _kiki.KikiValve_setObjectColor


def kikiObjectToValve(o: 'KikiObject') -> "KikiValve *":
    return _kiki.kikiObjectToValve(o)
kikiObjectToValve = _kiki.kikiObjectToValve
class KikiMotorCylinder(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMotorCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMotorCylinder, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KikiMotorCylinder(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiMotorCylinder_setObjectColor)
    else:
        setObjectColor = _kiki.KikiMotorCylinder_setObjectColor
KikiMotorCylinder_swigregister = _kiki.KikiMotorCylinder_swigregister
KikiMotorCylinder_swigregister(KikiMotorCylinder)

def KikiMotorCylinder_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiMotorCylinder_setObjectColor(color_name, color)
KikiMotorCylinder_setObjectColor = _kiki.KikiMotorCylinder_setObjectColor

class KikiMotorGear(KikiGear):
    __swig_setmethods__ = {}
    for _s in [KikiGear]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMotorGear, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiGear]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMotorGear, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KikiMotorGear(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiMotorGear_setObjectColor)
    else:
        setObjectColor = _kiki.KikiMotorGear_setObjectColor
KikiMotorGear_swigregister = _kiki.KikiMotorGear_swigregister
KikiMotorGear_swigregister(KikiMotorGear)

def KikiMotorGear_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiMotorGear_setObjectColor(color_name, color)
KikiMotorGear_setObjectColor = _kiki.KikiMotorGear_setObjectColor

class KikiGenerator(KikiGear):
    __swig_setmethods__ = {}
    for _s in [KikiGear]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiGear]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGenerator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KikiGenerator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiGenerator_setObjectColor)
    else:
        setObjectColor = _kiki.KikiGenerator_setObjectColor
KikiGenerator_swigregister = _kiki.KikiGenerator_swigregister
KikiGenerator_swigregister(KikiGenerator)

def KikiGenerator_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiGenerator_setObjectColor(color_name, color)
KikiGenerator_setObjectColor = _kiki.KikiGenerator_setObjectColor

class KikiLight(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiLight, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiLight, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kiki.new_KikiLight()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiLight_setObjectColor)
    else:
        setObjectColor = _kiki.KikiLight_setObjectColor
KikiLight_swigregister = _kiki.KikiLight_swigregister
KikiLight_swigregister(KikiLight)

def KikiLight_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiLight_setObjectColor(color_name, color)
KikiLight_setObjectColor = _kiki.KikiLight_setObjectColor


def kikiObjectToLight(o: 'KikiObject') -> "KikiLight *":
    return _kiki.kikiObjectToLight(o)
kikiObjectToLight = _kiki.kikiObjectToLight
class KikiCellText(KikiObject, KikiText):
    __swig_setmethods__ = {}
    for _s in [KikiObject, KikiText]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiCellText, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject, KikiText]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiCellText, name)
    __repr__ = _swig_repr

    def __init__(self, text: 'std::string const &', cell_height: 'float'=1.0, center: 'bool'=True, colorIndex: 'int'=0):
        this = _kiki.new_KikiCellText(text, cell_height, center, colorIndex)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setOffset(self, arg2: 'KVector') -> "void":
        return _kiki.KikiCellText_setOffset(self, arg2)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiCellText_setObjectColor)
    else:
        setObjectColor = _kiki.KikiCellText_setObjectColor
KikiCellText_swigregister = _kiki.KikiCellText_swigregister
KikiCellText_swigregister(KikiCellText)

def KikiCellText_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiCellText_setObjectColor(color_name, color)
KikiCellText_setObjectColor = _kiki.KikiCellText_setObjectColor


def kikiObjectToCellText(o: 'KikiObject') -> "KikiCellText *":
    return _kiki.kikiObjectToCellText(o)
kikiObjectToCellText = _kiki.kikiObjectToCellText
class KikiStone(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiStone, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiStone, name)
    __repr__ = _swig_repr

    def __init__(self, color: 'KColor'=None, slippery: 'bool'=False):
        this = _kiki.new_KikiStone(color, slippery)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiStone_setObjectColor)
    else:
        setObjectColor = _kiki.KikiStone_setObjectColor
KikiStone_swigregister = _kiki.KikiStone_swigregister
KikiStone_swigregister(KikiStone)

def KikiStone_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiStone_setObjectColor(color_name, color)
KikiStone_setObjectColor = _kiki.KikiStone_setObjectColor


def kikiObjectToStone(o: 'KikiObject') -> "KikiStone *":
    return _kiki.kikiObjectToStone(o)
kikiObjectToStone = _kiki.kikiObjectToStone
class KikiWireStone(KikiStone):
    __swig_setmethods__ = {}
    for _s in [KikiStone]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWireStone, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiStone]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWireStone, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kiki.new_KikiWireStone()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiWireStone_setObjectColor)
    else:
        setObjectColor = _kiki.KikiWireStone_setObjectColor
KikiWireStone_swigregister = _kiki.KikiWireStone_swigregister
KikiWireStone_swigregister(KikiWireStone)

def KikiWireStone_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiWireStone_setObjectColor(color_name, color)
KikiWireStone_setObjectColor = _kiki.KikiWireStone_setObjectColor


def kikiObjectToWireStone(o: 'KikiObject') -> "KikiWireStone *":
    return _kiki.kikiObjectToWireStone(o)
kikiObjectToWireStone = _kiki.kikiObjectToWireStone
class KikiWall(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWall, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWall, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kiki.new_KikiWall()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiWall_setObjectColor)
    else:
        setObjectColor = _kiki.KikiWall_setObjectColor
KikiWall_swigregister = _kiki.KikiWall_swigregister
KikiWall_swigregister(KikiWall)

def KikiWall_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiWall_setObjectColor(color_name, color)
KikiWall_setObjectColor = _kiki.KikiWall_setObjectColor


def kikiObjectToWall(o: 'KikiObject') -> "KikiWall *":
    return _kiki.kikiObjectToWall(o)
kikiObjectToWall = _kiki.kikiObjectToWall
class KikiBomb(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBomb, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBomb, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kiki.new_KikiBomb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiBomb_setObjectColor)
    else:
        setObjectColor = _kiki.KikiBomb_setObjectColor
KikiBomb_swigregister = _kiki.KikiBomb_swigregister
KikiBomb_swigregister(KikiBomb)

def KikiBomb_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiBomb_setObjectColor(color_name, color)
KikiBomb_setObjectColor = _kiki.KikiBomb_setObjectColor


def kikiObjectToBomb(o: 'KikiObject') -> "KikiBomb *":
    return _kiki.kikiObjectToBomb(o)
kikiObjectToBomb = _kiki.kikiObjectToBomb
class KikiSwitch(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiSwitch, name)
    __repr__ = _swig_repr

    def __init__(self, on: 'bool'=False):
        this = _kiki.new_KikiSwitch(on)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toggle(self) -> "void":
        return _kiki.KikiSwitch_toggle(self)

    def setActive(self, active: 'bool') -> "void":
        return _kiki.KikiSwitch_setActive(self, active)

    def isActive(self) -> "bool":
        return _kiki.KikiSwitch_isActive(self)
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiSwitch_setObjectColor)
    else:
        setObjectColor = _kiki.KikiSwitch_setObjectColor
KikiSwitch_swigregister = _kiki.KikiSwitch_swigregister
KikiSwitch_swigregister(KikiSwitch)

def KikiSwitch_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiSwitch_setObjectColor(color_name, color)
KikiSwitch_setObjectColor = _kiki.KikiSwitch_setObjectColor


def kikiObjectToSwitch(o: 'KikiObject') -> "KikiSwitch *":
    return _kiki.kikiObjectToSwitch(o)
kikiObjectToSwitch = _kiki.kikiObjectToSwitch
class KikiGate(KikiSwitch):
    __swig_setmethods__ = {}
    for _s in [KikiSwitch]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGate, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiSwitch]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGate, name)
    __repr__ = _swig_repr

    def __init__(self, open: 'bool'=False):
        this = _kiki.new_KikiGate(open)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiGate_setObjectColor)
    else:
        setObjectColor = _kiki.KikiGate_setObjectColor
KikiGate_swigregister = _kiki.KikiGate_swigregister
KikiGate_swigregister(KikiGate)

def KikiGate_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiGate_setObjectColor(color_name, color)
KikiGate_setObjectColor = _kiki.KikiGate_setObjectColor


def kikiObjectToGate(o: 'KikiObject') -> "KikiGate *":
    return _kiki.kikiObjectToGate(o)
kikiObjectToGate = _kiki.kikiObjectToGate
class KikiAtom(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiAtom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def setValue(self, value: 'float') -> "void":
        return _kiki.KikiAtom_setValue(self, value)

    def getValue(self) -> "float":
        return _kiki.KikiAtom_getValue(self)
KikiAtom_swigregister = _kiki.KikiAtom_swigregister
KikiAtom_swigregister(KikiAtom)

class KikiMovesAtom(KikiAtom):
    __swig_setmethods__ = {}
    for _s in [KikiAtom]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMovesAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiAtom]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMovesAtom, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiMovesAtom_setObjectColor)
    else:
        setObjectColor = _kiki.KikiMovesAtom_setObjectColor
KikiMovesAtom_swigregister = _kiki.KikiMovesAtom_swigregister
KikiMovesAtom_swigregister(KikiMovesAtom)

def KikiMovesAtom_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiMovesAtom_setObjectColor(color_name, color)
KikiMovesAtom_setObjectColor = _kiki.KikiMovesAtom_setObjectColor

class KikiValueAtom(KikiAtom):
    __swig_setmethods__ = {}
    for _s in [KikiAtom]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiValueAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiAtom]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiValueAtom, name)
    __repr__ = _swig_repr

    def __init__(self, range_start: 'float'=0.0, range_end: 'float'=1.0, start_value: 'float'=1.0, levels: 'int'=9):
        this = _kiki.new_KikiValueAtom(range_start, range_end, start_value, levels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiValueAtom_setObjectColor)
    else:
        setObjectColor = _kiki.KikiValueAtom_setObjectColor
KikiValueAtom_swigregister = _kiki.KikiValueAtom_swigregister
KikiValueAtom_swigregister(KikiValueAtom)

def KikiValueAtom_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiValueAtom_setObjectColor(color_name, color)
KikiValueAtom_setObjectColor = _kiki.KikiValueAtom_setObjectColor

class KikiSpikes(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiSpikes, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiSpikes, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _kiki.new_KikiSpikes(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiSpikes_setObjectColor)
    else:
        setObjectColor = _kiki.KikiSpikes_setObjectColor
KikiSpikes_swigregister = _kiki.KikiSpikes_swigregister
KikiSpikes_swigregister(KikiSpikes)

def KikiSpikes_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiSpikes_setObjectColor(color_name, color)
KikiSpikes_setObjectColor = _kiki.KikiSpikes_setObjectColor


def kikiObjectToSpikes(o: 'KikiObject') -> "KikiSpikes *":
    return _kiki.kikiObjectToSpikes(o)
kikiObjectToSpikes = _kiki.kikiObjectToSpikes
class KikiBullet(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBullet, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBullet, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        setObjectColor = staticmethod(_kiki.KikiBullet_setObjectColor)
    else:
        setObjectColor = _kiki.KikiBullet_setObjectColor
KikiBullet_swigregister = _kiki.KikiBullet_swigregister
KikiBullet_swigregister(KikiBullet)

def KikiBullet_setObjectColor(color_name: 'char const *', color: 'KColor') -> "void":
    return _kiki.KikiBullet_setObjectColor(color_name, color)
KikiBullet_setObjectColor = _kiki.KikiBullet_setObjectColor

class KConsole(KWindow):
    __swig_setmethods__ = {}
    for _s in [KWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KConsole, name, value)
    __swig_getmethods__ = {}
    for _s in [KWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KConsole, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        _print = staticmethod(_kiki.KConsole__print)
    else:
        _print = _kiki.KConsole__print
    if _newclass:
        write = staticmethod(_kiki.KConsole_write)
    else:
        write = _kiki.KConsole_write
    if _newclass:
        printError = staticmethod(_kiki.KConsole_printError)
    else:
        printError = _kiki.KConsole_printError
    if _newclass:
        getConsole = staticmethod(_kiki.KConsole_getConsole)
    else:
        getConsole = _kiki.KConsole_getConsole

    def clear(self) -> "void":
        return _kiki.KConsole_clear(self)


    def out (self, *args):
        _kiki.KConsole__print(" ".join(map(str, args)))

KConsole_swigregister = _kiki.KConsole_swigregister
KConsole_swigregister(KConsole)

def KConsole__print(s: 'std::string const &') -> "void":
    return _kiki.KConsole__print(s)
KConsole__print = _kiki.KConsole__print

def KConsole_write(s: 'std::string const &') -> "void":
    return _kiki.KConsole_write(s)
KConsole_write = _kiki.KConsole_write

def KConsole_printError(arg1: 'std::string const &', arg2: 'bool'=False) -> "void":
    return _kiki.KConsole_printError(arg1, arg2)
KConsole_printError = _kiki.KConsole_printError

def KConsole_getConsole() -> "KConsole *":
    return _kiki.KConsole_getConsole()
KConsole_getConsole = _kiki.KConsole_getConsole

class KikiPythonWidget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPythonWidget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPythonWidget, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["cursorPos"] = _kiki.KikiPythonWidget_cursorPos_set
    __swig_getmethods__["cursorPos"] = _kiki.KikiPythonWidget_cursorPos_get
    if _newclass:
        cursorPos = _swig_property(_kiki.KikiPythonWidget_cursorPos_get, _kiki.KikiPythonWidget_cursorPos_set)
    __swig_setmethods__["selectionPos"] = _kiki.KikiPythonWidget_selectionPos_set
    __swig_getmethods__["selectionPos"] = _kiki.KikiPythonWidget_selectionPos_get
    if _newclass:
        selectionPos = _swig_property(_kiki.KikiPythonWidget_selectionPos_get, _kiki.KikiPythonWidget_selectionPos_set)

    def getTextRows(self) -> "int":
        return _kiki.KikiPythonWidget_getTextRows(self)

    def getTextCols(self) -> "int":
        return _kiki.KikiPythonWidget_getTextCols(self)

    def getTextSize(self) -> "KSize":
        return _kiki.KikiPythonWidget_getTextSize(self)

    def getColumnWidth(self) -> "int":
        return _kiki.KikiPythonWidget_getColumnWidth(self)

    def getRowHeight(self) -> "int":
        return _kiki.KikiPythonWidget_getRowHeight(self)

    def getPythonWindow(self) -> "KikiPython *":
        return _kiki.KikiPythonWidget_getPythonWindow(self)

    def displayStringAtPos(self, str: 'std::string const &', pos: 'KikiPos') -> "void":
        return _kiki.KikiPythonWidget_displayStringAtPos(self, str, pos)
KikiPythonWidget_swigregister = _kiki.KikiPythonWidget_swigregister
KikiPythonWidget_swigregister(KikiPythonWidget)

class KikiPython(KWindow):
    __swig_setmethods__ = {}
    for _s in [KWindow]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPython, name, value)
    __swig_getmethods__ = {}
    for _s in [KWindow]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPython, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getPythonWidget(self) -> "KikiPythonWidget *":
        return _kiki.KikiPython_getPythonWidget(self)

    def setScrollBarUnits(self, arg2: 'int', arg3: 'int') -> "void":
        return _kiki.KikiPython_setScrollBarUnits(self, arg2, arg3)

    def requestUserInput(self, str: 'std::string const &') -> "void":
        return _kiki.KikiPython_requestUserInput(self, str)

    def setTitle(self, str: 'std::string const &') -> "void":
        return _kiki.KikiPython_setTitle(self, str)

    def setStatus(self, str: 'std::string const &') -> "void":
        return _kiki.KikiPython_setStatus(self, str)

    def setInput(self, str: 'std::string const &') -> "void":
        return _kiki.KikiPython_setInput(self, str)

    def executeFile(self, pythonFile: 'std::string const &') -> "void":
        return _kiki.KikiPython_executeFile(self, pythonFile)
KikiPython_swigregister = _kiki.KikiPython_swigregister
KikiPython_swigregister(KikiPython)

# This file is compatible with both classic and new-style classes.


