# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _kiki
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class KikiPos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPos, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _kiki.KikiPos_x_set
    __swig_getmethods__["x"] = _kiki.KikiPos_x_get
    if _newclass:x = _swig_property(_kiki.KikiPos_x_get, _kiki.KikiPos_x_set)
    __swig_setmethods__["y"] = _kiki.KikiPos_y_set
    __swig_getmethods__["y"] = _kiki.KikiPos_y_get
    if _newclass:y = _swig_property(_kiki.KikiPos_y_get, _kiki.KikiPos_y_set)
    __swig_setmethods__["z"] = _kiki.KikiPos_z_set
    __swig_getmethods__["z"] = _kiki.KikiPos_z_get
    if _newclass:z = _swig_property(_kiki.KikiPos_z_get, _kiki.KikiPos_z_set)
    def __init__(self, *args): 
        this = _kiki.new_KikiPos(*args)
        try: self.this.append(this)
        except: self.this = this
    def __sub__(*args): return _kiki.KikiPos___sub__(*args)
    def __add__(*args): return _kiki.KikiPos___add__(*args)
    def __iadd__(*args): return _kiki.KikiPos___iadd__(*args)
    def __isub__(*args): return _kiki.KikiPos___isub__(*args)
    def getString(*args): return _kiki.KikiPos_getString(*args)
    def __eq__(*args): return _kiki.KikiPos___eq__(*args)
    def __ne__(*args): return _kiki.KikiPos___ne__(*args)
    def __str__(*args): return _kiki.KikiPos___str__(*args)
    __swig_destroy__ = _kiki.delete_KikiPos
    __del__ = lambda self : None;
KikiPos_swigregister = _kiki.KikiPos_swigregister
KikiPos_swigregister(KikiPos)

class KVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KVector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(*args): return _kiki.KVector_reset(*args)
    def normalize(*args): return _kiki.KVector_normalize(*args)
    def __iadd__(*args): return _kiki.KVector___iadd__(*args)
    def __isub__(*args): return _kiki.KVector___isub__(*args)
    def __imul__(*args): return _kiki.KVector___imul__(*args)
    def __idiv__(*args): return _kiki.KVector___idiv__(*args)
    def cross(*args): return _kiki.KVector_cross(*args)
    def __sub__(*args): return _kiki.KVector___sub__(*args)
    def __add__(*args): return _kiki.KVector___add__(*args)
    def __mul__(*args): return _kiki.KVector___mul__(*args)
    def __div__(*args): return _kiki.KVector___div__(*args)
    def perpendicular(*args): return _kiki.KVector_perpendicular(*args)
    def parallel(*args): return _kiki.KVector_parallel(*args)
    def reflect(*args): return _kiki.KVector_reflect(*args)
    def normal(*args): return _kiki.KVector_normal(*args)
    def length(*args): return _kiki.KVector_length(*args)
    def angle(*args): return _kiki.KVector_angle(*args)
    def xyangle(*args): return _kiki.KVector_xyangle(*args)
    def xyperp(*args): return _kiki.KVector_xyperp(*args)
    def round(*args): return _kiki.KVector_round(*args)
    def glVertex(*args): return _kiki.KVector_glVertex(*args)
    def __getitem__(*args): return _kiki.KVector___getitem__(*args)
    def __str__(*args): return _kiki.KVector___str__(*args)
    __swig_destroy__ = _kiki.delete_KVector
    __del__ = lambda self : None;
KVector_swigregister = _kiki.KVector_swigregister
KVector_swigregister(KVector)

class KQuaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KQuaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KQuaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _kiki.KQuaternion_w_set
    __swig_getmethods__["w"] = _kiki.KQuaternion_w_get
    if _newclass:w = _swig_property(_kiki.KQuaternion_w_get, _kiki.KQuaternion_w_set)
    __swig_setmethods__["x"] = _kiki.KQuaternion_x_set
    __swig_getmethods__["x"] = _kiki.KQuaternion_x_get
    if _newclass:x = _swig_property(_kiki.KQuaternion_x_get, _kiki.KQuaternion_x_set)
    __swig_setmethods__["y"] = _kiki.KQuaternion_y_set
    __swig_getmethods__["y"] = _kiki.KQuaternion_y_get
    if _newclass:y = _swig_property(_kiki.KQuaternion_y_get, _kiki.KQuaternion_y_set)
    __swig_setmethods__["z"] = _kiki.KQuaternion_z_set
    __swig_getmethods__["z"] = _kiki.KQuaternion_z_get
    if _newclass:z = _swig_property(_kiki.KQuaternion_z_get, _kiki.KQuaternion_z_set)
    def __init__(self, *args): 
        this = _kiki.new_KQuaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["rotationAroundVector"] = lambda x: _kiki.KQuaternion_rotationAroundVector
    if _newclass:rotationAroundVector = staticmethod(_kiki.KQuaternion_rotationAroundVector)
    def rotate(*args): return _kiki.KQuaternion_rotate(*args)
    def normalize(*args): return _kiki.KQuaternion_normalize(*args)
    def invert(*args): return _kiki.KQuaternion_invert(*args)
    def conjugate(*args): return _kiki.KQuaternion_conjugate(*args)
    def getNormal(*args): return _kiki.KQuaternion_getNormal(*args)
    def getConjugate(*args): return _kiki.KQuaternion_getConjugate(*args)
    def getInverse(*args): return _kiki.KQuaternion_getInverse(*args)
    def length(*args): return _kiki.KQuaternion_length(*args)
    def glRotate(*args): return _kiki.KQuaternion_glRotate(*args)
    def slerp(*args): return _kiki.KQuaternion_slerp(*args)
    def __mul__(*args): return _kiki.KQuaternion___mul__(*args)
    def __str__(*args): return _kiki.KQuaternion___str__(*args)
    __swig_destroy__ = _kiki.delete_KQuaternion
    __del__ = lambda self : None;
KQuaternion_swigregister = _kiki.KQuaternion_swigregister
KQuaternion_swigregister(KQuaternion)
KQuaternion_rotationAroundVector = _kiki.KQuaternion_rotationAroundVector

class KColor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KColor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KColor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KColor(*args)
        try: self.this.append(this)
        except: self.this = this
    def setValues(*args): return _kiki.KColor_setValues(*args)
    def setRed(*args): return _kiki.KColor_setRed(*args)
    def setGreen(*args): return _kiki.KColor_setGreen(*args)
    def setBlue(*args): return _kiki.KColor_setBlue(*args)
    def setAlpha(*args): return _kiki.KColor_setAlpha(*args)
    def getRed(*args): return _kiki.KColor_getRed(*args)
    def getGreen(*args): return _kiki.KColor_getGreen(*args)
    def getBlue(*args): return _kiki.KColor_getBlue(*args)
    def getAlpha(*args): return _kiki.KColor_getAlpha(*args)
    def glColor(*args): return _kiki.KColor_glColor(*args)
    def __str__(*args): return _kiki.KColor___str__(*args)
    __swig_destroy__ = _kiki.delete_KColor
    __del__ = lambda self : None;
KColor_swigregister = _kiki.KColor_swigregister
KColor_swigregister(KColor)

class KProjection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KProjection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KProjection, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def focusOn(*args): return _kiki.KProjection_focusOn(*args)
    def setFov(*args): return _kiki.KProjection_setFov(*args)
    def getFov(*args): return _kiki.KProjection_getFov(*args)
    def setViewport(*args): return _kiki.KProjection_setViewport(*args)
    def setPosition(*args): return _kiki.KProjection_setPosition(*args)
KProjection_swigregister = _kiki.KProjection_swigregister
KProjection_swigregister(KProjection)

class KKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KKey, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KKey(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["name"] = _kiki.KKey_name_set
    __swig_getmethods__["name"] = _kiki.KKey_name_get
    if _newclass:name = _swig_property(_kiki.KKey_name_get, _kiki.KKey_name_set)
    def getUnmodifiedName(*args): return _kiki.KKey_getUnmodifiedName(*args)
    def getModifierName(*args): return _kiki.KKey_getModifierName(*args)
KKey_swigregister = _kiki.KKey_swigregister
KKey_swigregister(KKey)

class KikiAction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiAction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiAction, name)
    __repr__ = _swig_repr
    ONCE = _kiki.KikiAction_ONCE
    CONTINUOUS = _kiki.KikiAction_CONTINUOUS
    REPEAT = _kiki.KikiAction_REPEAT
    def __init__(self, *args): 
        this = _kiki.new_KikiAction(*args)
        try: self.this.append(this)
        except: self.this = this
    def getId(*args): return _kiki.KikiAction_getId(*args)
    def getName(*args): return _kiki.KikiAction_getName(*args)
    def getRelativeTime(*args): return _kiki.KikiAction_getRelativeTime(*args)
    def getRelativeDelta(*args): return _kiki.KikiAction_getRelativeDelta(*args)
    def getDuration(*args): return _kiki.KikiAction_getDuration(*args)
    def setDuration(*args): return _kiki.KikiAction_setDuration(*args)
KikiAction_swigregister = _kiki.KikiAction_swigregister
KikiAction_swigregister(KikiAction)

class KikiPyAction(KikiAction):
    __swig_setmethods__ = {}
    for _s in [KikiAction]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPyAction, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiAction]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPyAction, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiPyAction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kiki.delete_KikiPyAction
    __del__ = lambda self : None;
    def __init__(self,*args):
        self.this = apply (_kiki.new_KikiPyAction, (self,) + args)
        self.thisown = 1

KikiPyAction_swigregister = _kiki.KikiPyAction_swigregister
KikiPyAction_swigregister(KikiPyAction)

class KikiEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiEvent, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiEvent(*args)
        try: self.this.append(this)
        except: self.this = this
    def addAction(*args): return _kiki.KikiEvent_addAction(*args)
    def removeAction(*args): return _kiki.KikiEvent_removeAction(*args)
    def removeAllActions(*args): return _kiki.KikiEvent_removeAllActions(*args)
    def removeActionsOfObject(*args): return _kiki.KikiEvent_removeActionsOfObject(*args)
    def removeActionWithName(*args): return _kiki.KikiEvent_removeActionWithName(*args)
    def triggerActions(*args): return _kiki.KikiEvent_triggerActions(*args)
    def getTime(*args): return _kiki.KikiEvent_getTime(*args)
KikiEvent_swigregister = _kiki.KikiEvent_swigregister
KikiEvent_swigregister(KikiEvent)

class KikiActionObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiActionObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiActionObject, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def addAction(*args): return _kiki.KikiActionObject_addAction(*args)
    def removeAction(*args): return _kiki.KikiActionObject_removeAction(*args)
    def startTimedAction(*args): return _kiki.KikiActionObject_startTimedAction(*args)
    def startTimer(*args): return _kiki.KikiActionObject_startTimer(*args)
    def getActionWithName(*args): return _kiki.KikiActionObject_getActionWithName(*args)
    def getActionWithId(*args): return _kiki.KikiActionObject_getActionWithId(*args)
    def addEventWithName(*args): return _kiki.KikiActionObject_addEventWithName(*args)
    def getEventWithName(*args): return _kiki.KikiActionObject_getEventWithName(*args)
    def getEventWithId(*args): return _kiki.KikiActionObject_getEventWithId(*args)
    def getClassName(*args): return _kiki.KikiActionObject_getClassName(*args)
KikiActionObject_swigregister = _kiki.KikiActionObject_swigregister
KikiActionObject_swigregister(KikiActionObject)

class KikiObject(KikiActionObject):
    __swig_setmethods__ = {}
    for _s in [KikiActionObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiObject, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiActionObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiObject, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setName(*args): return _kiki.KikiObject_setName(*args)
    def getName(*args): return _kiki.KikiObject_getName(*args)
    def getPos(*args): return _kiki.KikiObject_getPos(*args)
    def setPosition(*args): return _kiki.KikiObject_setPosition(*args)
    def getPosition(*args): return _kiki.KikiObject_getPosition(*args)
    def setOrientation(*args): return _kiki.KikiObject_setOrientation(*args)
    def getOrientation(*args): return _kiki.KikiObject_getOrientation(*args)
    def setCurrentOrientation(*args): return _kiki.KikiObject_setCurrentOrientation(*args)
    def getCurrentOrientation(*args): return _kiki.KikiObject_getCurrentOrientation(*args)
    def isSpaceEgoistic(*args): return _kiki.KikiObject_isSpaceEgoistic(*args)
    def getClassName(*args): return _kiki.KikiObject_getClassName(*args)
KikiObject_swigregister = _kiki.KikiObject_swigregister
KikiObject_swigregister(KikiObject)

class KikiBotStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBotStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBotStatus, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getMoves(*args): return _kiki.KikiBotStatus_getMoves(*args)
    def setMoves(*args): return _kiki.KikiBotStatus_setMoves(*args)
    def addMoves(*args): return _kiki.KikiBotStatus_addMoves(*args)
    def getMinMoves(*args): return _kiki.KikiBotStatus_getMinMoves(*args)
    def setMinMoves(*args): return _kiki.KikiBotStatus_setMinMoves(*args)
KikiBotStatus_swigregister = _kiki.KikiBotStatus_swigregister
KikiBotStatus_swigregister(KikiBotStatus)

class KikiBotFume(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBotFume, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBotFume, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiBotFume_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiBotFume_setObjectColor)
KikiBotFume_swigregister = _kiki.KikiBotFume_swigregister
KikiBotFume_swigregister(KikiBotFume)
KikiBotFume_setObjectColor = _kiki.KikiBotFume_setObjectColor

class KikiBot(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBot, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBot, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def isDead(*args): return _kiki.KikiBot_isDead(*args)
    def getDown(*args): return _kiki.KikiBot_getDown(*args)
    def getUp(*args): return _kiki.KikiBot_getUp(*args)
    def getDir(*args): return _kiki.KikiBot_getDir(*args)
    def setMove(*args): return _kiki.KikiBot_setMove(*args)
    def getStatus(*args): return _kiki.KikiBot_getStatus(*args)
KikiBot_swigregister = _kiki.KikiBot_swigregister
KikiBot_swigregister(KikiBot)

class KikiStatusDisplay(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiStatusDisplay, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiStatusDisplay, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def show(*args): return _kiki.KikiStatusDisplay_show(*args)
    def hide(*args): return _kiki.KikiStatusDisplay_hide(*args)
KikiStatusDisplay_swigregister = _kiki.KikiStatusDisplay_swigregister
KikiStatusDisplay_swigregister(KikiStatusDisplay)

class KikiPlayback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPlayback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPlayback, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["start"] = lambda x: _kiki.KikiPlayback_start
    if _newclass:start = staticmethod(_kiki.KikiPlayback_start)
    __swig_getmethods__["stop"] = lambda x: _kiki.KikiPlayback_stop
    if _newclass:stop = staticmethod(_kiki.KikiPlayback_stop)
KikiPlayback_swigregister = _kiki.KikiPlayback_swigregister
KikiPlayback_swigregister(KikiPlayback)
KikiPlayback_start = _kiki.KikiPlayback_start
KikiPlayback_stop = _kiki.KikiPlayback_stop

class KikiPlayer(KikiBot):
    __swig_setmethods__ = {}
    for _s in [KikiBot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPlayer, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiBot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPlayer, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def die(*args): return _kiki.KikiPlayer_die(*args)
    def reborn(*args): return _kiki.KikiPlayer_reborn(*args)
    def reset(*args): return _kiki.KikiPlayer_reset(*args)
    def startRecorder(*args): return _kiki.KikiPlayer_startRecorder(*args)
    def saveRecorder(*args): return _kiki.KikiPlayer_saveRecorder(*args)
    def getProjection(*args): return _kiki.KikiPlayer_getProjection(*args)
    def handleKey(*args): return _kiki.KikiPlayer_handleKey(*args)
    def handleKeyRelease(*args): return _kiki.KikiPlayer_handleKeyRelease(*args)
    def recordKeyForAction(*args): return _kiki.KikiPlayer_recordKeyForAction(*args)
    __swig_getmethods__["getActionForKey"] = lambda x: _kiki.KikiPlayer_getActionForKey
    if _newclass:getActionForKey = staticmethod(_kiki.KikiPlayer_getActionForKey)
    __swig_getmethods__["getKeyForAction"] = lambda x: _kiki.KikiPlayer_getKeyForAction
    if _newclass:getKeyForAction = staticmethod(_kiki.KikiPlayer_getKeyForAction)
    __swig_getmethods__["setKeyForAction"] = lambda x: _kiki.KikiPlayer_setKeyForAction
    if _newclass:setKeyForAction = staticmethod(_kiki.KikiPlayer_setKeyForAction)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiPlayer_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiPlayer_setObjectColor)
KikiPlayer_swigregister = _kiki.KikiPlayer_swigregister
KikiPlayer_swigregister(KikiPlayer)
KikiPlayer_getActionForKey = _kiki.KikiPlayer_getActionForKey
KikiPlayer_getKeyForAction = _kiki.KikiPlayer_getKeyForAction
KikiPlayer_setKeyForAction = _kiki.KikiPlayer_setKeyForAction
KikiPlayer_setObjectColor = _kiki.KikiPlayer_setObjectColor

class KikiMutant(KikiBot):
    __swig_setmethods__ = {}
    for _s in [KikiBot]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMutant, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiBot]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMutant, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiMutant(*args)
        try: self.this.append(this)
        except: self.this = this
    def die(*args): return _kiki.KikiMutant_die(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiMutant_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiMutant_setObjectColor)
KikiMutant_swigregister = _kiki.KikiMutant_swigregister
KikiMutant_swigregister(KikiMutant)
KikiMutant_setObjectColor = _kiki.KikiMutant_setObjectColor

class KikiSound(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiSound, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiSound, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def toggleMute(*args): return _kiki.KikiSound_toggleMute(*args)
    def setMute(*args): return _kiki.KikiSound_setMute(*args)
    def isMute(*args): return _kiki.KikiSound_isMute(*args)
    def setSoundVolume(*args): return _kiki.KikiSound_setSoundVolume(*args)
    def getSoundVolume(*args): return _kiki.KikiSound_getSoundVolume(*args)
    def playSound(*args): return _kiki.KikiSound_playSound(*args)
    def playSoundAtPos(*args): return _kiki.KikiSound_playSoundAtPos(*args)
KikiSound_swigregister = _kiki.KikiSound_swigregister
KikiSound_swigregister(KikiSound)

class KikiWorld(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWorld, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWorld, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    CAMERA_INSIDE = _kiki.KikiWorld_CAMERA_INSIDE
    CAMERA_BEHIND = _kiki.KikiWorld_CAMERA_BEHIND
    CAMERA_FOLLOW = _kiki.KikiWorld_CAMERA_FOLLOW
    def setSize(*args): return _kiki.KikiWorld_setSize(*args)
    def getSize(*args): return _kiki.KikiWorld_getSize(*args)
    def setName(*args): return _kiki.KikiWorld_setName(*args)
    def getName(*args): return _kiki.KikiWorld_getName(*args)
    def init(*args): return _kiki.KikiWorld_init(*args)
    def setDisplayShadows(*args): return _kiki.KikiWorld_setDisplayShadows(*args)
    def setDisplayRaster(*args): return _kiki.KikiWorld_setDisplayRaster(*args)
    def setDisplayBorder(*args): return _kiki.KikiWorld_setDisplayBorder(*args)
    def setRasterSize(*args): return _kiki.KikiWorld_setRasterSize(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiWorld_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiWorld_setObjectColor)
    def changeCameraMode(*args): return _kiki.KikiWorld_changeCameraMode(*args)
    def getCameraMode(*args): return _kiki.KikiWorld_getCameraMode(*args)
    def setCameraMode(*args): return _kiki.KikiWorld_setCameraMode(*args)
    def getProjection(*args): return _kiki.KikiWorld_getProjection(*args)
    def addObjectAtPos(*args): return _kiki.KikiWorld_addObjectAtPos(*args)
    def setObjectAtPos(*args): return _kiki.KikiWorld_setObjectAtPos(*args)
    def unsetObject(*args): return _kiki.KikiWorld_unsetObject(*args)
    def removeObject(*args): return _kiki.KikiWorld_removeObject(*args)
    def deleteObject(*args): return _kiki.KikiWorld_deleteObject(*args)
    def deleteAllObjects(*args): return _kiki.KikiWorld_deleteAllObjects(*args)
    def deleteObjectsWithClassName(*args): return _kiki.KikiWorld_deleteObjectsWithClassName(*args)
    def getObjectWithName(*args): return _kiki.KikiWorld_getObjectWithName(*args)
    def moveObjectToPos(*args): return _kiki.KikiWorld_moveObjectToPos(*args)
    def objectWillMoveToPos(*args): return _kiki.KikiWorld_objectWillMoveToPos(*args)
    def objectMovedFromPos(*args): return _kiki.KikiWorld_objectMovedFromPos(*args)
    def getBotAtPos(*args): return _kiki.KikiWorld_getBotAtPos(*args)
    def getOccupantAtPos(*args): return _kiki.KikiWorld_getOccupantAtPos(*args)
    def getRealOccupantAtPos(*args): return _kiki.KikiWorld_getRealOccupantAtPos(*args)
    def getNearestValidPos(*args): return _kiki.KikiWorld_getNearestValidPos(*args)
    def isInvalidPos(*args): return _kiki.KikiWorld_isInvalidPos(*args)
    def isValidPos(*args): return _kiki.KikiWorld_isValidPos(*args)
    def isUnoccupiedPos(*args): return _kiki.KikiWorld_isUnoccupiedPos(*args)
    def isOccupiedPos(*args): return _kiki.KikiWorld_isOccupiedPos(*args)
    def posToIndex(*args): return _kiki.KikiWorld_posToIndex(*args)
    def indexToPos(*args): return _kiki.KikiWorld_indexToPos(*args)
    def getPickedPos(*args): return _kiki.KikiWorld_getPickedPos(*args)
KikiWorld_swigregister = _kiki.KikiWorld_swigregister
KikiWorld_swigregister(KikiWorld)
KikiWorld_setObjectColor = _kiki.KikiWorld_setObjectColor

class KEventHandler(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KEventHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KEventHandler, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def quit(*args): return _kiki.KEventHandler_quit(*args)
    __swig_getmethods__["getMouseState"] = lambda x: _kiki.KEventHandler_getMouseState
    if _newclass:getMouseState = staticmethod(_kiki.KEventHandler_getMouseState)
    __swig_getmethods__["getMousePos"] = lambda x: _kiki.KEventHandler_getMousePos
    if _newclass:getMousePos = staticmethod(_kiki.KEventHandler_getMousePos)
    __swig_getmethods__["getMouseDelta"] = lambda x: _kiki.KEventHandler_getMouseDelta
    if _newclass:getMouseDelta = staticmethod(_kiki.KEventHandler_getMouseDelta)
    __swig_getmethods__["getScreenSize"] = lambda x: _kiki.KEventHandler_getScreenSize
    if _newclass:getScreenSize = staticmethod(_kiki.KEventHandler_getScreenSize)
    __swig_getmethods__["setScreenSize"] = lambda x: _kiki.KEventHandler_setScreenSize
    if _newclass:setScreenSize = staticmethod(_kiki.KEventHandler_setScreenSize)
    __swig_getmethods__["getFullscreen"] = lambda x: _kiki.KEventHandler_getFullscreen
    if _newclass:getFullscreen = staticmethod(_kiki.KEventHandler_getFullscreen)
    __swig_getmethods__["setFullscreen"] = lambda x: _kiki.KEventHandler_setFullscreen
    if _newclass:setFullscreen = staticmethod(_kiki.KEventHandler_setFullscreen)
    __swig_getmethods__["getTime"] = lambda x: _kiki.KEventHandler_getTime
    if _newclass:getTime = staticmethod(_kiki.KEventHandler_getTime)
    def setWireframeMode(*args): return _kiki.KEventHandler_setWireframeMode(*args)
    def setDisplayFps(*args): return _kiki.KEventHandler_setDisplayFps(*args)
    def getDisplayFps(*args): return _kiki.KEventHandler_getDisplayFps(*args)
KEventHandler_swigregister = _kiki.KEventHandler_swigregister
KEventHandler_swigregister(KEventHandler)
KEventHandler_getMouseState = _kiki.KEventHandler_getMouseState
KEventHandler_getMousePos = _kiki.KEventHandler_getMousePos
KEventHandler_getMouseDelta = _kiki.KEventHandler_getMouseDelta
KEventHandler_getScreenSize = _kiki.KEventHandler_getScreenSize
KEventHandler_setScreenSize = _kiki.KEventHandler_setScreenSize
KEventHandler_getFullscreen = _kiki.KEventHandler_getFullscreen
KEventHandler_setFullscreen = _kiki.KEventHandler_setFullscreen
KEventHandler_getTime = _kiki.KEventHandler_getTime

class KikiController(KEventHandler,KikiActionObject):
    __swig_setmethods__ = {}
    for _s in [KEventHandler,KikiActionObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiController, name, value)
    __swig_getmethods__ = {}
    for _s in [KEventHandler,KikiActionObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiController, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["gui"] = _kiki.KikiController_gui_set
    __swig_getmethods__["gui"] = _kiki.KikiController_gui_get
    if _newclass:gui = _swig_property(_kiki.KikiController_gui_get, _kiki.KikiController_gui_set)
    __swig_setmethods__["sound"] = _kiki.KikiController_sound_set
    __swig_getmethods__["sound"] = _kiki.KikiController_sound_get
    if _newclass:sound = _swig_property(_kiki.KikiController_sound_get, _kiki.KikiController_sound_set)
    __swig_setmethods__["world"] = _kiki.KikiController_world_set
    __swig_getmethods__["world"] = _kiki.KikiController_world_get
    if _newclass:world = _swig_property(_kiki.KikiController_world_get, _kiki.KikiController_world_set)
    __swig_setmethods__["player"] = _kiki.KikiController_player_set
    __swig_getmethods__["player"] = _kiki.KikiController_player_get
    if _newclass:player = _swig_property(_kiki.KikiController_player_get, _kiki.KikiController_player_set)
    __swig_setmethods__["python"] = _kiki.KikiController_python_set
    __swig_getmethods__["python"] = _kiki.KikiController_python_get
    if _newclass:python = _swig_property(_kiki.KikiController_python_get, _kiki.KikiController_python_set)
    __swig_setmethods__["player_status"] = _kiki.KikiController_player_status_set
    __swig_getmethods__["player_status"] = _kiki.KikiController_player_status_get
    if _newclass:player_status = _swig_property(_kiki.KikiController_player_status_get, _kiki.KikiController_player_status_set)
    __swig_setmethods__["timer_event"] = _kiki.KikiController_timer_event_set
    __swig_getmethods__["timer_event"] = _kiki.KikiController_timer_event_get
    if _newclass:timer_event = _swig_property(_kiki.KikiController_timer_event_get, _kiki.KikiController_timer_event_set)
    def getPlayer(*args): return _kiki.KikiController_getPlayer(*args)
    def unmapMsTime(*args): return _kiki.KikiController_unmapMsTime(*args)
    def mapMsTime(*args): return _kiki.KikiController_mapMsTime(*args)
    def setSpeed(*args): return _kiki.KikiController_setSpeed(*args)
    def getSpeed(*args): return _kiki.KikiController_getSpeed(*args)
    def getKikiHome(*args): return _kiki.KikiController_getKikiHome(*args)
    def setGamma(*args): return _kiki.KikiController_setGamma(*args)
    def getGamma(*args): return _kiki.KikiController_getGamma(*args)
    def changeScreenSize(*args): return _kiki.KikiController_changeScreenSize(*args)
    def displayText(*args): return _kiki.KikiController_displayText(*args)
    def getLocalizedString(*args): return _kiki.KikiController_getLocalizedString(*args)
    def isDebugVersion(*args): return _kiki.KikiController_isDebugVersion(*args)
KikiController_swigregister = _kiki.KikiController_swigregister
KikiController_swigregister(KikiController)

replaceTabs = _kiki.replaceTabs
class KWindow(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KWindow, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KWindow, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def isVisible(*args): return _kiki.KWindow_isVisible(*args)
    def setVisibility(*args): return _kiki.KWindow_setVisibility(*args)
    def toggleVisibility(*args): return _kiki.KWindow_toggleVisibility(*args)
    def maximize(*args): return _kiki.KWindow_maximize(*args)
    def show(*args): return _kiki.KWindow_show(*args)
    def hide(*args): return _kiki.KWindow_hide(*args)
    def close(*args): return _kiki.KWindow_close(*args)
    def setSize(*args): return _kiki.KWindow_setSize(*args)
    def setPosition(*args): return _kiki.KWindow_setPosition(*args)
KWindow_swigregister = _kiki.KWindow_swigregister
KWindow_swigregister(KWindow)
kiki = _kiki.cvar

class KikiText(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiText, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiText, name)
    __repr__ = _swig_repr
    base_color = _kiki.KikiText_base_color
    bright_color = _kiki.KikiText_bright_color
    dark_color = _kiki.KikiText_dark_color
    def __init__(self, *args): 
        this = _kiki.new_KikiText(*args)
        try: self.this.append(this)
        except: self.this = this
    def setText(*args): return _kiki.KikiText_setText(*args)
    def getText(*args): return _kiki.KikiText_getText(*args)
    def clear(*args): return _kiki.KikiText_clear(*args)
    def isEmpty(*args): return _kiki.KikiText_isEmpty(*args)
    def addText(*args): return _kiki.KikiText_addText(*args)
    def getColor(*args): return _kiki.KikiText_getColor(*args)
    def setColor(*args): return _kiki.KikiText_setColor(*args)
    def setAlpha(*args): return _kiki.KikiText_setAlpha(*args)
    def isAnimated(*args): return _kiki.KikiText_isAnimated(*args)
    def setAnimated(*args): return _kiki.KikiText_setAnimated(*args)
    def isCentered(*args): return _kiki.KikiText_isCentered(*args)
    def setCentered(*args): return _kiki.KikiText_setCentered(*args)
    def getWidth(*args): return _kiki.KikiText_getWidth(*args)
    def getHeight(*args): return _kiki.KikiText_getHeight(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiText_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiText_setObjectColor)
KikiText_swigregister = _kiki.KikiText_swigregister
KikiText_swigregister(KikiText)
KikiText_setObjectColor = _kiki.KikiText_setObjectColor

class KikiGUI(KWindow):
    __swig_setmethods__ = {}
    for _s in [KWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGUI, name, value)
    __swig_getmethods__ = {}
    for _s in [KWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGUI, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
KikiGUI_swigregister = _kiki.KikiGUI_swigregister
KikiGUI_swigregister(KikiGUI)

class KikiScreenText(KikiText,KikiActionObject):
    __swig_setmethods__ = {}
    for _s in [KikiText,KikiActionObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiScreenText, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiText,KikiActionObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiScreenText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiScreenText(*args)
        try: self.this.append(this)
        except: self.this = this
    def addText(*args): return _kiki.KikiScreenText_addText(*args)
    def setText(*args): return _kiki.KikiScreenText_setText(*args)
    def show(*args): return _kiki.KikiScreenText_show(*args)
    def getProjection(*args): return _kiki.KikiScreenText_getProjection(*args)
KikiScreenText_swigregister = _kiki.KikiScreenText_swigregister
KikiScreenText_swigregister(KikiScreenText)

class KikiMenu(KikiScreenText):
    __swig_setmethods__ = {}
    for _s in [KikiScreenText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiScreenText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMenu, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiMenu(*args)
        try: self.this.append(this)
        except: self.this = this
    def addItem(*args): return _kiki.KikiMenu_addItem(*args)
    def setCurrentIndex(*args): return _kiki.KikiMenu_setCurrentIndex(*args)
    def setEscapeActive(*args): return _kiki.KikiMenu_setEscapeActive(*args)
    __swig_setmethods__["circular"] = _kiki.KikiMenu_circular_set
    __swig_getmethods__["circular"] = _kiki.KikiMenu_circular_get
    if _newclass:circular = _swig_property(_kiki.KikiMenu_circular_get, _kiki.KikiMenu_circular_set)
KikiMenu_swigregister = _kiki.KikiMenu_swigregister
KikiMenu_swigregister(KikiMenu)

class KikiColumnMenu(KikiMenu):
    __swig_setmethods__ = {}
    for _s in [KikiMenu]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiColumnMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiMenu]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiColumnMenu, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiColumnMenu(*args)
        try: self.this.append(this)
        except: self.this = this
KikiColumnMenu_swigregister = _kiki.KikiColumnMenu_swigregister
KikiColumnMenu_swigregister(KikiColumnMenu)

class KikiScrollMenu(KikiColumnMenu):
    __swig_setmethods__ = {}
    for _s in [KikiColumnMenu]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiScrollMenu, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiColumnMenu]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiScrollMenu, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiScrollMenu(*args)
        try: self.this.append(this)
        except: self.this = this
    def getCurrentIndex(*args): return _kiki.KikiScrollMenu_getCurrentIndex(*args)
    def addItem(*args): return _kiki.KikiScrollMenu_addItem(*args)
KikiScrollMenu_swigregister = _kiki.KikiScrollMenu_swigregister
KikiScrollMenu_swigregister(KikiScrollMenu)

class KikiPageText(KikiScreenText):
    __swig_setmethods__ = {}
    for _s in [KikiScreenText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPageText, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiScreenText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPageText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiPageText(*args)
        try: self.this.append(this)
        except: self.this = this
KikiPageText_swigregister = _kiki.KikiPageText_swigregister
KikiPageText_swigregister(KikiPageText)

class KikiFace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiFace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiFace, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    PX = _kiki.KikiFace_PX
    X = _kiki.KikiFace_X
    PY = _kiki.KikiFace_PY
    Y = _kiki.KikiFace_Y
    PZ = _kiki.KikiFace_PZ
    Z = _kiki.KikiFace_Z
    NX = _kiki.KikiFace_NX
    NY = _kiki.KikiFace_NY
    NZ = _kiki.KikiFace_NZ
KikiFace_swigregister = _kiki.KikiFace_swigregister
KikiFace_swigregister(KikiFace)

class KikiWire(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWire, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWire, name)
    __repr__ = _swig_repr
    UP = _kiki.KikiWire_UP
    RIGHT = _kiki.KikiWire_RIGHT
    DOWN = _kiki.KikiWire_DOWN
    VERTICAL = _kiki.KikiWire_VERTICAL
    LEFT = _kiki.KikiWire_LEFT
    HORIZONTAL = _kiki.KikiWire_HORIZONTAL
    ALL = _kiki.KikiWire_ALL
    def __init__(self, *args): 
        this = _kiki.new_KikiWire(*args)
        try: self.this.append(this)
        except: self.this = this
    def setActive(*args): return _kiki.KikiWire_setActive(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiWire_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiWire_setObjectColor)
KikiWire_swigregister = _kiki.KikiWire_swigregister
KikiWire_swigregister(KikiWire)
KikiWire_setObjectColor = _kiki.KikiWire_setObjectColor

kikiObjectToWire = _kiki.kikiObjectToWire
class KikiGear(KikiObject,KikiFace):
    __swig_setmethods__ = {}
    for _s in [KikiObject,KikiFace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGear, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject,KikiFace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGear, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiGear(*args)
        try: self.this.append(this)
        except: self.this = this
    def setActive(*args): return _kiki.KikiGear_setActive(*args)
    def updateActive(*args): return _kiki.KikiGear_updateActive(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiGear_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiGear_setObjectColor)
KikiGear_swigregister = _kiki.KikiGear_swigregister
KikiGear_swigregister(KikiGear)
KikiGear_setObjectColor = _kiki.KikiGear_setObjectColor

kikiObjectToGear = _kiki.kikiObjectToGear
class KikiValve(KikiObject,KikiFace):
    __swig_setmethods__ = {}
    for _s in [KikiObject,KikiFace]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiValve, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject,KikiFace]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiValve, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiValve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiValve_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiValve_setObjectColor)
KikiValve_swigregister = _kiki.KikiValve_swigregister
KikiValve_swigregister(KikiValve)
KikiValve_setObjectColor = _kiki.KikiValve_setObjectColor

kikiObjectToValve = _kiki.kikiObjectToValve
class KikiMotorCylinder(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMotorCylinder, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMotorCylinder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiMotorCylinder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiMotorCylinder_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiMotorCylinder_setObjectColor)
KikiMotorCylinder_swigregister = _kiki.KikiMotorCylinder_swigregister
KikiMotorCylinder_swigregister(KikiMotorCylinder)
KikiMotorCylinder_setObjectColor = _kiki.KikiMotorCylinder_setObjectColor

class KikiMotorGear(KikiGear):
    __swig_setmethods__ = {}
    for _s in [KikiGear]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMotorGear, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiGear]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMotorGear, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiMotorGear(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiMotorGear_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiMotorGear_setObjectColor)
KikiMotorGear_swigregister = _kiki.KikiMotorGear_swigregister
KikiMotorGear_swigregister(KikiMotorGear)
KikiMotorGear_setObjectColor = _kiki.KikiMotorGear_setObjectColor

class KikiGenerator(KikiGear):
    __swig_setmethods__ = {}
    for _s in [KikiGear]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiGear]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiGenerator_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiGenerator_setObjectColor)
KikiGenerator_swigregister = _kiki.KikiGenerator_swigregister
KikiGenerator_swigregister(KikiGenerator)
KikiGenerator_setObjectColor = _kiki.KikiGenerator_setObjectColor

class KikiLight(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiLight, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiLight, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiLight(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiLight_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiLight_setObjectColor)
KikiLight_swigregister = _kiki.KikiLight_swigregister
KikiLight_swigregister(KikiLight)
KikiLight_setObjectColor = _kiki.KikiLight_setObjectColor

kikiObjectToLight = _kiki.kikiObjectToLight
class KikiCellText(KikiObject,KikiText):
    __swig_setmethods__ = {}
    for _s in [KikiObject,KikiText]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiCellText, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject,KikiText]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiCellText, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiCellText(*args)
        try: self.this.append(this)
        except: self.this = this
    def setOffset(*args): return _kiki.KikiCellText_setOffset(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiCellText_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiCellText_setObjectColor)
KikiCellText_swigregister = _kiki.KikiCellText_swigregister
KikiCellText_swigregister(KikiCellText)
KikiCellText_setObjectColor = _kiki.KikiCellText_setObjectColor

kikiObjectToCellText = _kiki.kikiObjectToCellText
class KikiStone(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiStone, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiStone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiStone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiStone_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiStone_setObjectColor)
KikiStone_swigregister = _kiki.KikiStone_swigregister
KikiStone_swigregister(KikiStone)
KikiStone_setObjectColor = _kiki.KikiStone_setObjectColor

kikiObjectToStone = _kiki.kikiObjectToStone
class KikiWireStone(KikiStone):
    __swig_setmethods__ = {}
    for _s in [KikiStone]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWireStone, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiStone]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWireStone, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiWireStone(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiWireStone_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiWireStone_setObjectColor)
KikiWireStone_swigregister = _kiki.KikiWireStone_swigregister
KikiWireStone_swigregister(KikiWireStone)
KikiWireStone_setObjectColor = _kiki.KikiWireStone_setObjectColor

kikiObjectToWireStone = _kiki.kikiObjectToWireStone
class KikiWall(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiWall, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiWall, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiWall(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiWall_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiWall_setObjectColor)
KikiWall_swigregister = _kiki.KikiWall_swigregister
KikiWall_swigregister(KikiWall)
KikiWall_setObjectColor = _kiki.KikiWall_setObjectColor

kikiObjectToWall = _kiki.kikiObjectToWall
class KikiBomb(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBomb, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBomb, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiBomb(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiBomb_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiBomb_setObjectColor)
KikiBomb_swigregister = _kiki.KikiBomb_swigregister
KikiBomb_swigregister(KikiBomb)
KikiBomb_setObjectColor = _kiki.KikiBomb_setObjectColor

kikiObjectToBomb = _kiki.kikiObjectToBomb
class KikiSwitch(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiSwitch, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiSwitch(*args)
        try: self.this.append(this)
        except: self.this = this
    def toggle(*args): return _kiki.KikiSwitch_toggle(*args)
    def setActive(*args): return _kiki.KikiSwitch_setActive(*args)
    def isActive(*args): return _kiki.KikiSwitch_isActive(*args)
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiSwitch_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiSwitch_setObjectColor)
KikiSwitch_swigregister = _kiki.KikiSwitch_swigregister
KikiSwitch_swigregister(KikiSwitch)
KikiSwitch_setObjectColor = _kiki.KikiSwitch_setObjectColor

kikiObjectToSwitch = _kiki.kikiObjectToSwitch
class KikiGate(KikiSwitch):
    __swig_setmethods__ = {}
    for _s in [KikiSwitch]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiGate, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiSwitch]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiGate, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiGate_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiGate_setObjectColor)
KikiGate_swigregister = _kiki.KikiGate_swigregister
KikiGate_swigregister(KikiGate)
KikiGate_setObjectColor = _kiki.KikiGate_setObjectColor

kikiObjectToGate = _kiki.kikiObjectToGate
class KikiAtom(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiAtom, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def setValue(*args): return _kiki.KikiAtom_setValue(*args)
    def getValue(*args): return _kiki.KikiAtom_getValue(*args)
KikiAtom_swigregister = _kiki.KikiAtom_swigregister
KikiAtom_swigregister(KikiAtom)

class KikiMovesAtom(KikiAtom):
    __swig_setmethods__ = {}
    for _s in [KikiAtom]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiMovesAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiAtom]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiMovesAtom, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiMovesAtom_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiMovesAtom_setObjectColor)
KikiMovesAtom_swigregister = _kiki.KikiMovesAtom_swigregister
KikiMovesAtom_swigregister(KikiMovesAtom)
KikiMovesAtom_setObjectColor = _kiki.KikiMovesAtom_setObjectColor

class KikiValueAtom(KikiAtom):
    __swig_setmethods__ = {}
    for _s in [KikiAtom]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiValueAtom, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiAtom]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiValueAtom, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiValueAtom(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiValueAtom_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiValueAtom_setObjectColor)
KikiValueAtom_swigregister = _kiki.KikiValueAtom_swigregister
KikiValueAtom_swigregister(KikiValueAtom)
KikiValueAtom_setObjectColor = _kiki.KikiValueAtom_setObjectColor

class KikiSpikes(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiSpikes, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiSpikes, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kiki.new_KikiSpikes(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiSpikes_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiSpikes_setObjectColor)
KikiSpikes_swigregister = _kiki.KikiSpikes_swigregister
KikiSpikes_swigregister(KikiSpikes)
KikiSpikes_setObjectColor = _kiki.KikiSpikes_setObjectColor

kikiObjectToSpikes = _kiki.kikiObjectToSpikes
class KikiBullet(KikiObject):
    __swig_setmethods__ = {}
    for _s in [KikiObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiBullet, name, value)
    __swig_getmethods__ = {}
    for _s in [KikiObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiBullet, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["setObjectColor"] = lambda x: _kiki.KikiBullet_setObjectColor
    if _newclass:setObjectColor = staticmethod(_kiki.KikiBullet_setObjectColor)
KikiBullet_swigregister = _kiki.KikiBullet_swigregister
KikiBullet_swigregister(KikiBullet)
KikiBullet_setObjectColor = _kiki.KikiBullet_setObjectColor

class KConsole(KWindow):
    __swig_setmethods__ = {}
    for _s in [KWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KConsole, name, value)
    __swig_getmethods__ = {}
    for _s in [KWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KConsole, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["_print"] = lambda x: _kiki.KConsole__print
    if _newclass:_print = staticmethod(_kiki.KConsole__print)
    __swig_getmethods__["write"] = lambda x: _kiki.KConsole_write
    if _newclass:write = staticmethod(_kiki.KConsole_write)
    __swig_getmethods__["printError"] = lambda x: _kiki.KConsole_printError
    if _newclass:printError = staticmethod(_kiki.KConsole_printError)
    __swig_getmethods__["getConsole"] = lambda x: _kiki.KConsole_getConsole
    if _newclass:getConsole = staticmethod(_kiki.KConsole_getConsole)
    def clear(*args): return _kiki.KConsole_clear(*args)
    def out (self, *args):
        _kiki.KConsole__print(" ".join(map(str, args)))

KConsole_swigregister = _kiki.KConsole_swigregister
KConsole_swigregister(KConsole)
KConsole__print = _kiki.KConsole__print
KConsole_write = _kiki.KConsole_write
KConsole_printError = _kiki.KConsole_printError
KConsole_getConsole = _kiki.KConsole_getConsole

class KikiPythonWidget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPythonWidget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPythonWidget, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_setmethods__["cursorPos"] = _kiki.KikiPythonWidget_cursorPos_set
    __swig_getmethods__["cursorPos"] = _kiki.KikiPythonWidget_cursorPos_get
    if _newclass:cursorPos = _swig_property(_kiki.KikiPythonWidget_cursorPos_get, _kiki.KikiPythonWidget_cursorPos_set)
    __swig_setmethods__["selectionPos"] = _kiki.KikiPythonWidget_selectionPos_set
    __swig_getmethods__["selectionPos"] = _kiki.KikiPythonWidget_selectionPos_get
    if _newclass:selectionPos = _swig_property(_kiki.KikiPythonWidget_selectionPos_get, _kiki.KikiPythonWidget_selectionPos_set)
    def getTextRows(*args): return _kiki.KikiPythonWidget_getTextRows(*args)
    def getTextCols(*args): return _kiki.KikiPythonWidget_getTextCols(*args)
    def getTextSize(*args): return _kiki.KikiPythonWidget_getTextSize(*args)
    def getColumnWidth(*args): return _kiki.KikiPythonWidget_getColumnWidth(*args)
    def getRowHeight(*args): return _kiki.KikiPythonWidget_getRowHeight(*args)
    def getPythonWindow(*args): return _kiki.KikiPythonWidget_getPythonWindow(*args)
    def displayStringAtPos(*args): return _kiki.KikiPythonWidget_displayStringAtPos(*args)
KikiPythonWidget_swigregister = _kiki.KikiPythonWidget_swigregister
KikiPythonWidget_swigregister(KikiPythonWidget)

class KikiPython(KWindow):
    __swig_setmethods__ = {}
    for _s in [KWindow]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KikiPython, name, value)
    __swig_getmethods__ = {}
    for _s in [KWindow]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, KikiPython, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def getPythonWidget(*args): return _kiki.KikiPython_getPythonWidget(*args)
    def setScrollBarUnits(*args): return _kiki.KikiPython_setScrollBarUnits(*args)
    def requestUserInput(*args): return _kiki.KikiPython_requestUserInput(*args)
    def setTitle(*args): return _kiki.KikiPython_setTitle(*args)
    def setStatus(*args): return _kiki.KikiPython_setStatus(*args)
    def setInput(*args): return _kiki.KikiPython_setInput(*args)
    def executeFile(*args): return _kiki.KikiPython_executeFile(*args)
KikiPython_swigregister = _kiki.KikiPython_swigregister
KikiPython_swigregister(KikiPython)



